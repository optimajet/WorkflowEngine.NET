#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WF.Sample.Business
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WFTemp")]
	public partial class DataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkflowScheme(WorkflowScheme instance);
    partial void UpdateWorkflowScheme(WorkflowScheme instance);
    partial void DeleteWorkflowScheme(WorkflowScheme instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeRole(EmployeeRole instance);
    partial void UpdateEmployeeRole(EmployeeRole instance);
    partial void DeleteEmployeeRole(EmployeeRole instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertStructDivision(StructDivision instance);
    partial void UpdateStructDivision(StructDivision instance);
    partial void DeleteStructDivision(StructDivision instance);
    partial void InsertWorkflowProcessInstance(WorkflowProcessInstance instance);
    partial void UpdateWorkflowProcessInstance(WorkflowProcessInstance instance);
    partial void DeleteWorkflowProcessInstance(WorkflowProcessInstance instance);
    partial void InsertWorkflowProcessInstancePersistence(WorkflowProcessInstancePersistence instance);
    partial void UpdateWorkflowProcessInstancePersistence(WorkflowProcessInstancePersistence instance);
    partial void DeleteWorkflowProcessInstancePersistence(WorkflowProcessInstancePersistence instance);
    partial void InsertWorkflowProcessInstanceStatus(WorkflowProcessInstanceStatus instance);
    partial void UpdateWorkflowProcessInstanceStatus(WorkflowProcessInstanceStatus instance);
    partial void DeleteWorkflowProcessInstanceStatus(WorkflowProcessInstanceStatus instance);
    partial void InsertWorkflowProcessScheme(WorkflowProcessScheme instance);
    partial void UpdateWorkflowProcessScheme(WorkflowProcessScheme instance);
    partial void DeleteWorkflowProcessScheme(WorkflowProcessScheme instance);
    partial void InsertWorkflowProcessTransitionHistory(WorkflowProcessTransitionHistory instance);
    partial void UpdateWorkflowProcessTransitionHistory(WorkflowProcessTransitionHistory instance);
    partial void DeleteWorkflowProcessTransitionHistory(WorkflowProcessTransitionHistory instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertDocumentTransitionHistory(DocumentTransitionHistory instance);
    partial void UpdateDocumentTransitionHistory(DocumentTransitionHistory instance);
    partial void DeleteDocumentTransitionHistory(DocumentTransitionHistory instance);
    partial void InsertWorkflowInbox(WorkflowInbox instance);
    partial void UpdateWorkflowInbox(WorkflowInbox instance);
    partial void DeleteWorkflowInbox(WorkflowInbox instance);
    partial void InsertLoadTestingOperation(LoadTestingOperation instance);
    partial void UpdateLoadTestingOperation(LoadTestingOperation instance);
    partial void DeleteLoadTestingOperation(LoadTestingOperation instance);
    #endregion
		
		public DataModelDataContext() :
        base(System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkflowScheme> WorkflowSchemes
		{
			get
			{
				return this.GetTable<WorkflowScheme>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeRole> EmployeeRoles
		{
			get
			{
				return this.GetTable<EmployeeRole>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<StructDivision> StructDivisions
		{
			get
			{
				return this.GetTable<StructDivision>();
			}
		}
		
		public System.Data.Linq.Table<WorkflowProcessInstance> WorkflowProcessInstances
		{
			get
			{
				return this.GetTable<WorkflowProcessInstance>();
			}
		}
		
		public System.Data.Linq.Table<WorkflowProcessInstancePersistence> WorkflowProcessInstancePersistences
		{
			get
			{
				return this.GetTable<WorkflowProcessInstancePersistence>();
			}
		}
		
		public System.Data.Linq.Table<WorkflowProcessInstanceStatus> WorkflowProcessInstanceStatus
		{
			get
			{
				return this.GetTable<WorkflowProcessInstanceStatus>();
			}
		}
		
		public System.Data.Linq.Table<WorkflowProcessScheme> WorkflowProcessSchemes
		{
			get
			{
				return this.GetTable<WorkflowProcessScheme>();
			}
		}
		
		public System.Data.Linq.Table<WorkflowProcessTransitionHistory> WorkflowProcessTransitionHistories
		{
			get
			{
				return this.GetTable<WorkflowProcessTransitionHistory>();
			}
		}
		
		public System.Data.Linq.Table<vHead> vHeads
		{
			get
			{
				return this.GetTable<vHead>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<DocumentTransitionHistory> DocumentTransitionHistories
		{
			get
			{
				return this.GetTable<DocumentTransitionHistory>();
			}
		}
		
		public System.Data.Linq.Table<WorkflowInbox> WorkflowInboxes
		{
			get
			{
				return this.GetTable<WorkflowInbox>();
			}
		}
		
		public System.Data.Linq.Table<LoadTestingOperation> LoadTestingOperations
		{
			get
			{
				return this.GetTable<LoadTestingOperation>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DropWorkflowInbox")]
		public int DropWorkflowInbox([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> processId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), processId);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowScheme")]
	public partial class WorkflowScheme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Code;
		
		private string _Scheme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSchemeChanging(string value);
    partial void OnSchemeChanged();
    #endregion
		
		public WorkflowScheme()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scheme", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Scheme
		{
			get
			{
				return this._Scheme;
			}
			set
			{
				if ((this._Scheme != value))
				{
					this.OnSchemeChanging(value);
					this.SendPropertyChanging();
					this._Scheme = value;
					this.SendPropertyChanged("Scheme");
					this.OnSchemeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Guid _StructDivisionId;
		
		private bool _IsHead;
		
		private EntitySet<EmployeeRole> _EmployeeRoles;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Document> _Documents1;
		
		private EntitySet<DocumentTransitionHistory> _DocumentTransitionHistories;
		
		private EntityRef<StructDivision> _StructDivision;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStructDivisionIdChanging(System.Guid value);
    partial void OnStructDivisionIdChanged();
    partial void OnIsHeadChanging(bool value);
    partial void OnIsHeadChanged();
    #endregion
		
		public Employee()
		{
			this._EmployeeRoles = new EntitySet<EmployeeRole>(new Action<EmployeeRole>(this.attach_EmployeeRoles), new Action<EmployeeRole>(this.detach_EmployeeRoles));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Documents1 = new EntitySet<Document>(new Action<Document>(this.attach_Documents1), new Action<Document>(this.detach_Documents1));
			this._DocumentTransitionHistories = new EntitySet<DocumentTransitionHistory>(new Action<DocumentTransitionHistory>(this.attach_DocumentTransitionHistories), new Action<DocumentTransitionHistory>(this.detach_DocumentTransitionHistories));
			this._StructDivision = default(EntityRef<StructDivision>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StructDivisionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StructDivisionId
		{
			get
			{
				return this._StructDivisionId;
			}
			set
			{
				if ((this._StructDivisionId != value))
				{
					if (this._StructDivision.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStructDivisionIdChanging(value);
					this.SendPropertyChanging();
					this._StructDivisionId = value;
					this.SendPropertyChanged("StructDivisionId");
					this.OnStructDivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHead", DbType="Bit NOT NULL")]
		public bool IsHead
		{
			get
			{
				return this._IsHead;
			}
			set
			{
				if ((this._IsHead != value))
				{
					this.OnIsHeadChanging(value);
					this.SendPropertyChanging();
					this._IsHead = value;
					this.SendPropertyChanged("IsHead");
					this.OnIsHeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeRole", Storage="_EmployeeRoles", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<EmployeeRole> EmployeeRoles
		{
			get
			{
				return this._EmployeeRoles;
			}
			set
			{
				this._EmployeeRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Document", Storage="_Documents", ThisKey="Id", OtherKey="ManagerId")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Document1", Storage="_Documents1", ThisKey="Id", OtherKey="AuthorId")]
		public EntitySet<Document> Documents1
		{
			get
			{
				return this._Documents1;
			}
			set
			{
				this._Documents1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DocumentTransitionHistory", Storage="_DocumentTransitionHistories", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<DocumentTransitionHistory> DocumentTransitionHistories
		{
			get
			{
				return this._DocumentTransitionHistories;
			}
			set
			{
				this._DocumentTransitionHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StructDivision_Employee", Storage="_StructDivision", ThisKey="StructDivisionId", OtherKey="Id", IsForeignKey=true)]
		public StructDivision StructDivision
		{
			get
			{
				return this._StructDivision.Entity;
			}
			set
			{
				StructDivision previousValue = this._StructDivision.Entity;
				if (((previousValue != value) 
							|| (this._StructDivision.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StructDivision.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._StructDivision.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._StructDivisionId = value.Id;
					}
					else
					{
						this._StructDivisionId = default(System.Guid);
					}
					this.SendPropertyChanged("StructDivision");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeRoles(EmployeeRole entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeRoles(EmployeeRole entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Documents1(Document entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Documents1(Document entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_DocumentTransitionHistories(DocumentTransitionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_DocumentTransitionHistories(DocumentTransitionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeRole")]
	public partial class EmployeeRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EmployeeId;
		
		private System.Guid _RoleId;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(System.Guid value);
    partial void OnEmployeeIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public EmployeeRole()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeRole", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeRoles.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeRoles.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(System.Guid);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_EmployeeRole", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.EmployeeRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.EmployeeRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private EntitySet<EmployeeRole> _EmployeeRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._EmployeeRoles = new EntitySet<EmployeeRole>(new Action<EmployeeRole>(this.attach_EmployeeRoles), new Action<EmployeeRole>(this.detach_EmployeeRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_EmployeeRole", Storage="_EmployeeRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<EmployeeRole> EmployeeRoles
		{
			get
			{
				return this._EmployeeRoles;
			}
			set
			{
				this._EmployeeRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeRoles(EmployeeRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_EmployeeRoles(EmployeeRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StructDivision")]
	public partial class StructDivision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _ParentId;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<StructDivision> _StructDivisions;
		
		private EntityRef<StructDivision> _StructDivision1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentIdChanged();
    #endregion
		
		public StructDivision()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._StructDivisions = new EntitySet<StructDivision>(new Action<StructDivision>(this.attach_StructDivisions), new Action<StructDivision>(this.detach_StructDivisions));
			this._StructDivision1 = default(EntityRef<StructDivision>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._StructDivision1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StructDivision_Employee", Storage="_Employees", ThisKey="Id", OtherKey="StructDivisionId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StructDivision_StructDivision", Storage="_StructDivisions", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<StructDivision> StructDivisions
		{
			get
			{
				return this._StructDivisions;
			}
			set
			{
				this._StructDivisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StructDivision_StructDivision", Storage="_StructDivision1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public StructDivision StructDivision1
		{
			get
			{
				return this._StructDivision1.Entity;
			}
			set
			{
				StructDivision previousValue = this._StructDivision1.Entity;
				if (((previousValue != value) 
							|| (this._StructDivision1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StructDivision1.Entity = null;
						previousValue.StructDivisions.Remove(this);
					}
					this._StructDivision1.Entity = value;
					if ((value != null))
					{
						value.StructDivisions.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("StructDivision1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.StructDivision = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.StructDivision = null;
		}
		
		private void attach_StructDivisions(StructDivision entity)
		{
			this.SendPropertyChanging();
			entity.StructDivision1 = this;
		}
		
		private void detach_StructDivisions(StructDivision entity)
		{
			this.SendPropertyChanging();
			entity.StructDivision1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowProcessInstance")]
	public partial class WorkflowProcessInstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _StateName;
		
		private string _ActivityName;
		
		private System.Nullable<System.Guid> _SchemeId;
		
		private string _PreviousState;
		
		private string _PreviousStateForDirect;
		
		private string _PreviousStateForReverse;
		
		private string _PreviousActivity;
		
		private string _PreviousActivityForDirect;
		
		private string _PreviousActivityForReverse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnActivityNameChanging(string value);
    partial void OnActivityNameChanged();
    partial void OnSchemeIdChanging(System.Nullable<System.Guid> value);
    partial void OnSchemeIdChanged();
    partial void OnPreviousStateChanging(string value);
    partial void OnPreviousStateChanged();
    partial void OnPreviousStateForDirectChanging(string value);
    partial void OnPreviousStateForDirectChanged();
    partial void OnPreviousStateForReverseChanging(string value);
    partial void OnPreviousStateForReverseChanged();
    partial void OnPreviousActivityChanging(string value);
    partial void OnPreviousActivityChanged();
    partial void OnPreviousActivityForDirectChanging(string value);
    partial void OnPreviousActivityForDirectChanged();
    partial void OnPreviousActivityForReverseChanging(string value);
    partial void OnPreviousActivityForReverseChanged();
    #endregion
		
		public WorkflowProcessInstance()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ActivityName
		{
			get
			{
				return this._ActivityName;
			}
			set
			{
				if ((this._ActivityName != value))
				{
					this.OnActivityNameChanging(value);
					this.SendPropertyChanging();
					this._ActivityName = value;
					this.SendPropertyChanged("ActivityName");
					this.OnActivityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemeId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchemeId
		{
			get
			{
				return this._SchemeId;
			}
			set
			{
				if ((this._SchemeId != value))
				{
					this.OnSchemeIdChanging(value);
					this.SendPropertyChanging();
					this._SchemeId = value;
					this.SendPropertyChanged("SchemeId");
					this.OnSchemeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousState", DbType="NVarChar(MAX)")]
		public string PreviousState
		{
			get
			{
				return this._PreviousState;
			}
			set
			{
				if ((this._PreviousState != value))
				{
					this.OnPreviousStateChanging(value);
					this.SendPropertyChanging();
					this._PreviousState = value;
					this.SendPropertyChanged("PreviousState");
					this.OnPreviousStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousStateForDirect", DbType="NVarChar(MAX)")]
		public string PreviousStateForDirect
		{
			get
			{
				return this._PreviousStateForDirect;
			}
			set
			{
				if ((this._PreviousStateForDirect != value))
				{
					this.OnPreviousStateForDirectChanging(value);
					this.SendPropertyChanging();
					this._PreviousStateForDirect = value;
					this.SendPropertyChanged("PreviousStateForDirect");
					this.OnPreviousStateForDirectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousStateForReverse", DbType="NVarChar(MAX)")]
		public string PreviousStateForReverse
		{
			get
			{
				return this._PreviousStateForReverse;
			}
			set
			{
				if ((this._PreviousStateForReverse != value))
				{
					this.OnPreviousStateForReverseChanging(value);
					this.SendPropertyChanging();
					this._PreviousStateForReverse = value;
					this.SendPropertyChanged("PreviousStateForReverse");
					this.OnPreviousStateForReverseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousActivity", DbType="NVarChar(MAX)")]
		public string PreviousActivity
		{
			get
			{
				return this._PreviousActivity;
			}
			set
			{
				if ((this._PreviousActivity != value))
				{
					this.OnPreviousActivityChanging(value);
					this.SendPropertyChanging();
					this._PreviousActivity = value;
					this.SendPropertyChanged("PreviousActivity");
					this.OnPreviousActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousActivityForDirect", DbType="NVarChar(MAX)")]
		public string PreviousActivityForDirect
		{
			get
			{
				return this._PreviousActivityForDirect;
			}
			set
			{
				if ((this._PreviousActivityForDirect != value))
				{
					this.OnPreviousActivityForDirectChanging(value);
					this.SendPropertyChanging();
					this._PreviousActivityForDirect = value;
					this.SendPropertyChanged("PreviousActivityForDirect");
					this.OnPreviousActivityForDirectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousActivityForReverse", DbType="NVarChar(MAX)")]
		public string PreviousActivityForReverse
		{
			get
			{
				return this._PreviousActivityForReverse;
			}
			set
			{
				if ((this._PreviousActivityForReverse != value))
				{
					this.OnPreviousActivityForReverseChanging(value);
					this.SendPropertyChanging();
					this._PreviousActivityForReverse = value;
					this.SendPropertyChanged("PreviousActivityForReverse");
					this.OnPreviousActivityForReverseChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowProcessInstancePersistence")]
	public partial class WorkflowProcessInstancePersistence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ProcessId;
		
		private string _ParameterName;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnProcessIdChanging(System.Guid value);
    partial void OnProcessIdChanged();
    partial void OnParameterNameChanging(string value);
    partial void OnParameterNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public WorkflowProcessInstancePersistence()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProcessId
		{
			get
			{
				return this._ProcessId;
			}
			set
			{
				if ((this._ProcessId != value))
				{
					this.OnProcessIdChanging(value);
					this.SendPropertyChanging();
					this._ProcessId = value;
					this.SendPropertyChanged("ProcessId");
					this.OnProcessIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ParameterName
		{
			get
			{
				return this._ParameterName;
			}
			set
			{
				if ((this._ParameterName != value))
				{
					this.OnParameterNameChanging(value);
					this.SendPropertyChanging();
					this._ParameterName = value;
					this.SendPropertyChanged("ParameterName");
					this.OnParameterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowProcessInstanceStatus")]
	public partial class WorkflowProcessInstanceStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private byte _Status;
		
		private System.Guid _Lock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnLockChanging(System.Guid value);
    partial void OnLockChanged();
    #endregion
		
		public WorkflowProcessInstanceStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lock", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Lock
		{
			get
			{
				return this._Lock;
			}
			set
			{
				if ((this._Lock != value))
				{
					this.OnLockChanging(value);
					this.SendPropertyChanging();
					this._Lock = value;
					this.SendPropertyChanged("Lock");
					this.OnLockChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowProcessScheme")]
	public partial class WorkflowProcessScheme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Scheme;
		
		private string _DefiningParameters;
		
		private string _DefiningParametersHash;
		
		private string _SchemeCode;
		
		private bool _IsObsolete;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchemeChanging(string value);
    partial void OnSchemeChanged();
    partial void OnDefiningParametersChanging(string value);
    partial void OnDefiningParametersChanged();
    partial void OnDefiningParametersHashChanging(string value);
    partial void OnDefiningParametersHashChanged();
    partial void OnSchemeCodeChanging(string value);
    partial void OnSchemeCodeChanged();
    partial void OnIsObsoleteChanging(bool value);
    partial void OnIsObsoleteChanged();
    #endregion
		
		public WorkflowProcessScheme()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scheme", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Scheme
		{
			get
			{
				return this._Scheme;
			}
			set
			{
				if ((this._Scheme != value))
				{
					this.OnSchemeChanging(value);
					this.SendPropertyChanging();
					this._Scheme = value;
					this.SendPropertyChanged("Scheme");
					this.OnSchemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefiningParameters", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DefiningParameters
		{
			get
			{
				return this._DefiningParameters;
			}
			set
			{
				if ((this._DefiningParameters != value))
				{
					this.OnDefiningParametersChanging(value);
					this.SendPropertyChanging();
					this._DefiningParameters = value;
					this.SendPropertyChanged("DefiningParameters");
					this.OnDefiningParametersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefiningParametersHash", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string DefiningParametersHash
		{
			get
			{
				return this._DefiningParametersHash;
			}
			set
			{
				if ((this._DefiningParametersHash != value))
				{
					this.OnDefiningParametersHashChanging(value);
					this.SendPropertyChanging();
					this._DefiningParametersHash = value;
					this.SendPropertyChanged("DefiningParametersHash");
					this.OnDefiningParametersHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemeCode", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SchemeCode
		{
			get
			{
				return this._SchemeCode;
			}
			set
			{
				if ((this._SchemeCode != value))
				{
					this.OnSchemeCodeChanging(value);
					this.SendPropertyChanging();
					this._SchemeCode = value;
					this.SendPropertyChanged("SchemeCode");
					this.OnSchemeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsObsolete", DbType="Bit NOT NULL")]
		public bool IsObsolete
		{
			get
			{
				return this._IsObsolete;
			}
			set
			{
				if ((this._IsObsolete != value))
				{
					this.OnIsObsoleteChanging(value);
					this.SendPropertyChanging();
					this._IsObsolete = value;
					this.SendPropertyChanged("IsObsolete");
					this.OnIsObsoleteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowProcessTransitionHistory")]
	public partial class WorkflowProcessTransitionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ProcessId;
		
		private System.Guid _ExecutorIdentityId;
		
		private System.Guid _ActorIdentityId;
		
		private string _FromActivityName;
		
		private string _ToActivityName;
		
		private string _ToStateName;
		
		private System.DateTime _TransitionTime;
		
		private string _TransitionClassifier;
		
		private bool _IsFinalised;
		
		private string _FromStateName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnProcessIdChanging(System.Guid value);
    partial void OnProcessIdChanged();
    partial void OnExecutorIdentityIdChanging(System.Guid value);
    partial void OnExecutorIdentityIdChanged();
    partial void OnActorIdentityIdChanging(System.Guid value);
    partial void OnActorIdentityIdChanged();
    partial void OnFromActivityNameChanging(string value);
    partial void OnFromActivityNameChanged();
    partial void OnToActivityNameChanging(string value);
    partial void OnToActivityNameChanged();
    partial void OnToStateNameChanging(string value);
    partial void OnToStateNameChanged();
    partial void OnTransitionTimeChanging(System.DateTime value);
    partial void OnTransitionTimeChanged();
    partial void OnTransitionClassifierChanging(string value);
    partial void OnTransitionClassifierChanged();
    partial void OnIsFinalisedChanging(bool value);
    partial void OnIsFinalisedChanged();
    partial void OnFromStateNameChanging(string value);
    partial void OnFromStateNameChanged();
    #endregion
		
		public WorkflowProcessTransitionHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProcessId
		{
			get
			{
				return this._ProcessId;
			}
			set
			{
				if ((this._ProcessId != value))
				{
					this.OnProcessIdChanging(value);
					this.SendPropertyChanging();
					this._ProcessId = value;
					this.SendPropertyChanged("ProcessId");
					this.OnProcessIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutorIdentityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ExecutorIdentityId
		{
			get
			{
				return this._ExecutorIdentityId;
			}
			set
			{
				if ((this._ExecutorIdentityId != value))
				{
					this.OnExecutorIdentityIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutorIdentityId = value;
					this.SendPropertyChanged("ExecutorIdentityId");
					this.OnExecutorIdentityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorIdentityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ActorIdentityId
		{
			get
			{
				return this._ActorIdentityId;
			}
			set
			{
				if ((this._ActorIdentityId != value))
				{
					this.OnActorIdentityIdChanging(value);
					this.SendPropertyChanging();
					this._ActorIdentityId = value;
					this.SendPropertyChanged("ActorIdentityId");
					this.OnActorIdentityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromActivityName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FromActivityName
		{
			get
			{
				return this._FromActivityName;
			}
			set
			{
				if ((this._FromActivityName != value))
				{
					this.OnFromActivityNameChanging(value);
					this.SendPropertyChanging();
					this._FromActivityName = value;
					this.SendPropertyChanged("FromActivityName");
					this.OnFromActivityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToActivityName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ToActivityName
		{
			get
			{
				return this._ToActivityName;
			}
			set
			{
				if ((this._ToActivityName != value))
				{
					this.OnToActivityNameChanging(value);
					this.SendPropertyChanging();
					this._ToActivityName = value;
					this.SendPropertyChanged("ToActivityName");
					this.OnToActivityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToStateName", DbType="NVarChar(MAX)")]
		public string ToStateName
		{
			get
			{
				return this._ToStateName;
			}
			set
			{
				if ((this._ToStateName != value))
				{
					this.OnToStateNameChanging(value);
					this.SendPropertyChanging();
					this._ToStateName = value;
					this.SendPropertyChanged("ToStateName");
					this.OnToStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransitionTime", DbType="DateTime NOT NULL")]
		public System.DateTime TransitionTime
		{
			get
			{
				return this._TransitionTime;
			}
			set
			{
				if ((this._TransitionTime != value))
				{
					this.OnTransitionTimeChanging(value);
					this.SendPropertyChanging();
					this._TransitionTime = value;
					this.SendPropertyChanged("TransitionTime");
					this.OnTransitionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransitionClassifier", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TransitionClassifier
		{
			get
			{
				return this._TransitionClassifier;
			}
			set
			{
				if ((this._TransitionClassifier != value))
				{
					this.OnTransitionClassifierChanging(value);
					this.SendPropertyChanging();
					this._TransitionClassifier = value;
					this.SendPropertyChanged("TransitionClassifier");
					this.OnTransitionClassifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFinalised", DbType="Bit NOT NULL")]
		public bool IsFinalised
		{
			get
			{
				return this._IsFinalised;
			}
			set
			{
				if ((this._IsFinalised != value))
				{
					this.OnIsFinalisedChanging(value);
					this.SendPropertyChanging();
					this._IsFinalised = value;
					this.SendPropertyChanged("IsFinalised");
					this.OnIsFinalisedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromStateName", DbType="NVarChar(MAX)")]
		public string FromStateName
		{
			get
			{
				return this._FromStateName;
			}
			set
			{
				if ((this._FromStateName != value))
				{
					this.OnFromStateNameChanging(value);
					this.SendPropertyChanging();
					this._FromStateName = value;
					this.SendPropertyChanged("FromStateName");
					this.OnFromStateNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vHeads")]
	public partial class vHead
	{
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Guid _HeadId;
		
		private string _HeadName;
		
		public vHead()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid HeadId
		{
			get
			{
				return this._HeadId;
			}
			set
			{
				if ((this._HeadId != value))
				{
					this._HeadId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string HeadName
		{
			get
			{
				return this._HeadName;
			}
			set
			{
				if ((this._HeadName != value))
				{
					this._HeadName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _Number;
		
		private string _Name;
		
		private string _Comment;
		
		private System.Guid _AuthorId;
		
		private System.Nullable<System.Guid> _ManagerId;
		
		private decimal _Sum;
		
		private string _State;

        private string _StateName;

        private EntitySet<DocumentTransitionHistory> _DocumentTransitionHistories;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnAuthorIdChanging(System.Guid value);
    partial void OnAuthorIdChanged();
    partial void OnManagerIdChanging(System.Nullable<System.Guid> value);
    partial void OnManagerIdChanged();
    partial void OnSumChanging(decimal value);
    partial void OnSumChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    #endregion

        public Document()
		{
			this._DocumentTransitionHistories = new EntitySet<DocumentTransitionHistory>(new Action<DocumentTransitionHistory>(this.attach_DocumentTransitionHistories), new Action<DocumentTransitionHistory>(this.detach_DocumentTransitionHistories));
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ManagerId
		{
			get
			{
				return this._ManagerId;
			}
			set
			{
				if ((this._ManagerId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIdChanging(value);
					this.SendPropertyChanging();
					this._ManagerId = value;
					this.SendPropertyChanged("ManagerId");
					this.OnManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sum", DbType="Money NOT NULL")]
		public decimal Sum
		{
			get
			{
				return this._Sum;
			}
			set
			{
				if ((this._Sum != value))
				{
					this.OnSumChanging(value);
					this.SendPropertyChanging();
					this._Sum = value;
					this.SendPropertyChanged("Sum");
					this.OnSumChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_State", DbType = "NVarChar(1024) NOT NULL", CanBeNull = false)]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if ((this._State != value))
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging();
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentTransitionHistory", Storage="_DocumentTransitionHistories", ThisKey="Id", OtherKey="DocumentId")]
		public EntitySet<DocumentTransitionHistory> DocumentTransitionHistories
		{
			get
			{
				return this._DocumentTransitionHistories;
			}
			set
			{
				this._DocumentTransitionHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Document", Storage="_Employee", ThisKey="ManagerId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._ManagerId = value.Id;
					}
					else
					{
						this._ManagerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Document1", Storage="_Employee1", ThisKey="AuthorId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Documents1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Documents1.Add(this);
						this._AuthorId = value.Id;
					}
					else
					{
						this._AuthorId = default(System.Guid);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentTransitionHistories(DocumentTransitionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentTransitionHistories(DocumentTransitionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentTransitionHistory")]
	public partial class DocumentTransitionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _DocumentId;
		
		private System.Nullable<System.Guid> _EmployeeId;
		
		private string _AllowedToEmployeeNames;
		
		private System.Nullable<System.DateTime> _TransitionTime;
		
		private long _Order;
		
		private System.Nullable<System.DateTime> _TransitionTimeForSort;
		
		private string _InitialState;
		
		private string _DestinationState;
		
		private string _Command;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDocumentIdChanging(System.Guid value);
    partial void OnDocumentIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<System.Guid> value);
    partial void OnEmployeeIdChanged();
    partial void OnAllowedToEmployeeNamesChanging(string value);
    partial void OnAllowedToEmployeeNamesChanged();
    partial void OnTransitionTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTransitionTimeChanged();
    partial void OnOrderChanging(long value);
    partial void OnOrderChanged();
    partial void OnTransitionTimeForSortChanging(System.Nullable<System.DateTime> value);
    partial void OnTransitionTimeForSortChanged();
    partial void OnInitialStateChanging(string value);
    partial void OnInitialStateChanged();
    partial void OnDestinationStateChanging(string value);
    partial void OnDestinationStateChanged();
    partial void OnCommandChanging(string value);
    partial void OnCommandChanged();
    #endregion
		
		public DocumentTransitionHistory()
		{
			this._Document = default(EntityRef<Document>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DocumentId
		{
			get
			{
				return this._DocumentId;
			}
			set
			{
				if ((this._DocumentId != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentId = value;
					this.SendPropertyChanged("DocumentId");
					this.OnDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowedToEmployeeNames", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AllowedToEmployeeNames
		{
			get
			{
				return this._AllowedToEmployeeNames;
			}
			set
			{
				if ((this._AllowedToEmployeeNames != value))
				{
					this.OnAllowedToEmployeeNamesChanging(value);
					this.SendPropertyChanging();
					this._AllowedToEmployeeNames = value;
					this.SendPropertyChanged("AllowedToEmployeeNames");
					this.OnAllowedToEmployeeNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransitionTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransitionTime
		{
			get
			{
				return this._TransitionTime;
			}
			set
			{
				if ((this._TransitionTime != value))
				{
					this.OnTransitionTimeChanging(value);
					this.SendPropertyChanging();
					this._TransitionTime = value;
					this.SendPropertyChanged("TransitionTime");
					this.OnTransitionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransitionTimeForSort", AutoSync=AutoSync.Always, DbType="DateTime", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> TransitionTimeForSort
		{
			get
			{
				return this._TransitionTimeForSort;
			}
			set
			{
				if ((this._TransitionTimeForSort != value))
				{
					this.OnTransitionTimeForSortChanging(value);
					this.SendPropertyChanging();
					this._TransitionTimeForSort = value;
					this.SendPropertyChanged("TransitionTimeForSort");
					this.OnTransitionTimeForSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialState", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string InitialState
		{
			get
			{
				return this._InitialState;
			}
			set
			{
				if ((this._InitialState != value))
				{
					this.OnInitialStateChanging(value);
					this.SendPropertyChanging();
					this._InitialState = value;
					this.SendPropertyChanged("InitialState");
					this.OnInitialStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationState", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string DestinationState
		{
			get
			{
				return this._DestinationState;
			}
			set
			{
				if ((this._DestinationState != value))
				{
					this.OnDestinationStateChanging(value);
					this.SendPropertyChanging();
					this._DestinationState = value;
					this.SendPropertyChanged("DestinationState");
					this.OnDestinationStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Command", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				if ((this._Command != value))
				{
					this.OnCommandChanging(value);
					this.SendPropertyChanging();
					this._Command = value;
					this.SendPropertyChanged("Command");
					this.OnCommandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentTransitionHistory", Storage="_Document", ThisKey="DocumentId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentTransitionHistories.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentTransitionHistories.Add(this);
						this._DocumentId = value.Id;
					}
					else
					{
						this._DocumentId = default(System.Guid);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DocumentTransitionHistory", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.DocumentTransitionHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.DocumentTransitionHistories.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowInbox")]
	public partial class WorkflowInbox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ProcessId;
		
		private System.Guid _IdentityId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnProcessIdChanging(System.Guid value);
    partial void OnProcessIdChanged();
    partial void OnIdentityIdChanging(System.Guid value);
    partial void OnIdentityIdChanged();
    #endregion
		
		public WorkflowInbox()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProcessId
		{
			get
			{
				return this._ProcessId;
			}
			set
			{
				if ((this._ProcessId != value))
				{
					this.OnProcessIdChanging(value);
					this.SendPropertyChanging();
					this._ProcessId = value;
					this.SendPropertyChanged("ProcessId");
					this.OnProcessIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdentityId
		{
			get
			{
				return this._IdentityId;
			}
			set
			{
				if ((this._IdentityId != value))
				{
					this.OnIdentityIdChanging(value);
					this.SendPropertyChanging();
					this._IdentityId = value;
					this.SendPropertyChanged("IdentityId");
					this.OnIdentityIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoadTestingOperation")]
	public partial class LoadTestingOperation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Date;
		
		private string _Type;
		
		private double _DurationMilliseconds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDurationMillisecondsChanging(double value);
    partial void OnDurationMillisecondsChanged();
    #endregion
		
		public LoadTestingOperation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationMilliseconds", DbType="Float NOT NULL")]
		public double DurationMilliseconds
		{
			get
			{
				return this._DurationMilliseconds;
			}
			set
			{
				if ((this._DurationMilliseconds != value))
				{
					this.OnDurationMillisecondsChanging(value);
					this.SendPropertyChanging();
					this._DurationMilliseconds = value;
					this.SendPropertyChanged("DurationMilliseconds");
					this.OnDurationMillisecondsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
