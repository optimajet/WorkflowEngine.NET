<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OptimaJet.Workflow.Core</name>
    </assembly>
    <members>
        <member name="T:OptimaJet.Workflow.Core.ActivityBase">
            <summary>
            The class for implementation custom activities
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.BPMN.Definition.#ctor(System.String)">
            <summary>
            The constructor creates Definition object and loads BPMN2 scheme
            </summary>
            <param name="bpmn">BPMN2 scheme in XML-format</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.BPMN.Definition.#ctor(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            The constructor creates Definition object and loads information from ProcessDefinition object
            </summary>
            <param name="pd">ProcessDefinition object for loading</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.BPMN.Definition.ConvertToProcessDefinitions">
            <summary>
            Gets a list of ProcessDefinition from BPMN format 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.BPMN.Definition.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>XML</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Builder.BuildStepResult">
            <summary>
            Represents the result of a build step execution 
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Builder.BuildStep">
            <summary>
            Represents a scheme build step
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Builder.BuildStepPosition">
            <summary>
             Determines the order of the build steps
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Builder.BuildStepPosition.BeforeSystemSteps">
            <summary>
            The step will be executed before system build steps
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Builder.BuildStepPosition.SystemSteps">
            <summary>
            The step will be executed as system build step  
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Builder.BuildStepPosition.AfterSystemSteps">
            <summary>
            The step will be executed after system build steps
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder">
            <summary>
            Interface of a workflow builder, which convert not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.Runtime">
            <summary>
            Workflow runtime instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.CreateNewProcessAsync(System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Create new instance of the process.
            </summary>
            <param name="processId">Process id</param>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
            /// <param name="tenantId">Tenant id</param>
            <returns>ProcessInstance object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.CreateNewProcessSchemeAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create new scheme for existing process
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessInstanceAsync(System.Guid)">
            <summary>
            Returns existing process instance
            </summary>
            <param name="processId">Process id</param>
            <returns>ProcessInstance object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessSchemeAsync(System.Guid)">
            <summary>
            Returns process scheme by specific id, if scheme not exists creates it 
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SetCache(OptimaJet.Workflow.Core.Cache.IParsedProcessCache)">
            <summary>
            Sets the cache to store parsed ProcessDefinition objects <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> 
            </summary>
            <param name="cache">Instance of cache object</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.RemoveCache">
            <summary>
            Removes the cache to store parsed ProcessDefinition objects <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessSchemeAsync(System.String)">
            <summary>
            Returns process scheme by specific name, if scheme not exists creates it
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessSchemeAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns process scheme by specific name and parameters for creating the scheme of the process, if scheme not exists creates it
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SetSchemeIsObsoleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set IsObsolete sign to the scheme with specific name and parameters for creating the scheme of the process
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SetSchemeIsObsoleteAsync(System.String)">
            <summary>
            Set IsObsolete sign to the scheme with specific name
            </summary>
            <param name="schemeCode">Name of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetProcessSchemeForDesignerAsync(System.String)">
            <summary>
            Returns existing process scheme directly from scheme persistence store
            </summary>
            <param name="code">Name of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SaveProcessSchemeAsync(System.String,OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Saves process scheme to scheme persistence store
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="pd">Object representation of the scheme</param>
            <returns>
            success - true if scheme validation was success,
            errors - validation errors,
            failedStep - the name of failed build step
            </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.Parse(System.String,OptimaJet.Workflow.Core.Builder.SchemeParsingType)">
            <summary>
            Parses process scheme from the string
            </summary>
            <param name="scheme">String representation of not parsed scheme</param>
            <param name="schemeParsingType">Type of parsing strict or soft. Uses only for upload operations where we need softer scheme check</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.Serialize(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serialize process scheme to the string
            </summary>
            <param name="processDefinition">SProcessDefinition object</param>
            <returns>String representation of not parsed scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.AddBuildStep(System.Int32,OptimaJet.Workflow.Core.Builder.BuildStepPosition,OptimaJet.Workflow.Core.Builder.BuildStep)">
            <summary>
            Adds a build step into workflow builder
            </summary>
            <param name="order">Order in position</param>
            <param name="buildStepPosition">Indicates whether the build step is added after the system steps or before the system steps.</param>
            <param name="step">Build step</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.AddSystemBuildStepAtTheEnd(OptimaJet.Workflow.Core.Builder.BuildStep,System.Int32,System.Int32)">
            <summary>
            Adds a build step into workflow builder
            </summary>
            <param name="step">Build step</param>
            <param name="startNumber">The order from which the ordering begins</param>
             <param name="startNumber">The order on which the ordering ends</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.AddBuildStepAtTheEnd(OptimaJet.Workflow.Core.Builder.BuildStep)">
            <summary>
            Adds a build step after all build steps into workflow builder
            </summary>
            <param name="step">Build step</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GenerateProcessDefinitionAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Generates new Process Definition, doesn't save it in a database, doesn't use cache, doesn't execute build steps
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">The parameters for creating the scheme of the process</param>
            <returns>Generated process definition</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.ContainsBuildStep(System.String)">
            <summary>
            Returns true if the builder contains a build step with the name
            </summary>
            <param name="name">Name of build step</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetInlinedSchemeCodesAsync">
            <summary>
            Returns the list of scheme codes that can be inlined into other schemes
            </summary>
            <returns>The list of scheme codes</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetRelatedByInliningSchemeCodesAsync(System.String)">
            <summary>
            Returns the list of scheme codes into which the scheme with the given code has been inlined
            </summary>
            <param name="schemeCode">Inlined scheme code</param>
            <returns>The list of scheme codes into which the scheme with the given code has been inlined</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.RemoveSchemeTagsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove tags from scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SetSchemeTagsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set tags to scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.SearchSchemesByTagsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the list of scheme codes into which the scheme with the given tags
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.AddSchemeTagsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add tags to scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.GetInlineSchemesAsync(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Get the list of inlined schemes for a given scheme
            </summary>
            <param name="pd">Object representation of the scheme</param>
            <returns>
            codes - list of inlined scheme codes,
            errors - validation errors,
            failedStep - the name of failed build step
            </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.UpsertProcessInstanceScheme(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Saves scheme directly in WorkflowProcessScheme
            </summary>
            <param name="processDefinition">Process definition to save</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder.RemoveSchemeFromCache(System.Guid)">
            <summary>
            Remove scheme from scheme cache if the cache is exists
            </summary>
            <param name="schemeId"></param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1">
            <summary>
            Base workflow builder, which convert not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/></typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.#ctor(OptimaJet.Workflow.Core.Generator.IWorkflowGenerator{`0},OptimaJet.Workflow.Core.Parser.IWorkflowParser{`0},OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider{`0})">
            <summary>
            Create WorkflowBuilder object
            </summary>
            <param name="generator">Not parsed scheme generator <see cref="T:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1"/></param>
            <param name="parser">Parser from not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/></param>
            <param name="schemePersistenceProvider">Scheme persistence provider <see cref="T:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessSchemeAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessSchemeAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessSchemeAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.CreateNewProcessAsync(System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.CreateNewSubprocessAsync(System.Guid,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.TransitionDefinition)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessInstanceAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.CreateNewProcessSchemeAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.CreateNewSubprocessSchemeAsync(OptimaJet.Workflow.Core.Model.ProcessDefinition,OptimaJet.Workflow.Core.Model.TransitionDefinition)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SetCache(OptimaJet.Workflow.Core.Cache.IParsedProcessCache)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.RemoveCache">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SetSchemeIsObsoleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SetSchemeIsObsoleteAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetProcessSchemeForDesignerAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SaveProcessSchemeAsync(System.String,OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GetInlineSchemesAsync(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.UpsertProcessInstanceScheme(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.RemoveSchemeFromCache(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.Parse(System.String,OptimaJet.Workflow.Core.Builder.SchemeParsingType)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.Serialize(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.AddBuildStep(System.Int32,OptimaJet.Workflow.Core.Builder.BuildStepPosition,OptimaJet.Workflow.Core.Builder.BuildStep)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.GenerateProcessDefinitionAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.AddSchemeTagsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.RemoveSchemeTagsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SetSchemeTagsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Builder.WorkflowBuilder`1.SearchSchemesByTagsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:OptimaJet.Workflow.Core.Cache.DefaultParcedProcessCache">
            <summary>
            Default cache <see cref="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache"/> for parced processes <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.DefaultParcedProcessCache.Clear">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.DefaultParcedProcessCache.GetProcessDefinitionBySchemeId(System.Guid)">
            <summary>
            Returns process definition from the cache by scheme id, if process definition is not exists in the cache returns null
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.DefaultParcedProcessCache.AddProcessDefinition(System.Guid,OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Adds process definition to the cache with scheme id as the key
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="processDefinition">ProcessDefinition object</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache">
            <summary>
            Interface of a cache for parced processes <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.IParsedProcessCache.Clear">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.IParsedProcessCache.RemoveProcessDefinition(System.Guid)">
            <summary>
            Removes process definition from cache
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.IParsedProcessCache.GetProcessDefinitionBySchemeId(System.Guid)">
            <summary>
            Returns process definition from the cache by scheme id
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Cache.IParsedProcessCache.AddProcessDefinition(System.Guid,OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Adds process definition to the cache with scheme id as the key
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="processDefinition">ProcessDefinition object</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.CodeActions.CodeActionsCompiller">
            <summary>
            Provides compillation of code actions
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.CodeActions.CodeActionsInvoker">
            <summary>
            Provides invoke of code actions by name
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.CodeActions.ExpressionsCompiler.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Allow to register additional assembly for expressions
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.CodeActions.CodeForCompillation">
            <summary>
            Code for compile by <see cref="T:OptimaJet.Workflow.Core.CodeActions.IExternalCompiler"/>.  System purpose only.
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.CodeActions.CodeForCompillation.#ctor(System.String,System.Int32,OptimaJet.Workflow.Core.Model.CodeActionDefinition)">
            <summary>
            Constructor
            </summary>
            <param name="code">Code</param>
            <param name="codeShift">The code line with which the class definition begins</param>
            <param name="codeActionDefinition">Source definition</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.CodeActions.CodeForCompillation.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.CodeActions.CodeForCompillation.CodeShift">
            <summary>
            The code line with which the class definition begins
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.CodeActions.CodeForCompillation.CodeActionDefinition">
            <summary>
            Source definition
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.CodeActions.IExternalCompiler">
            <summary>
            External compiller interface. System purpose only.
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.CodeActions.IExternalCompiler.Compile(System.Collections.Generic.List{OptimaJet.Workflow.Core.CodeActions.CodeForCompillation},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
             System purpose only.
            </summary>
            <param name="codeItems"></param>
            <param name="referenceLocations"></param>
            <param name="isDebug"></param>
            <param name="ignoreNotCompilled"></param>
            <param name="compileErrors"></param>
            <returns></returns>
        </member>
        <member name="F:OptimaJet.Workflow.Core.CodeActions.RegexPattern.Parameter">
            <summary>
            <remarks>Copy pattern is possible because this is constant. For this enough hover the mouse over the variable. </remarks> 
            <remarks>If you want to copy string dont forget remove then extra quotes inside pattern. </remarks>
            <example>In string of "'@document.Employee.Amount:format' and '@(document.Employee.Amount:format)'" finds "@document.Employee.Amount:format" and "@(document.Employee.Amount:format)" </example>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.CodeActions.RegexPattern.ParameterAndMaybeQuotes">
            <summary>
            <remarks>Copy pattern is possible because this is constant. For this enough hover the mouse over the variable. </remarks> 
            <remarks>If you want to copy string dont forget remove then extra quotes inside pattern. </remarks>
            <example>In string of "'@document.Employee.Amount:format' and '@(document.Employee.Amount:format)'" finds "'@document.Employee.Amount:format'" and "'@(document.Employee.Amount:format)'" </example>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.CodeActions.RegexPattern.Groups">
            <summary>
            Contain parts which can be used to compose common patterns and names which can be used for search in match. 
            <remarks>If add new group don't forget about name.</remarks>
            <remarks>If change names don't forget about name include pattern.</remarks>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.CodeActions.RegexPattern.Groups.ParameterName">
            <summary>
            <example>In '@document.Employee.Amount:format' or '@(document.Employee.Amount:format)' finds 'document.Employee.Amount' </example>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.CodeActions.RegexPattern.Groups.FindParameter">
            <summary>
            <example>In '@document.Employee.Amount:format' or '@(document.Employee.Amount:format)' finds '@' '@(' </example>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.CodeActions.RegexPattern.Groups.Format">
            <summary>
            <example>In '@document.Employee.Amount:format' or '@(document.Employee.Amount:format)' finds 'format' </example>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Designer.Operations">
            <summary>
            All Operations for DesignApi
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Designer.RequestElements">
            <summary>
            Elements from Request
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Execution.ActivityExecutor">
            <summary>
            Provides choice of activity for execution <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Conditions"/>
            and execution of actions <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/>
            and <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/> in chosen activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ActivityExecutor.ActionProvider">
            <summary>
            Returns action provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/> from associated workflow runtime 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Execution.ActivityExecutor.#ctor(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Execution.ExecutionRequest,System.Threading.CancellationToken)">
            <summary>
            Create ActivityExecutor object
            </summary>
            <param name="runtimeOwner">WorkflowRuntime instance which owned executor</param>
            <param name="executionRequest">Execution request which contains process instance, conditions and actions <see cref="P:OptimaJet.Workflow.Core.Execution.ActivityExecutor.ExecutionRequest"/></param>
            <param name="token">Cancellation token which is passed into Actions and Conditions</param>
            <returns>Execution result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Execution.ActivityExecutor.Execute">
            <summary>
            Provides choice of activity for execution <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Conditions"/>
            and execution of actions <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/>
            and <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/> in chosen activity
            </summary>
            <returns>Execution result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Execution.ActivityExecutorFactory.Execute(OptimaJet.Workflow.Core.Execution.ExecutionRequest,System.Threading.CancellationToken)">
            <summary>
            Provides choice of activity for execution <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Conditions"/>
            and execution of actions <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/>
            and <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/> in chosen activity
            </summary>
            <param name="executionRequest">Execution request which contains process instance, conditions and actions <see cref="T:OptimaJet.Workflow.Core.Execution.ExecutionRequest"/></param>
            <param name="token">Cancellation token which is passed into Actions and Conditions</param>
            <returns>Execution result</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters">
            <summary>
            Represent execution request which contains conditions and actions
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.Methods">
            <summary>
            List of actions to execute in the case of conditions are satisfied
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.Conditions">
            <summary>
            List of conditions to check
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.TransitionName">
            <summary>
            Executed transition name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.ActivityName">
            <summary>
            Executed activity name <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.ConditionsConcatenationType">
            <summary>
            Type of concatenation for conditions
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.Create(OptimaJet.Workflow.Core.Model.TransitionDefinition)">
            <summary>
            Create ExecutionRequestParameters object
            </summary>
            <param name="transition">Executed transition</param>
            <returns>ExecutionRequestParameters object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.Create(OptimaJet.Workflow.Core.Model.TransitionDefinition,System.Boolean)">
            <summary>
            Create ExecutionRequestParameters object
            </summary>
            <param name="transition">Executed transition</param>
            <param name="isPreExecution">If true pre-execution implementation will be requested to execute <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/>, if false  implementation will be requested to execute <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/></param>
            <returns>ExecutionRequestParameters object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.Create(OptimaJet.Workflow.Core.Model.ActivityDefinition,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ConditionDefinition})">
            <summary>
            Create ExecutionRequestParameters object
            </summary>
            <param name="activityToExecute">Activity to execute</param>
            <param name="conditions">List of conditions to check</param>
            <returns>ExecutionRequestParameters object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.Create(OptimaJet.Workflow.Core.Model.ActivityDefinition,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ConditionDefinition},System.Boolean)">
            <summary>
            Create ExecutionRequestParameters object
            </summary>
            <param name="activityToExecute">Activity to execute</param>
            <param name="conditions">List of conditions to check</param>
            <param name="isPreExecution">If true pre-execution implementation will be requested to execute <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/>, if false  implementation will be requested to execute <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/></param>
            <returns>ExecutionRequestParameters object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.Activity">
            <summary>
            Activity to execute
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.IsAlways">
            <summary>
            Returns true if condition type of the transition is equal "Always" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Always"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.IsOtherwise">
            <summary>
            Returns true if condition type of the transition is equal "Otherwise" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Otherwise"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.IsConditionOrExpression">
            <summary>
            Returns true if condition type of the transition is equal "Action" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/> or expression <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Expression"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters.HasExpression">
            <summary>
            Returns true if any condition is Expression condition
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Execution.SchemeUpdater">
            <summary>
            Updates process scheme to a new one
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Execution.SchemeUpdater.UpdateSchemeAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Returns ProcessInstance with updated process scheme. Can return null if the process Instance was dropped during scheme update.
            </summary>
            <param name="processInstance">The process instance which scheme we want to update</param>
            <param name="parameters">Parameters for creating scheme of process</param>
            <param name="ignoreAutoSchemeUpdate">If true the attribute of Activity - IsAutoScheme update will be ignored.</param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.ExecutionResponse">
            <summary>
            Represent execution result which contains information about execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponse.ProcessId">
            <summary>
            Returns id of the process instance
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponse.ProcessInstance">
            <summary>
            Returns Process instance which requested execution 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponse.ExecutedTransitionName">
            <summary>
            Transition name which was executed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponse.ExecutedActivityName">
            <summary>
            Activity name which was executed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponse.IsError">
            <summary>
            If True means execution error
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponse.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Execution.ExecutionRequestParameters)">
            <summary>
            Create ExecutionResponseComplete object
            </summary>
            <param name="processInstance">Process instance which requested execution </param>
            <param name="parameters">  </param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponse.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Create ExecutionResponseComplete object
            </summary>
            <param name="processInstance">Process instance which requested execution </param>
            <param name="executedActivityName">Activity name which was executed</param>
            <returns>ExecutionResponseParametersComplete object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponse.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.String)">
            <summary>
            Create ExecutionResponseComplete object
            </summary>
            <param name="processInstance">Process instance which requested execution </param>
            <param name="executedActivityName">Activity name which was executed</param>
            <param name="executedTransitionName">Transition name which was executed</param>
            <returns>ExecutionResponseParametersComplete object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponse.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.Exception)">
            <summary>
            Create ExecutionResponseError object
            </summary>
            <param name="processInstance">Process instance which requested execution </param>
            <param name="executedActivityName">Activity name which was executed</param>
            <param name="exception">Exception which occured in time of execution</param>
            <returns>ExecutionResponseParametersError object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Bus.ExecutionResponse.Create(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.String,System.Exception)">
            <summary>
            Create ExecutionResponseError object
            </summary>
            <param name="processInstance">Process instance which requested execution </param>
            <param name="executedActivityName">Activity name which was executed</param>
            <param name="executedTransitionName">Transition name which was executed</param>
            <param name="exception">Exception which occured in time of execution</param>
            <returns>ExecutionResponseParametersError object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponse.IsEmplty">
            <summary>
            Return True if ExecutionResponseParameters is empty
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponse.Empty">
            <summary>
            Returns instane of empty ExecutionResponseParameters
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.ExecutionResponseComplete">
            <summary>
            Represent execution result completed without errors
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Bus.ExecutionResponseError">
            <summary>
            Represent execution result completed with errors
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseError.IsError">
            <summary>
            If True means execution error
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Bus.ExecutionResponseError.Exception">
            <summary>
            Exception which occured in time of execution
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1">
            <summary>
            Interface of a workflow generator, which generates not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> 
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme</typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1.GenerateAsync(System.String,System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Generate not parsed process scheme
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="schemeId">Id of the scheme</param>
            <param name="parameters">Parameters for creating scheme</param>
            <returns>Not parsed process scheme</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Generator.TTXmlWorkflowGenerator">
            <summary>
            Generate process scheme from TT template
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Generator.TTXmlWorkflowGenerator.GenerateAsync(System.String,System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Generate not parsed process scheme
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="schemeId">Id of the scheme</param>
            <param name="parameters">Parameters for creating scheme</param>
            <returns>Not parsed process scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Generator.TTXmlWorkflowGenerator.AddMapping(System.String,System.Object)">
            <summary>
            Adds relationship between code of the scheme and TT template type
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="generatorSource">TT template type</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.License.WorkflowEngineNetRestrictions">
            <summary>
            Represent restriction settings for WorkflowEngine .Net
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.License.LicenseKey`1">
            <summary>
            Represent a license key
            </summary>
            <typeparam name="T">Type of restriction object</typeparam>
        </member>
        <member name="T:OptimaJet.Workflow.Core.License.Licensing">
            <summary>
            License help methods
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Logging.IProcessLogProvider.ReadAllAsync(System.Guid)">
            <summary> Get all records for specific process. </summary>
            <param name="processId">Id of <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Logging.IProcessLogProvider.ReadLastAsync(System.Guid,System.DateTime)">
            <summary> Get last records starting the specified time </summary>
            <param name="processId">Id of <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Logging.IProcessLogProvider.ReadLastAsync(System.Guid,System.Int32)">
            <summary> Get last records in certain amount </summary>
            <param name="processId">Id of <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="count">Count of records</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Logging.IProcessLogProvider.ReadEarlyAsync(System.Guid,System.DateTime,System.Int32)">
            <summary> Get earle records starting the specified time in certain amount </summary>
            <param name="processId">Id of <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="time"></param>
            <param name="count">Count of records</param>
            <returns></returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Logging.MemoryProcessLogger.LogSize">
            <summary> Maximum number of log records in one process. </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Logging.MemoryProcessLogger.Capacity">
            <summary> Maximum number of logged processes. </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Logging.MemoryProcessLogger.#ctor(System.Int32,System.Int32)">
            <summary>
            Keep a fixed number of new logs by deleting old ones for fixed number of process in memory.  
            </summary>
            <param name="logSize">Maximum number of log records in one process.</param>
            <param name="capacity">Maximum number of logged processes.</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference">
            <summary>
            Represent a reference on action in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionName">
            <summary>
            Name of the action
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.Order">
            <summary>
            Execution order of the action
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionParameter">
            <summary>
            Additional parameter which is passed to the appropriate methods <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.Create(System.String,System.String,System.String)">
            <summary>
            Create ActionDefinitionReference object
            </summary>
            <param name="actionName">Name of the action</param>
            <param name="order">Execution order of the action</param>
            <param name="parameter">Additional parameter which is passed to the appropriate methods <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/></param>
            <returns>ActionDefinitionReference object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandler">
            <summary>
            Exceptions handler for activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandler.Type">
            <summary>
            Type of the execution timeout <see cref="T:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandlerType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandler.NameForSet">
            <summary>
             Name of the activity if timeout type is action <see cref="F:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandlerType.SetActivity"/> 
             or name of the state if timeout type is action <see cref="F:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandlerType.SetState"/>  
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandler.RetryCount">
            <summary>
            Count of resumption execution  <see cref="F:OptimaJet.Workflow.Core.Model.ActivityTimeoutType.Retry"/> 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandler.Exceptions">
            <summary>
            KeyWords for catching exceptions
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandlerType.SetActivity">
            <summary>
            When a exception is caught  will be set activity
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandlerType.SetState">
            <summary>
            When a exception is caught will be set state
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandlerType.Retry">
            <summary>
            When a exception is caught will be start resumption execution 
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandlerType.Ignore">
            <summary>
            Ignore all exceptions
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ActivityTimeout">
            <summary>
            Timeout for set Due date
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityTimeout.Type">
            <summary>
            Type of the execution timeout <see cref="T:OptimaJet.Workflow.Core.Model.ActivityTimeoutType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityTimeout.Timer">
            <summary>
            Timer for timeout
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityTimeout.NameForSet">
            <summary>
             Name of the activity if timeout type is action <see cref="F:OptimaJet.Workflow.Core.Model.ActivityTimeoutType.SetActivity"/> 
             or name of the state if timeout type is action <see cref="F:OptimaJet.Workflow.Core.Model.ActivityTimeoutType.SetState"/>  
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityTimeout.RetryCount">
            <summary>
            Count of resumption execution  <see cref="F:OptimaJet.Workflow.Core.Model.ActivityTimeoutType.Retry"/> 
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ActivityTimeoutType.SetActivity">
            <summary>
            When time is out will be set activity
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ActivityTimeoutType.SetState">
            <summary>
            When time is out will be set state
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ActivityTimeoutType.Retry">
            <summary>
            When time is out will be start resumption execution 
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ActivityType">
            <summary>
            Activity type
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ActivityType.Ordinary">
            <summary>
            Ordinary activity, belongs a scheme itself
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ActivityType.Inline">
            <summary>
            Activity with this type marks a place to inline another scheme
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ApprovalMap.ActivityDto">
            <summary> Simplified representation of <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/>. Use like data transfer object </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ApprovalMap.Command.#ctor(System.String,System.String,System.DateTime,System.Guid)">
            <summary> Use for execute some command for one or some process </summary>
            <param name="name"> Command name for execute </param>
            <param name="identityId"> User id </param>
            <param name="dateTime"> Time of adding command. Use for sorting </param>
            <param name="processId"> Id of <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/> </param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ApprovalMap.TransitionDto">
            <summary> Simplified representation of <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/>. Use like data transfer object </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.Assignment">
            <summary>
            Assignment (task)
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.AssignmentId">
            <summary>
            Unique id 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.AssignmentCode">
            <summary>
            Required assignment code
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.ProcessId">
            <summary>
            Required process id
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.Name">
            <summary>
            Required assignment name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.Description">
            <summary>
            Assignment description
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.DateCreation">
            <summary>
            Date of creation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.DateStart">
            <summary>
            Date of start
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.DateFinish">
            <summary>
            Date of finish
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.DeadlineToStart">
            <summary>
            Deadline to start
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.DeadlineToComplete">
            <summary>
            Deadline to complete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.Executor">
            <summary>
            Executor identity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.Observers">
            <summary>
            List of user identities
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.Tags">
            <summary>
            List of tag
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.StatusState">
            <summary>
            Assignment status. Equals one of the values <see cref="M:OptimaJet.Workflow.Plugins.AssignmentPlugin.GetStatuses"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.IsActive">
            <summary>
            Property for managing the assignment from the designer
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Assignment.IsDeleted">
            <summary>
            If true, then the task is marked as deleted
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm">
            <summary>
            Provides a form to create a assignment
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.Id">
            <summary>
            If id is null a new value will be generated
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.AssignmentCode">
            <summary>
            Required assignment code
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.Name">
            <summary>
            Required assignment name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.Description">
            <summary>
            Assignment description
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.IsActive">
            <summary>
            Property for managing the assignment from the designer
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.DeadlineToComplete">
            <summary>
            Deadline to complete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.DeadlineToStart">
            <summary>
            Deadline to start
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.Executor">
            <summary>
            Executor identity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.Observers">
            <summary>
            List of identities
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentCreationForm.Tags">
            <summary>
            List of tags
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.AssignmentFilter">
            <summary>
            Represent assignment filter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.AssignmentFilter.Parameters">
            <summary>
            Filtering parameter list
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentFilter.ProcessIdEqual(System.Guid,System.Boolean)">
            <summary>
            Adds equality check for processId
            </summary>
            <param name="processId"></param>
            <param name="inverseExpression"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentFilter.CodeEquals(System.String,System.Boolean)">
            <summary>
            Adds equality check for assignmentCode
            </summary>
            <param name="code"></param>
            <param name="inverseExpression"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentFilter.ExecutorEquals(System.String,System.Boolean)">
            <summary>
            Adds equality check for executor
            </summary>
            <param name="identity"></param>
            <param name="inverseExpression"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentFilter.StatusStateEquals(System.String,System.Boolean)">
            <summary>
            Adds equality check for status
            </summary>
            <param name="status"></param>
            <param name="inverseExpression"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentFilter.StatusStateContains(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Adds a check for finding a value in the list of statuses
            </summary>
            <param name="statuses"></param>
            <param name="inverseExpression"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentFilter.IsObserver(System.String,System.Boolean)">
            <summary>
            Adds observer verification
            </summary>
            <param name="identity"></param>
            <param name="inverseExpression"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentFilter.IsDeleted(System.Boolean)">
            <summary>
            Adds check for deletion
            </summary>
            <param name="isDeleted"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentFilter.IsActive(System.Boolean)">
            <summary>
            Adds check for activity
            </summary>
            <param name="isactive"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentFilter.AddCustom(OptimaJet.Workflow.Core.Model.FilterParameter)">
            <summary>
            Adds custom check
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.FilterParameter">
            <summary>
            {InverseExpression} ( {Name}  {ExpressionType} {Value} )
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.FilterParameter.Name">
            <summary>
            Name of property <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/> 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.FilterParameter.Value">
            <summary>
            Value for checking
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.FilterParameter.InverseExpression">
            <summary>
            inversion of the result
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.FilterParameter.ExpressionType">
            <summary>
            check type
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.FilterExpressionType">
            <summary>
            Expression types
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.AssignmentManager">
            <summary>
            class for working with tasks within one process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.GetForExecutorAsync(System.String)">
            <summary>
            Get a list of assignments for a specific executor in the current process
            </summary>
            <param name="identityId">executor identity</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.GetListAsync">
            <summary>
            Get a list of assignments in the current process
            </summary>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.GetByIdAsync(System.Guid)">
            <summary>
            Get assignment by assignmentId
            </summary>
            <param name="assignmentId">Assignment id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.DeleteHardAsync(System.Guid)">
            <summary>
            Deleting without saving in the database by assignmentId
            </summary>
            <param name="assignmentId">Assignment id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.DeleteSoftAsync(System.Guid)">
            <summary>
            Marking a assignment as deleted by assignmentId
            </summary>
            <param name="assignmentId">Assignment id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.CreateAsync(OptimaJet.Workflow.Core.Model.AssignmentCreationForm)">
            <summary>
            Creating a new assignment from <see cref="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm"/> in the current process
            </summary>
            <param name="newAssignment"><see cref="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.ChangeStatusAsync(System.Guid,System.String)">
            <summary>
            Changing the status of a specific assignment
            </summary>
            <param name="assignmentId">Assignment id</param>
            <param name="status">Assignment status</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.ChangeExecutorAsync(System.Guid,System.String)">
            <summary>
            Changing the executor identity of a specific assignment
            </summary>
            <param name="assignmentId">Assignment id</param>
            <param name="identityId">executor identity</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.ChangeAsync(OptimaJet.Workflow.Core.Model.Assignment)">
            <summary>
            Updating assignment
            </summary>
            <param name="assignment"><see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/> for updating</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.GetForExecutor(System.String)">
            <summary>
            Get a list of assignments for a specific executor in the current process
            </summary>
            <param name="identityId">executor identity</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.GetList">
            <summary>
            Get a list of assignments in the current process
            </summary>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.GetById(System.Guid)">
            <summary>
            Get assignment by assignmentId
            </summary>
            <param name="assignmentId">Assignment id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.DeleteHard(System.Guid)">
            <summary>
            Deleting without saving in the database by assignmentId
            </summary>
            <param name="assignmentId">Assignment id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.DeleteSoft(System.Guid)">
            <summary>
            Marking a assignment as deleted by assignmentId
            </summary>
            <param name="assignmentId">Assignment id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.Create(OptimaJet.Workflow.Core.Model.AssignmentCreationForm)">
            <summary>
            Creating a new assignment from <see cref="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm"/> in the current process
            </summary>
            <param name="newAssignment"><see cref="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.ChangeStatus(System.Guid,System.String)">
            <summary>
            Changing the status of a specific assignment
            </summary>
            <param name="assignmentId">Assignment id</param>
            <param name="status">Assignment status</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.ChangeExecutor(System.Guid,System.String)">
            <summary>
            Changing the executor identity of a specific assignment
            </summary>
            <param name="assignmentId">Assignment id</param>
            <param name="identityId">executor identity</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.AssignmentManager.Change(OptimaJet.Workflow.Core.Model.Assignment)">
            <summary>
            Updating assignment
            </summary>
            <param name="assignment"><see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/> for updating</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParameterType">
            <summary>
            Type of a code action parameter
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.Text">
            <summary>
            Text parameter
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.Number">
            <summary>
            Numeric parameter
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.Checkbox">
            <summary>
            Boolean parameter represented by checkbox
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.Dropdown">
            <summary>
            List of name/value pair represented by dropdown control
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.MultiSelect">
            <summary>
            List of name/value pair represented by dropdown control can allow multiple selections 
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.DateTime">
            <summary>
            Date with time parameter
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.Date">
            <summary>
            Date parameter
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.Time">
            <summary>
            Time parameter
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.Json">
            <summary>
            JSON object parameter
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterType.TextArea">
            <summary>
            Text parameter represented by textarea
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition">
            <summary>
            Represents a parameter for code action
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition.Type">
            <summary>
            Type of the parameter <see cref="T:OptimaJet.Workflow.Core.Model.ParameterType"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition.Clone">
            <summary>
            Creates a copy of the parameter definition
            </summary>
            <returns>A copy of parameter definition</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition.IsRequired">
            <summary>
            If false specifies that the parameter is optional
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition.DropdownValues">
            <summary>
            A list of <see cref="T:OptimaJet.Workflow.Core.Model.DropdownValue"/> for a <see cref="F:OptimaJet.Workflow.Core.Model.ParameterType.Dropdown"/> parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition.DefaultValue">
            <summary>
            A default value of the parameter
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.DropdownValue">
            <summary>
            A name-value pair for a <see cref="F:OptimaJet.Workflow.Core.Model.ParameterType.Dropdown"/> parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.DropdownValue.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.DropdownValue.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DropdownValue.Clone">
            <summary>
            Creates a shallow copy of this pair
            </summary>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ActivityDefinition">
            <summary>
            Represent an activity in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.OriginalName">
            <summary>
            If object was inlined, you can get its original name from this property
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.OriginalSchemeCode">
            <summary>
            The code of the scheme to which the inlined object originally belonged.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.LastTimeInlineName">
            <summary>
            The name of the inline activity instead of which the object was inlined last time.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.FirstTimeInlineName">
            <summary>
            The name of the inline activity instead of which the object was inlined first time.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.WasInlined">
            <summary>
            Return true if the object was inlined.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.ActivityType">
            <summary>
            Type of the activity. Ordinary or Inline.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.SchemeCode">
            <summary>
            Inlined scheme name for inline activity.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State">
            <summary>
            Name of the state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsInitial">
            <summary>
            If true specifies that the activity is initial. There can be only one initial activity in scheme. Initial activity is the entry point of the process.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsFinal">
            <summary>
            If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsForSetState">
            <summary>
            If true specifies that the activity is entry point for a state and possible to set the state with the <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State"/> name via <see cref="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)"/> method
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsAutoSchemeUpdate">
            <summary>
            If true specifies that  if process scheme obsolete than Workflow Runtime will try upgrade it automatically if this activity is current
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.DisablePersistState">
            <summary>If true specifies that the activity is not save state in database (WorkflowProcessInstance)</summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.DisablePersistTransitionHistory">
            <summary>If true specifies that the activity is not save state in database (WorkflowProcessTransitionHistory)</summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.DisablePersistParameters">
            <summary>If true specifies that the activity is not save state in database (WorkflowProcessInstancePersistence)</summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.UserComment">
            <summary> Сustom comment </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.HaveImplementation">
            <summary>
            Specifies that activity have an implementation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.HavePreExecutionImplementation">
            <summary>
            Specifies that activity have a pre-execution implementation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation">
            <summary>
            List of <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> which are executed at standard workflow execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation">
            <summary>
            List of <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> which are executed at pre-execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Annotations">
            <summary>
            A List of <see cref="T:OptimaJet.Workflow.Core.Model.Annotation"/> attached to this activity.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.ExecutionTimeout">
            <summary>
            Timeout for execution <see cref="T:OptimaJet.Workflow.Core.Model.ActivityTimeout"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IdleTimeout">
            <summary>
            Timeout for idle <see cref="T:OptimaJet.Workflow.Core.Model.ActivityTimeout"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.ExceptionsHandlers">
            <summary>
            Exceptions handler  <see cref="T:OptimaJet.Workflow.Core.Model.ActivityExceptionsHandler"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.IsState">
            <summary>
            Specifies that state is assigned
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Create ActivityDefinition object
            </summary>
            <param name="name">Name of the activity</param>
            <param name="stateName">Name of the state</param>
            <param name="isInitial">If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.</param>
            <param name="isFinal">If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.</param>
            <param name="isForSetState">If true specifies that the activity is entry point for a state and possible to set the state with the <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State"/> name via <see cref="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)"/> method</param>
            <param name="isAutoSchemeUpdate">If true specifies that if process scheme obsolete than Workflow Runtime will try upgrade it automatically if this activity is current</param>
            <param name="disablePersist">disabling all persist (for old compatibility)</param>
            <param name="disablePersistState">If true specifies that the activity is not save state in database (WorkflowProcessInstance)</param>
            <param name="disablePersistTransitionHistory">If true specifies that the activity is not save state in database (WorkflowProcessTransitionHistory)</param>
            <param name="disablePersistParameters">If true specifies that the activity is not save state in database (WorkflowProcessInstancePersistence)</param>
            <returns>ActivityDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.Create(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Create ActivityDefinition object
            </summary>
            <param name="name">Name of the activity</param>
            <param name="stateName">Name of the state</param>
            <param name="isInitial">If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.</param>
            <param name="isFinal">If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.</param>
            <param name="isForSetState">If true specifies that the activity is entry point for a state and possible to set the state with the <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State"/> name via <see cref="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)"/> method</param>
            <param name="isAutoSchemeUpdate">If true specifies that if process scheme obsolete than Workflow Runtime will try upgrade it automatically if this activity is current</param>
            <param name="disablePersistState">If true specifies that the activity is not save state in database. </param>
            <param name="disablePersistTransitionHistory">If true specifies that the activity is not save state in database. </param>
            <param name="disablePersistParameters">If true specifies that the activity is not save state in database. </param>
            <returns>ActivityDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.CreateInlineActivity(System.String,System.String)">
            <summary>
            Creates inline activity
            </summary>
            <param name="name"></param>
            <param name="schemeCode"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.AddAction(OptimaJet.Workflow.Core.Model.ActionDefinitionReference)">
            <summary>
            Add <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> to implementation list
            </summary>
            <param name="action">Action reference</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.AddPreExecutionAction(OptimaJet.Workflow.Core.Model.ActionDefinitionReference)">
            <summary>
            Add <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> to pre-execution implementation list
            </summary>
            <param name="action">Action reference</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.NestingLevel">
            <summary>
            Nesting level of subprocess, 0 - root process, 1-... -subprocesses, null - not assigned
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.GetAnnotation``1(System.String)">
            <summary>
            Get an annotation attached to this activity
            </summary>
            <typeparam name="T">Annotation's type</typeparam>
            <param name="name">Annotation's name</param>
            <returns>Annotation value</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActivityDefinition.GetAnnotation(System.String)">
            <summary>
            Get a JSON representation of annotation's value
            </summary>
            <param name="name">Annotation's name</param>
            <returns>JSON representation of annotation's value</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ActorDefinition">
            <summary>
            Represent an actor in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActorDefinition.OriginalName">
            <summary>
            If object was inlined, you can get its original name from this property
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActorDefinition.OriginalSchemeCode">
            <summary>
            The code of the scheme to which the inlined object originally belonged.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActorDefinition.WasInlined">
            <summary>
            Return true if the object was inlined.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Rule">
            <summary>
            Rule name which is associated with the actor
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Value">
            <summary>
            Additional parameter which is passed to the appropriate methods <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ActorDefinition.Create(System.String,System.String,System.String)">
            <summary>
            Create ActorDefinition object
            </summary>
            <param name="name">Name of the actor</param>
            <param name="rule">Rule name which is associated with the actor</param>
            <param name="value">Additional parameter which is passed to the appropriate methods <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider"/></param>
            <returns>ActorDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.Annotation">
            <summary>
            Represent an annotation than can be attached to <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/> or <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Annotation.Name">
            <summary>
            Annotation name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.Annotation.JsonValue">
            <summary>
            Annotation value as a JSON string
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.Annotation.Clone">
            <summary>
            Creates a copy of Annotation
            </summary>
            <returns>A copy of annotation</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.BaseDefinition">
            <summary>
            Represent a base object in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.BaseDefinition.Name">
            <summary>
            Name of the object in scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.BaseDefinition.DesignerSettings">
            <summary>
            Designer settings which used by Workflow Designer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.CodeActionType">
            <summary>
            Type of a code action which determine a area of use of a code action
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.CodeActionType.Action">
            <summary>
            Code action uses like an action <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteAction(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.CodeActionType.Condition">
            <summary>
            Code action uses like a condition <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteCondition(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.CodeActionType.RuleGet">
            <summary>
            Code action uses like users get method <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.GetIdentities(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,System.String)"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.CodeActionType.RuleCheck">
            <summary>
            Code action uses like check rule method <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.Check(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition">
            <summary>
            Represent a code action in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.OriginalName">
            <summary>
            If object was inlined, you can get its original name from this property
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.OriginalSchemeCode">
            <summary>
            The code of the scheme to which the inlined object originally belonged.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.WasInlined">
            <summary>
            Return true if the object was inlined.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.ActionCode">
            <summary>
            Source code of the code action
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.Type">
            <summary>
            Type of the code action <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.IsGlobal">
            <summary>
            If true specifies that the code action stored in global parameters but not in scheme. In this case code action is shared between schemes
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.IsAsync">
            <summary>
            If true the code action should be called asynchronously
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.Usings">
            <summary>
            List of usings separated by ;
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.ExcludedUsings">
            <summary>
            List of usings separated by ;
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CodeActionDefinition.ParameterDefinitions">
            <summary>
            List of <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition"/> for this code action
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.CodeActionDefinition.Create(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition})">
            <summary>
            Create CodeActionDefinition object
            </summary>
            <param name="name">Name of the code action</param>
            <param name="usings">List of usings separated by ;</param>
            <param name="excludedUsings">List of exluded usings separated by ;</param>
            <param name="actionCode">Source code of the code action</param>
            <param name="isglobal">If true specifies that the code action stored in global parameters but not in scheme. In this case code action is shared between schemes</param>
            <param name="type">Type of the code action <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionType"/></param>
            <param name="isAsync">if true the code action should be called asynchronously</param>
            <param name="parameterDefinitions">List of <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition"/> for this code action</param>
            <returns>CodeActionDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.CommandDefinition">
            <summary>
            Represent a command in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.CommandDefinition.InputParameters">
            <summary>
            List of references on parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.CommandDefinition.Create(System.String)">
            <summary>
            Create CommandDefinition object
            </summary>
            <param name="name">Name of the command</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.CommandDefinition.AddParameterRef(System.String,System.Boolean,System.String,OptimaJet.Workflow.Core.Model.ParameterDefinition)">
            <summary>
            Add the reference on the parameter to InputParameters collection
            </summary>
            <param name="name">Name of the reference</param>
            <param name="isRequired">Indicates that the parameter is required</param>
            <param name="defaultValue">JSON serialized default value or string</param>
            <param name="parameter">Parameter definition</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.CommandDefinition.AddParameterRef(System.String,OptimaJet.Workflow.Core.Model.ParameterDefinition)">
            <summary>
            Add the reference on the parameter to InputParameters collection
            </summary>
            <param name="name">Name of the reference</param>
            <param name="parameter">Parameter definition</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference">
            <summary>
             Represents a named reference on a parameter in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference.Name">
            <summary>
            Name of the reference
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference.IsRequired">
            <summary>
            Indicates that the parameter is required
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference.DefaultValue">
            <summary>
            JSON serialized default value or string
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference.Parameter">
            <summary>
            Parameter definition
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TriggerDefinition">
            <summary>
            Represent a transition's trigger in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.Type">
            <summary>
            Type of the trigger <see cref="T:OptimaJet.Workflow.Core.Model.TriggerType"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TriggerDefinition.#ctor(OptimaJet.Workflow.Core.Model.TriggerType)">
            <summary>
            Create TriggerDefinition object
            </summary>
            <param name="type">Type of the trigger <see cref="T:OptimaJet.Workflow.Core.Model.TriggerType"/></param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.NameRef">
            <summary>
            Returns the name of the object in scheme which start the trigger
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.Command">
            <summary>
            Command which start the trigger if the type of the trigger is command <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Command"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.Timer">
            <summary>
            Timer which start the trigger if the type of the trigger is timer <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Timer"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TriggerDefinition.Auto">
            <summary>
            Create the instance of TriggerDefinition object with auto trigger type <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Auto"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TriggerDefinition.Create(System.String)">
            <summary>
            Create TriggerDefinition object
            </summary>
            <param name="type">Type of the trigger <see cref="T:OptimaJet.Workflow.Core.Model.TriggerType"/></param>
            <returns>TriggerDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TriggerDefinition.CreateTimerTrigger(OptimaJet.Workflow.Core.Model.TimerDefinition)">
            <summary>
            Creates timer trigger
            </summary>
            <param name="timer">Timer definition</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TriggerDefinition.Clone(System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition})">
            <summary>
            Clones TriggerDefinition object replacing references to the references to the specific objects
            </summary>
            <param name="commandDefinitions">List of the commands to replace</param>
            <param name="timerDefinitions">List of the timers to replace</param>
            <returns>Cloned TriggerDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TriggerType">
            <summary>
            Type of impact that lead to the triggering of a transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TriggerType.Command">
            <summary>
            Transition starts by a command
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TriggerType.Auto">
            <summary>
            Transition starts automatically, without any impact
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TriggerType.Timer">
            <summary>
            Transition starts by a timer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ConditionDefinition">
            <summary>
            Represent a transition's condition in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Type">
            <summary>
            Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Action">
            <summary>
            Reference on the action if condition type is action <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/> 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Expression">
            <summary>
            Expression code (lambda) if condition type is expression <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Expression"/> 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.ResultOnPreExecution">
            <summary>
            In pre-execution mode if not null the result of the condition will be overriden by the value
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.ConditionInversion">
            <summary>
            If true invert condition result if condition type is action <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/> 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Always">
            <summary>
            Create the instance of ConditionDefinition object with always type <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Always"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Otherwise">
            <summary>
            Create the instance of ConditionDefinition object with otherwise type <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Otherwise"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ConditionDefinition.Create(System.String,System.String)">
            <summary>
            Create ConditionDefinition object
            </summary>
            <param name="type">Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/></param>
            <param name="resultOnPreExecution">In pre-execution mode if not null the result of the condition will be overriden by the value</param>
            <returns>ConditionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ConditionDefinition.Create(System.String,OptimaJet.Workflow.Core.Model.ActionDefinitionReference,System.String,System.String)">
            <summary>
            Create ConditionDefinition object
            </summary>
            <param name="type">Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/></param>
            <param name="action">Referensce on the action if condition type is action <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/> </param>
            <param name="conditionInversion">If true invert condition result if condition type is action <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/> </param>
            <param name="resultOnPreExecution">In pre-execution mode if not null the result of the condition will be overriden by the value</param>
            <returns>ConditionDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ConditionType">
            <summary>
            Type of condition for triggering of transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConditionType.Action">
            <summary>
            Transition triggering if executed action returns true <see cref="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteCondition(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConditionType.Always">
            <summary>
            Transition starts always in priority order
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConditionType.Otherwise">
            <summary>
            Transition starts always in lowest order
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConditionType.Expression">
            <summary>
            Lambda expression condition
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.DesignerSettings">
            <summary>
            Represent settings used by Workflow Designer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.DynamicParameterConverter">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameterConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameterConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameterConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.IDynamicParameterCompatible">
            <summary>
            The interface that a class should implement for quick conversion to DynamicParameter
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IDynamicParameterCompatible.GetPropertiesAsDictionary">
            <summary>
            Returns all properties as dictionary
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IDynamicParameterCompatible.SetPropertiesFromDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns all properties as dictionary
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.DynamicParameter">
            <summary>
            Dynamic parameter, properties can be accessed two ways
            de["propertyName"] or (de as dynamic).propertyName
            Property names are case sensitive
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.DynamicParameter.Dictionary">
            <summary>
            Returns dictionary with all properties
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.#ctor">
            <summary>
            Creates empty dynamic parameter object
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates initialized dynamic parameter object
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.GetProperty(System.String)">
            <summary>
            Returns property value
            </summary>
            <param name="propertyName">Property name</param>
            <returns>Property value</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.SetProperty(System.String,System.Object)">
            <summary>
            Sets property value
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Property value</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.DynamicParameter.Item(System.String)">
            <summary>
            Indexer for getting property value
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.HasProperty(System.String,System.Boolean)">
            <summary>
            Checks either property exists in the dynamic parameter object or not.
            </summary>
            <param name="propertyName">Property name</param>
            <returns>true if  property exists in the dynamic parameter object.</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.SerializeToJson">
            <summary>
            Serializes the dynamic parameter object to JSON
            </summary>
            <returns>JSON string</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.ParseJson(System.String)">
            <summary>
            Deserializes JSON the result can be casted as dynamic. The result can be simple value (string, int, double etc) or instance of DynamicParameter class
            </summary>
            <param name="json">JSON string</param>
            <returns>Dynamic parameter object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.ParseJson(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Deserializes JSON the result can be casted as dynamic. The result can be simple value (string, int, double etc) or instance of DynamicParameter class
            </summary>
            <param name="jToken">Newtonsoft.JSON JToken object</param>
            <returns>Dynamic parameter object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.New">
            <summary>
            Creates new DynamicParameter instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.ParseJsonAsDynamicParameterObject(System.String)">
            <summary>
            Deserializes the dynamic parameter object from JSON
            </summary>
            <param name="json">JSON string</param>
            <returns>Dynamic parameter object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.DynamicParameter.ConvertFrom(System.Object)">
            <summary>
            Converts from any object to dynamic object
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.IAssignmentManager">
            <summary>
            interface for working with assignments (tasks) within one process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IAssignmentManager.GetForExecutorAsync(System.String)">
            <summary>
            Get a list of assignments for a specific executor in the current process
            </summary>
            <param name="identityId">executor identity</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IAssignmentManager.GetListAsync">
            <summary>
            Get a list of assignments in the current process
            </summary>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IAssignmentManager.GetByIdAsync(System.Guid)">
            <summary>
            Get assignment by assignmentId
            </summary>
            <param name="assignmentId"></param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IAssignmentManager.DeleteHardAsync(System.Guid)">
            <summary>
            Deleting without saving in the database by assignmentId
            </summary>
            <param name="assignmentId"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IAssignmentManager.CreateAsync(OptimaJet.Workflow.Core.Model.AssignmentCreationForm)">
            <summary>
            Creating a new assignment from <see cref="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm"/> in the current process
            </summary>
            <param name="newAssignment"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IAssignmentManager.ChangeStatusAsync(System.Guid,System.String)">
            <summary>
            Changing the status of a specific assignment
            </summary>
            <param name="assignmentId"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IAssignmentManager.DeleteSoftAsync(System.Guid)">
            <summary>
            Marking a assignment as deleted by assignmentId
            </summary>
            <param name="assignmentId"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IAssignmentManager.ChangeExecutorAsync(System.Guid,System.String)">
            <summary>
            Changing the executor identity of a specific assignment
            </summary>
            <param name="assignmentId"></param>
            <param name="identityId"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.IAssignmentManager.ChangeAsync(OptimaJet.Workflow.Core.Model.Assignment)">
            <summary>
            Updating assignment
            </summary>
            <param name="assignment"></param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.IInlineActivity">
            <summary>
            Defines the properties available for inline activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IInlineActivity.Name">
            <summary>
            Name of the inline
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IInlineActivity.ActivityType">
            <summary>
            Type of the activity. Ordinary or Inline.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IInlineActivity.SchemeCode">
            <summary>
            Inlined scheme name for inline activity.
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.IOrdinaryActivity">
            <summary>
            Defines the properties available for ordinary activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.OriginalName">
            <summary>
            If object was inlined, you can get its original name from this property
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.OriginalSchemeCode">
            <summary>
            The code of the scheme to which the inlined object originally belonged.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.LastTimeInlineName">
            <summary>
            The name of the inline activity instead of which the object was inlined.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.WasInlined">
            <summary>
            Return true if the object was inlined.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.Name">
            <summary>
            Name of the activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.State">
            <summary>
            Name of the state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.IsInitial">
            <summary>
            If true specifies that the activity is initial. There can be only one initial activity in scheme. Initial activity is the entry point of the process.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.IsFinal">
            <summary>
            If true specifies that the activity is final. The process is marked as finalized after execution of the activity marked as final.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.IsForSetState">
            <summary>
            If true specifies that the activity is entry point for a state and possible to set the state with the <see cref="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.State"/> name via <see cref="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)"/> method
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.IsAutoSchemeUpdate">
            <summary>
            If true specifies that  if process scheme obsolete than Workflow Runtime will try upgrade it automatically if this activity is current
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.DisablePersistState">
            <summary>If true specifies that the activity is not save state in database (WorkflowProcessInstance)</summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.DisablePersistTransitionHistory">
            <summary>If true specifies that the activity is not save state in database (WorkflowProcessTransitionHistory)</summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.DisablePersistParameters">
            <summary>If true specifies that the activity is not save state in database (WorkflowProcessInstancePersistence)</summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.Implementation">
            <summary>
            List of <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> which are executed at standard workflow execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.PreExecutionImplementation">
            <summary>
            List of <see cref="T:OptimaJet.Workflow.Core.Model.ActionDefinitionReference"/> which are executed at pre-execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.Annotations">
            <summary>
            A List of <see cref="T:OptimaJet.Workflow.Core.Model.Annotation"/> attached to this activity.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.IsState">
            <summary>
            Specifies that state is assigned
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.HaveImplementation">
            <summary>
            Specifies that activity have an implementation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.IOrdinaryActivity.HavePreExecutionImplementation">
            <summary>
            Specifies that activity have a pre-execution implementation
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.LocalizeType">
            <summary>
            Type of localized resource
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.LocalizeType.Command">
            <summary>
            Command <see cref="!:CommandDefinition.Name"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.LocalizeType.State">
            <summary>
            Command <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.State"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.LocalizeType.Parameter">
            <summary>
            Command <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionReference.Name"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition">
            <summary>
            Represent a localization record in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Type">
            <summary>
            Type of localized resource <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.IsDefault">
            <summary>
            If true specifies that the record will be used by default in case of absence of a record with specific culture
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.ObjectName">
            <summary>
            System name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Culture">
            <summary>
            Culture name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Value">
            <summary>
            Localized name
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create LocalizeDefinition object
            </summary>
            <param name="objectName">System name</param>
            <param name="type">Type of localized resource <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeType"/></param>
            <param name="culture">Culture name</param>
            <param name="value">Localized name</param>
            <param name="isDefault">If true specifies that the record will be used by default in case of absence of a record with specific culture</param>
            <returns>LocalizeDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.LocalizeDefinition.Create(System.String,OptimaJet.Workflow.Core.Model.LocalizeType,System.String,System.String,System.Boolean)">
            <summary>
            Create LocalizeDefinition object
            </summary>
            <param name="objectName">System name</param>
            <param name="type">Type of localized resource <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeType"/></param>
            <param name="culture">Culture name</param>
            <param name="value">Localized name</param>
            <param name="isDefault">If true specifies that the record will be used by default in case of absence of a record with specific culture</param>
            <returns>LocalizeDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParameterDefinition">
            <summary>
            Represent a parameter in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose">
            <summary>
            Specifies the method of storing parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.MergeIntoParentProcessIsProhibited">
            <summary>
            Sign that this property can't be merged into parent process see <see cref="!:SubprocessManager.MergeWhenParentProcessWillBeIdled"/> for more details
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.InitialValue">
            <summary>
            Serialized default value of the parameter
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParameterDefinition.Create(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create ParameterDefinition object
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="purpose">Specifies the method of storing parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/></param>
            <param name="initialValue">Serialized default value of the parameter</param>
            <param name="ignoreTypeExistenceCheck">If true the parameter type missing will be ignored</param>
            <returns>ParameterDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParameterDefinition.Create(System.String,System.Type,OptimaJet.Workflow.Core.Model.ParameterPurpose,System.String)">
            <summary>
            Create ParameterDefinition object
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="purpose">Specifies the method of storing parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/></param>
            <param name="initialValue">Serialized default value of the parameter</param>
            <returns>ParameterDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParameterDefinition.Create(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create ParameterDefinition object
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="initialValue">Serialized default value of the parameter</param>
            <param name="ignoreTypeExistenceCheck">If true the parameter type missing will be ignored</param>
            <returns>ParameterDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParameterDefinition.Create(OptimaJet.Workflow.Core.Model.ParameterDefinition,System.Object)">
            <summary>
            Create ParameterDefinitionWithValue object 
            </summary>
            <param name="parameterDefinitionClone">Parameter object</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue">
            <summary>
             Represent a parameter in a process scheme with value
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.Purpose">
            <summary>
            Specifies the method of storing parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.MergeIntoParentProcessIsProhibited">
            <inheritdoc />
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue.OriginalExternalParameterType">
            <summary>
            Returns external parameter type if parameter is externals
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParameterPurpose">
            <summary>
            Specifies the method of storing parameters
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Temporary">
            <summary>
            Is not stored and only exists during transition execution
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence">
            <summary>
            Is stored in persistence store <see cref="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider"/>
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.System">
            <summary>
            Is system, storing can be different
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ParametersCollection">
            <summary>
            Represent a collection of process's parameters
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.AddParameter(OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue)">
            <summary>
            Adds parameter to process parameters collection
            </summary>
            <param name="parameter">Parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.AddParameters(System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue})">
            <summary>
            Adds parameters to process parameters collection
            </summary>
            <param name="parameters">Collection of parameters with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.ReplaceParameters(System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue})">
            <summary>
            Replace parameters collection by new value
            </summary>
            <param name="parameters">>Collection of parameters with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.IsParameterExisting(System.String)">
            <summary>
            Checks that the parameter whether exists or not
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>true if exists</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.GetParameter(System.String)">
            <summary>
            Returns parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/> with specific name
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>Parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.GetParameterAsync(System.String)">
            <summary>
            Returns parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/> with specific name (Async version)
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>Parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.GetParameter``1(System.String)">
            <summary>
            Returns parameter's value by specific name
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <returns>Value of the parameter</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.GetParameterAsync``1(System.String)">
            <summary>
            Returns parameter's value by specific name (Async version)
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <returns>Value of the parameter</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.SetParameter``1(System.String,``0,OptimaJet.Workflow.Core.Model.ParameterPurpose)">
            <summary>
            Set value of the parameter with specific name. If the definition of the parameter with specific name is absent in the scheme of the process <see cref="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Parameters"/>,
            there will be created Temporary parameter  <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/> with specified name
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="purposeIfMissing">Set it to ParameterPurpose.Persistence if you want persist this parameter forcibly</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.SetParameterAsync``1(System.String,``0,OptimaJet.Workflow.Core.Model.ParameterPurpose)">
            <summary>
            Set value of the parameter with specific name. Async version If the definition of the parameter with specific name is absent in the scheme of the process <see cref="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Parameters"/>,
            there will be created Temporary parameter  <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/> with specified name.
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
            <param name="purposeIfMissing">Set it to ParameterPurpose.Persistence if you want persist this parameter forcibly</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.SetImplicitSerializedParameter(System.String,System.String,OptimaJet.Workflow.Core.Model.ParameterPurpose)">
            <summary>
            Sets implicit parameter using it's json serialized value
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="value">JSON serialized value of implicit parameter</param>
            <param name="purposeIfMissing">Parameter purpose</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ParametersCollection.RemoveParameter(System.String,System.Boolean)">
            <summary>
            Set null to process parameter value
            </summary>
            <param name="name">Parameter name</param>
            <param name="removeFromCollection">If true physically remove <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/> from collection</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ProcessDefinition">
            <summary>
            Represents object model of a scheme of a process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.CodeActionsInvoker">
            <summary>
            Code action invoker with compiled code actions
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.ExpressionsInvoker">
            <summary>
            Expressions invoker
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.SubprocessNameGetterInvoker">
            <summary>
            Subprocess name getter invoker
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.ExpressionManager">
            <summary>
            Expression manager
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Actors">
            <summary>
            List of actors <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Parameters">
            <summary>
            List of parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Commands">
            <summary>
            List of commands <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Timers">
            <summary>
            List of timers <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Activities">
            <summary>
            List of activities <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Transitions">
            <summary>
            List of transitions <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Localization">
            <summary>
            List of localization items <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.CodeActions">
            <summary>
            List of code actions <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.CodeActionsCommonUsings">
            <summary>
            List of common usings separated by ;
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.AdditionalParams">
            <summary>
            Additional parameters used by Workflow Designer
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.CanBeInlined">
            <summary>
            The flag indicates that this scheme can be inlined into other schemes
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.LogEnabled">
            <summary>
            The flag indicates that this scheme will be logging after create <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.InlinedSchemes">
            <summary>
            The property contains inlined schemes are used in this scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Tags">
            <summary>
            The property contains tags that mark the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.ContainsSubprocesses">
            <summary>
            Returns true if the scheme contains subprocesses
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.InitialActivity">
            <summary>
            Returns initial activity of the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.ParametersForSerialize">
            <summary>
            Returns all parameter definitions except system <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.PersistenceParameters">
            <summary>
            Returns all persisted parameter definitions <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/> 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindActivity(System.String)">
            <summary>
            Returns activity with specific name
            </summary>
            <param name="activityName">Name of the activity <see cref="!:ActivityDefinition.Name"/></param>
            <returns>ActivityDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindSetStateActivity(System.String)">
            <summary>
            Returns activity with specific state name and possibility to set the state
            </summary>
            <param name="stateName">Name of the state</param>
            <returns>ActivityDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindCommand(System.String)">
            <summary>
            Returns command with specific name
            </summary>
            <param name="name">Name of the command <see cref="!:CommandDefinition.Name"/></param>
            <returns>CommandDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindActor(System.String)">
            <summary>
            Returns actor with specific name
            </summary>
            <param name="name">Name of the actor <see cref="!:ActorDefinition.Name"/></param>
            <returns>ActorDefinition object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.ActorsForSerialize">
            <summary>
            Returns all parameter definitions except system <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindParameterDefinition(System.String)">
            <summary>
            Returns the parameter specific name 
            </summary>
            <param name="name">>Name of the parameter <see cref="!:ParameterDefinition.Name"/></param>
            <returns>ParameterDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindTransition(System.String)">
            <summary>
            Returns transition with specific name
            </summary>
            <param name="name">Name of the transition <see cref="!:TransitionDefinition.Name"/></param>
            <returns>TransitionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.FindTransitions(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ActivityDefinition)">
            <summary>
            Returns transitions linked by specified activities
            </summary>
            <param name="from">From activity <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/></param>
            <param name="to">To activity <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To"/></param>
            <returns>List of TransitionDefinition objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetPossibleTransitionsForActivity(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing transitions for specific activity
            </summary>
            <param name="activity">Activity definition</param>
            <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing transitions</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetCommandTransitions(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing command transitions for specific activity <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Command"/>
            </summary>
            <param name="activity">Activity definition</param>
              /// <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing command transitions</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetAutoTransitionForActivity(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing auto transitions for specific activity <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Auto"/>
            </summary>
            <param name="activity">Activity definition</param>
            <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing auto transitions</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetCommandTransitionForActivity(OptimaJet.Workflow.Core.Model.ActivityDefinition,System.String,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing command transitions for specific activity <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Command"/> whis specific command name <see cref="!:CommandDefinition.Name"/>
            </summary>
            <param name="activity">Activity definition</param>
            <param name="commandName">Name of the command</param>
            <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing command transitions whis specific command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetTimerTransitionForActivity(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ForkTransitionSearchType)">
            <summary>
            Returns the list of all outgoing timer transitions for specific activity <see cref="F:OptimaJet.Workflow.Core.Model.TriggerType.Timer"/>
            </summary>
            <param name="activity">Activity definition</param>
            <param name="forkTransitionSearch">Search filter for fork transitions</param>
            <returns>List of all outgoing timer transitions</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.Create(System.String,System.Boolean,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ParameterDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActivityDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.LocalizeDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CodeActionDefinition},OptimaJet.Workflow.Core.Model.DesignerSettings,System.Collections.Generic.List{System.String},System.Boolean,System.String)">
            <summary>
            Create ProcessDefinition object
            </summary>
            <param name="name">Name of the scheme</param>
            <param name="canBeInlined">Sign that the scheme can be inlined into another schemes</param>
            <param name="actors">List of actors <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/></param>
            <param name="parameters">List of parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/></param>
            <param name="commands">List of commands <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/></param>
            <param name="timers">List of timers <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/></param>
            <param name="activities">List of activities <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/></param>
            <param name="transitions">List of transitions <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/></param>
            <param name="localization">List of localization items <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition"/></param>
            <param name="codeActions"> List of code actions <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/></param>
            <param name="designerSettings">Designer settings</param>
            <param name="tags">scheme tags</param>
            <param name="logEnabled">Sign that the <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/> will be logging after create</param>
            <param name="commonUsings">List of common usings separated by ;</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetLocalizedStateName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized state name in specific culture
            </summary>
            <param name="stateName">System state name</param>
            <param name="culture">Culture</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetLocalizedCommandName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized command name in specific culture
            </summary>
            <param name="commandName">System command name</param>
            <param name="culture">Culture</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetLocalizedParameterName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized parameter name in specific culture
            </summary>
            <param name="parameterName">System parameter name</param>
            <param name="culture">Culture</param>
            <returns>Localized parameter name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.Clone(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Clones ProcessDefinition object
            </summary>
            <param name="doNotCloneActivities">If True activity list will be empty after cloning</param>
            <param name="doNotCloneTransitions">If True transition list will be empty after cloning</param>
            <param name="doNotCloneCodeActions">If True code actions list will be empty after cloning</param>
            <returns>Cloned ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetSchemeCodeForActionCall">
            <summary>
            Returns the code of the scheme from which the actions are called. For a subprocess it will be RootSchemeCode for root (ordinary) process it will be Name
            </summary>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetActivityAnnotation``1(System.String,System.String)">
            <summary>
            Get an annotation of an activity
            </summary>
            <typeparam name="T">Type of the annotation's value</typeparam>
            <param name="activityName">Activity name</param>
            <param name="name">Annotation name</param>
            <returns>Annotation value</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetActivityAnnotation(System.String,System.String)">
            <summary>
            Get a JSON representation of annotation's value of an activity
            </summary>
            <param name="activityName">Activity name</param>
            <param name="name">Annotation name</param>
            <returns>JSON representation of annotation's value</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetTransitionAnnotation``1(System.String,System.String)">
            <summary>
            Get an annotation of a transition
            </summary>
            <typeparam name="T">Type of the annotation's value</typeparam>
            <param name="transitionName">Transition name</param>
            <param name="name">Annotation name</param>
            <returns>Annotation value</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessDefinition.GetTransitionAnnotation(System.String,System.String)">
            <summary>
            Get a JSON representation of annotation's value of a transition
            </summary>
            <param name="transitionName">Transition name</param>
            <param name="name">Annotation name</param>
            <returns>JSON representation of annotation's value</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ProcessInstance">
            <summary>
            Represent a instance of a specific process 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.AssignmentManager">
            <summary>
            Manager of work with tasks within the current process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.Create(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Guid,OptimaJet.Workflow.Core.Model.ProcessDefinition,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create ProcessInstance object
            </summary>
            <param name="schemeId">Id of the scheme of the process</param>
            <param name="processId">Id of the process</param>
            <param name="processScheme">Parsed scheme of the process</param>
            <param name="isSchemeObsolete">Sign that the scheme of the process is obsolete</param>
            <param name="isDeterminingParametersChanged">Sign that parameters for creating scheme of the process was changed</param>
            <param name="tenantId">Id of tenant</param>
            <returns>ProcessInstance object</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessId">
            <summary>
            Returns Id of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ParentProcessId">
            <summary>
            Returns Id of the parent process if this process is subprocess (parallel branch)
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.RootProcessId">
            <summary>
            Returns Id of the root process in the subprocesses hierarchy if this process is subprocess (parallel branch)
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.SchemeId">
            <summary>
            Returns Id of the scheme of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousState">
            <summary>
            Returns the name of the state  which was initial for last executed direct transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecutedTimer">
            <summary>
            Returns the name of the currently executing timer, filled if the transition process was initiated by a timer 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousStateForDirect">
            <summary>
            Returns the name of the state  which was initial for last executed transition  marked as direct <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousStateForReverse">
            <summary>
            Returns the name of the state  which was initial for last executed transition marked as reverse <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousActivityName">
            <summary>
            Returns the name of the activity  which was initial for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousActivityForDirectName">
            <summary>
            Returns the name of the activity  which was initial for last executed transition marked as direct <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.PreviousActivityForReverseName">
            <summary>
            Returns the name of the activity  which was initial for last executed transition marked as reverse <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.CurrentCommand">
            <summary>
            Returns the name of the currently executing command, filled if the transition process was initiated by a command 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IdentityId">
            <summary>
            Returns the user id which execute a command or set a state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ImpersonatedIdentityId">
            <summary>
            Returns the user id for whom executes a command or sets a state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecutedActivityState">
            <summary>
             Returns the name of the state  which is final for currently executing transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecutedActivity">
            <summary>
             Returns the activity which is final for currently executing transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecutedTransition">
            <summary>
             Returns the currently executing transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.CurrentActivityName">
            <summary>
            Returns the name of the current activity. Activity which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IdentityIds">
            <summary>
            Returns the list of user ids which have the ability to execute a transition which leads to set executed activity. 
            (which have the ability to execute current transition)
            It available only on pre-execution mode
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IdentityIdsForCurrentActivity">
            <summary>
            Returns the list of user ids which have the ability to execute a transition which leads to set executed activity. 
            (which have the ability to execute current transition)
            The main difference between this property and IdentityIds, is that it takes into account only the last transition that leads into current activity
            It availiable only on pre-execution mode
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.SchemeCode">
            <summary>
            Returns the code of the scheme of the process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetSchemeCodeForActionCall">
            <summary>
            Returns the code of the scheme from which the actions are called. For a subprocess it will be RootSchemeCode for root (ordinary) process it will be SchemeCode
            </summary>
            <returns></returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.CurrentState">
            <summary>
            Returns the name of the current state. State which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.TenantId">
            <summary>
            Returns the tenant's identifier 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.StartTransitionalProcessActivity">
            <summary>
            Returns the name of the activity from which the transitional process was started.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.CurrentActivity">
            <summary>
            Returns the name of the current activity. Activity which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsPreExecution">
            <summary>
            Returns true within pre-execution mode 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.SubprocessName">
            <summary>
            If the process is a subprocess, its name will be here
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.CreationDate">
            <summary>
            Date of the process creation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.LastTransitionDate">
            <summary>
            Date of the last transition execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.StartTransitionTime">
            <summary>
            Date of the start transition execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.LogEnabled">
            <summary> The flag indicates that this process is logging </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessScheme">
            <summary>
            Returns parsed scheme of the process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsSchemeObsolete">
            <summary>
            Sign that the scheme of the process is obsolete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsSubprocess">
            <summary>
            Returns true if the process is subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsDeterminingParametersChanged">
            <summary>
            Sign that parameters for creating scheme of the process was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessParameters">
            <summary>
            Returns the list of process parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.ProcessInstance.MergedSubprocessParameters">
            <summary>
            Returns the list of process parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/> from a subprocess which was merged with current process. 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.AddParameter(OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue)">
            <summary>
            Adds parameter to process parameters collection
            </summary>
            <param name="parameter">Parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.AddParameters(System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue})">
            <summary>
            Adds parameters to process parameters collection
            </summary>
            <param name="parameters">Collection of parameters with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.IsParameterExisting(System.String)">
            <summary>
            Checks that the parameter whether exists or not
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>true if exists</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetParameter(System.String)">
            <summary>
            Returns parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/> with specific name
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>Parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetParameterAsync(System.String)">
            <summary>
            Returns parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/> with specific name  (Async version)
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>Parameter with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetParameter``1(System.String)">
            <summary>
            Returns parameter's value by specific name
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <returns>Value of the parameter</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetParameterAsync``1(System.String)">
            <summary>
            Returns parameter's value by specific name (Async version)
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <returns>Value of the parameter</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetParameter``1(System.String,``0,OptimaJet.Workflow.Core.Model.ParameterPurpose)">
            <summary>
            Set value of the parameter with specific name. If the definition of the parameter with specific name is absent in the scheme of the process <see cref="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Parameters"/>,
            there will be created Temporary parameter  <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/> with specified name
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetParameterAsync``1(System.String,``0,OptimaJet.Workflow.Core.Model.ParameterPurpose)">
            <summary>
            Set value of the parameter with specific name (Async version). If the definition of the parameter with specific name is absent in the scheme of the process <see cref="P:OptimaJet.Workflow.Core.Model.ProcessDefinition.Parameters"/>,
            there will be created Temporary parameter  <see cref="P:OptimaJet.Workflow.Core.Model.ParameterDefinition.Purpose"/> with specified name
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetImplicitSerializedParameter(System.String,System.String,OptimaJet.Workflow.Core.Model.ParameterPurpose)">
            <summary>
            Sets implicit parameter using it's json serialized value
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="value">JSON serialized value of implicit parameter</param>
            <param name="purposeIfMissing">Parameter purpose</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.RemoveParameter(System.String)">
            <summary>
            Remove parameter from process parameters
            </summary>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetProcessParameters(System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue})">
            <summary>
            Replace process parameters collection by new value
            </summary>
            <param name="parameters">>Collection of parameters with value <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinitionWithValue"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecuteConditionFromCodeActions(System.String,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Check condition from global or local code actions with specific name
            </summary>
            <param name="name">Name of the condition to check</param>
            <param name="runtime">The instance of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="parameter">Additional action parameter</param>
            <returns>Condition result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecuteConditionFromCodeActionsAsync(System.String,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Check condition from global or local code actions with specific name
            </summary>
            <param name="name">Name of the condition to check</param>
            <param name="runtime">The instance of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="parameter">Additional action parameter</param>
            <returns>Condition result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecuteCodeAction(System.String,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Execute action from global or local code actions with specific name
            </summary>
            <param name="name">Name of the action to execute</param>
            <param name="runtime">The instance of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="parameter">Additional action parameter</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.ExecuteCodeActionAsync(System.String,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Execute action from global or local code actions with specific name
            </summary>
            <param name="name">Name of the action to execute</param>
            <param name="runtime">The instance of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="parameter">Additional action parameter</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetLocalizedStateName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized state name in specific culture
            </summary>
            <param name="stateName">System state name</param>
            <param name="culture">Culture</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetLocalizedCommandName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized command name in specific culture
            </summary>
            <param name="commandName">System command name</param>
            <param name="culture">Culture</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.GetLocalizedParameterName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns localized parameter name in specific culture
            </summary>
            <param name="parameterName">System parameter name</param>
            <param name="culture">Culture</param>
            <returns>Localized parameter name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessParametersToString(OptimaJet.Workflow.Core.Model.ParameterPurpose)">
            <summary>
            Returns process parameters formatted to string
            </summary>
            <param name="purpose">Parameter purpose to filter parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterPurpose"/></param>
            <returns>Formatted string with parameters values</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetActivityAfterActionExecution(System.String)">
            <summary>
            Activity will be set and executed immediately after the current Action execution will be completed.
            </summary>
            <param name="activityName">Activity name to set and execute</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetActivityAfterActivityExecution(System.String)">
            <summary>
            Activity will be set and executed immediately after the current Activity execution (i.e execution of all Actions of this Activity) will be completed.
            </summary>
            <param name="activityName">Activity name to set and execute</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetStateAfterActionExecution(System.String)">
            <summary>
            State will be set and executed immediately after the current Action execution will be completed.
            </summary>
            <param name="stateName">State name to set and execute</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.ProcessInstance.SetStateAfterActivityExecution(System.String)">
            <summary>
            State will be set and executed immediately after the current Activity execution (i.e execution of all Actions of this Activity) will be completed.
            </summary>
            <param name="stateName">State name to set and execute</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1">
            <summary>
            Represent a not parsed process scheme
            </summary>
            <typeparam name="T">Type of not parsed scheme</typeparam>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.Scheme">
            <summary>
            Not parsed process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.SchemeCode">
            <summary>
            Name of the the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.RootSchemeCode">
            <summary>
            Name of the root scheme if subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.Id">
            <summary>
            Id of the the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.RootSchemeId">
            <summary>
            Id of the the root scheme if subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.IsObsolete">
            <summary>
            Sign that the scheme is obsolete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.IsDeterminingParametersChanged">
            <summary>
            Sign that parameters for creating scheme was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.DefiningParameters">
            <summary>
            Parameters for creating the scheme of the process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.#ctor(System.Guid,System.Nullable{System.Guid},System.String,System.String,`0,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Create SchemeDefinition object
            </summary>
            <param name="id">Id of the the scheme</param>
            <param name="schemeCode">Name of the the scheme</param>
            <param name="parentSchemeCode">Name of the parent scheme if subprocess</param>
            <param name="rootSchemeCode">Name of the root scheme if subprocess</param>
            <param name="scheme">Not parsed process scheme</param>
            <param name="isObsolete">Sign that the scheme is obsolete</param>
            <param name="isDeterminingParametersChanged">Sign that parameters for creating scheme was changed</param>
            <param name="definingParameters">Parameters for creating the scheme of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.SchemeDefinition`1.#ctor(OptimaJet.Workflow.Core.Model.ProcessDefinition,OptimaJet.Workflow.Core.Parser.IWorkflowParser{`0})">
            <summary>
            Create SchemeDefinition object
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <param name="parser">WorkflowParser to serialize the scheme</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TimerDefinition">
            <summary>
            Represent a timer in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TimerDefinition.Type">
            <summary>
            Type of the timer <see cref="T:OptimaJet.Workflow.Core.Model.TimerType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TimerDefinition.Value">
            <summary>
            Specifies the timer time depend on timer type 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TimerDefinition.NotOverrideIfExists">
             <summary>
            If true specifies that the old timer time will not be overriden if a timer with same name exists in outgoing transitions of a new current activity
             </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TimerDefinition.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Create TimerDefinition object
            </summary>
            <param name="name">Name of the timer</param>
            <param name="type">Type of the timer <see cref="T:OptimaJet.Workflow.Core.Model.TimerType"/></param>
            <param name="value">Specifies the timer time depend on timer type </param>
            <param name="notOverrideIfExists">If true specifies that the old timer time will not be overriden if a timer with same name exists in outgoing transitions of a new current activity</param>
            <returns>TimerDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TimerType">
            <summary>
            Type of a timer
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TimerType.Interval">
            <summary>
            Timer time is set by interval in milliseconds
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TimerType.Time">
            <summary>
            Timer time is set to specific time of today or tomorrow
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TimerType.Date">
            <summary>
            Timer time is set to specific date at 00:00:00
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TimerType.DateAndTime">
            <summary>
            Timer time is set to specific date and time
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TimerType.Expression">
            <summary>
            Timer time is set to custom timer value
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TransitionClassifier">
            <summary>
            Classifier of  the direction of the transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionClassifier.NotSpecified">
            <summary>
            Direction not specified
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionClassifier.Direct">
            <summary>
            Direct transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionClassifier.Reverse">
            <summary>
            Reverse transition
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.ConcatenationType">
            <summary>
            Conditions and restrictions concatenation type
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConcatenationType.And">
            <summary>
            Concatenate as And
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.ConcatenationType.Or">
            <summary>
            Concatenate as Or
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TransitionDefinition">
            <summary>
             Represent a transition in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.InlinedFinalActivityName">
            <summary>
            Final activity name in inlined scheme, may not be filled, then any final activity from inlined scheme will be taken
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.OriginalName">
            <summary>
            If object was inlined, you can get its original name from this property
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.OriginalSchemeCode">
            <summary>
            The code of the scheme to which the inlined object originally belonged.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.LastTimeInlineName">
            <summary>
            The name of the inline activity instead of which the object was inlined.last time
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.FirstTimeInlineName">
            <summary>
            The name of the inline activity instead of which the object was inlined first time.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.UserComment">
            <summary> Сustom comment </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.WasInlined">
            <summary>
            Return true if the object was inlined.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From">
            <summary>
            Source activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.To">
            <summary>
            Destination activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Classifier">
            <summary>
            Classifier of the direction of the transition
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Trigger">
            <summary>
            Transition's trigger
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Conditions">
            <summary>
            List of conditions which are checked to execute transition
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Restrictions">
            <summary>
            List of actors which are determine a user which can execute transition
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.AllowConcatenationType">
            <summary>
            Type of concatenation for restrictions with the type equal "Allow" <see cref="F:OptimaJet.Workflow.Core.Model.RestrictionType.Allow"/> <seealso cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.RestrictConcatenationType">
            <summary>
            Type of concatenation for restrictions with the type equal "Restrict" <see cref="F:OptimaJet.Workflow.Core.Model.RestrictionType.Restrict"/> <seealso cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.ConditionsConcatenationType">
            <summary>
            Type of concatenation for conditions
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Annotations">
            <summary>
            A List of <see cref="T:OptimaJet.Workflow.Core.Model.Annotation"/> attached to this transition.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.HasExpressions">
            <summary>
            Returns true if the transition has expressions
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.IsFork">
            <summary>
            Returns true if Transition initialized or finalized a fork (split, parallel branch). Fork transition is the initial or final transition of a subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.MergeViaSetState">
            <summary>
            Returns true if after a subprocess will be merged with a parent process new state of a parent process will be set forcibly
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.DisableParentStateControl">
            <summary>
            Applied if transition is fork. False - mean that subprocess will be dropped if parent process turned up in a state where subprocess can not exist.
            True - mean that subprocess control is responsibility of a developer.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.SubprocessStartupType">
            <summary>
            Defines how the subprocess starts
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.SubprocessInOutDefinition">
            <summary>
            Defines if the transition is start or final
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.SubprocessName">
            <summary>
            Subprocess custom name 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.SubprocessId">
            <summary>
            Subprocess identifier (must be GUID) or expression to get the subprocess identifier from parameters
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.SubprocessStartupParameterCopyStrategy">
            <summary>
            Determines how parameters from the parent process are passed to the subprocess at startup
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.SubprocessFinalizeParameterMergeStrategy">
            <summary>
            Determines how parameters from a subprocess are passed to the parent process when final merge
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.SubprocessSpecifiedParameters">
            <summary>
            A list of parameters that are either passed or not passed to or from a subprocess (see SubprocessStartupParameterCopyStrategy or  SubprocessFinalizeParameterMergeStrategy
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.Create(System.String,OptimaJet.Workflow.Core.Model.TransitionClassifier,OptimaJet.Workflow.Core.Model.ConcatenationType,OptimaJet.Workflow.Core.Model.ConcatenationType,OptimaJet.Workflow.Core.Model.ConcatenationType,OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.TriggerDefinition,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ConditionDefinition})">
            <summary>
            Create TransitionDefinition object
            </summary>
            <param name="name">Name of the transition</param>
            <param name="clasifier">Classifier of the direction of the transition</param>
            <param name="allowRestrictionsConcatenationType">Type of concatenation for restrictions with the type equal "Allow" <see cref="F:OptimaJet.Workflow.Core.Model.RestrictionType.Allow"/> <seealso cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type"/></param>
            <param name="denyRestrictionsConcatenationType">Type of concatenation for restrictions with the type equal "Restrict" <see cref="F:OptimaJet.Workflow.Core.Model.RestrictionType.Restrict"/> <seealso cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type"/></param>
            <param name="conditionsConcatenationType">Type of concatenation for conditions</param>
            <param name="from">Source activity</param>
            <param name="to">Destination activity</param>
            <param name="trigger">Transition's trigger</param>
            <param name="conditions">List of conditions which are checked to execute transition</param>
            <returns>TransitionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.SetSubprocessSettings(System.String,System.String,System.Boolean,System.Boolean,OptimaJet.Workflow.Core.Model.SubprocessInOutDefinition,OptimaJet.Workflow.Core.Model.SubprocessStartupType,OptimaJet.Workflow.Core.Model.SubprocessStartupParameterCopyStrategy,OptimaJet.Workflow.Core.Model.SubprocessFinalizeParameterMergeStrategy,System.String)">
            <summary>
            Sets subprocess specific parameters
            </summary>
            <param name="subprocessName">Subprocess name or expression in order to calculate subprocess name</param>
            <param name="subprocessId">Subprocess identifier (must be GUID) or expression to get the subprocess identifier from parameters</param>
            <param name="mergeViaSetState">Returns true if after a subprocess will be merged with a parent process new state of a parent process will be set forcibly</param>
            <param name="disableParentStateControl">Applied if transition is fork. False - mean that subprocess will be dropped if parent process turned up in a state where subprocess can not exist.
            True - mean that subprocess control is responsibility of a developer</param>
            <param name="inOutDefinition">Defines if the transition is start or final</param>
            <param name="startupType">Defines how the subprocess starts</param>
            <param name="startupParameterCopyStrategy">Determines how parameters from the parent process are passed to the subprocess at startup</param>
            <param name="finalizeParameterMergeStrategy">Determines how parameters from a subprocess are passed to the parent process when final merge</param>
            <param name="subprocessSpecifiedParameters">A list of parameters that are either passed or not passed to or from a subprocess (see SubprocessStartupParameterCopyStrategy or  SubprocessFinalizeParameterMergeStrategy</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.Create(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ActivityDefinition)">
            <summary>
            Create TransitionDefinition object with NotSpecified classifier, Always condition, Auto trigger
            </summary>
            <param name="from">Source activity</param>
            <param name="to">Destination activity</param>
            <returns>TransitionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.AddRestriction(OptimaJet.Workflow.Core.Model.RestrictionDefinition)">
            <summary>
            Add restriction to restrictions list
            </summary>
            <param name="restriction">RestrictionDefinition object</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.IsAlwaysTransition">
            <summary>
            Returns true if condition type of the transition is equal "Always" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Always"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.IsOtherwiseTransition">
            <summary>
            Returns true if condition type of the transition is equal "Otherwise" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Otherwise"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.IsConditionTransition">
            <summary>
            Returns true if condition type of the transition is equal "Action" <see cref="F:OptimaJet.Workflow.Core.Model.ConditionType.Action"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.ForkType">
            <summary>
            Returns type of fork transition <see cref="T:OptimaJet.Workflow.Core.Model.TransitionForkType"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.Clone(System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActivityDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition})">
            <summary>
            Clones TransitionDefinition object replacing references to the references to the specific objects
            </summary>
            <param name="actorDefinitions">List of the actors to replace</param>
            <param name="commandDefinitions">List of the commands to replace</param>
            <param name="activityDefinitions">List of the activities to replace</param>
            <param name="timerDefinitions">List of the timers to replace</param>
            <returns>Cloned TransitionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.GetAnnotation``1(System.String)">
            <summary>
            Get an annotation attached to this transition
            </summary>
            <typeparam name="T">Annotation's type</typeparam>
            <param name="name">Annotation's name</param>
            <returns>Annotation value</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.TransitionDefinition.GetAnnotation(System.String)">
            <summary>
            Get a JSON representation of annotation's value
            </summary>
            <param name="name">Annotation's name</param>
            <returns>JSON representation of annotation's value</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.RestrictionDefinition">
            <summary>
            Represent a transition's restiction in a process scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Type">
            <summary>
            Type of the restriction <see cref="T:OptimaJet.Workflow.Core.Model.RestrictionType"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Actor">
            <summary>
            Actor which allowed or restricted to trigger a transition
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Create(System.String,OptimaJet.Workflow.Core.Model.ActorDefinition)">
            <summary>
            Create RestrictionDefinition object
            </summary>
            <param name="type">Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/></param>
            <param name="actor"> Actor which allowed or restricted to trigger a transition</param>
            <returns>RestrictionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Create(OptimaJet.Workflow.Core.Model.RestrictionType,OptimaJet.Workflow.Core.Model.ActorDefinition)">
            <summary>
            Create RestrictionDefinition object
            </summary>
            <param name="type">Type of the condition <see cref="T:OptimaJet.Workflow.Core.Model.ConditionType"/></param>
            <param name="actor"> Actor which allowed or restricted to trigger a transition</param>
            <returns>RestrictionDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Clone(System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition})">
            <summary>
            Clones RestrictionDefinition object replacing references to the references to the specific objects
            </summary>
            <param name="actorDefinitions">List of the actors to replace</param>
            <returns>Cloned RestrictionDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.RestrictionType">
            <summary>
            Type of transition's restriction
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.RestrictionType.Allow">
            <summary>
            Transition is allowed to specific actor
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.RestrictionType.Restrict">
            <summary>
            Transition is restricted to specific actor
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Model.TransitionForkType">
            <summary>
            Type of transition in terms of subprocesses 
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionForkType.NotFork">
            <summary>
            Not fork transition
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionForkType.ForkStart">
            <summary>
            Transition which start a subprocess
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionForkType.ForkEnd">
            <summary>
            Transition which end a subprocess
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Model.TransitionForkType.ForkUnknown">
            <summary>
            Fork transition with unknown status in case of process definition is not marked
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.WorkflowTimer.TimerId">
            <summary>
            Timer id
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.WorkflowTimer.Name">
            <summary>
            Timer name <see cref="P:OptimaJet.Workflow.Core.Model.BaseDefinition.Name"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Model.WorkflowTimer.ProcessId">
            <summary>
            Id of the process which owned the timer
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Persistence.CommandName.Name">
            <summary>
            System name of the command
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Persistence.CommandName.LocalizedName">
            <summary>
            Localized name of the command
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Persistence.CommandWithClassifier.Name">
            <summary>
            System name of the command
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Persistence.CommandWithClassifier.Classifier">
            <summary>
            Classifier of the direction of the transition with this command
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.IAssignmentProvider">
            <summary>
            Interface of a assignment provider, which provide storing assignments
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IAssignmentProvider.DeleteAssignmentAsync(System.Guid)">
            <summary>
            Deleting without saving in the database by assignmentId
            </summary>
            <param name="assignmentId">Assignment id</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IAssignmentProvider.GetAssignmentsAsync(OptimaJet.Workflow.Core.Model.AssignmentFilter,System.Collections.Generic.List{System.ValueTuple{System.String,OptimaJet.Workflow.Core.Persistence.SortDirection}},OptimaJet.Workflow.Core.Persistence.Paging)">
            <summary>
            Get a list of assignments by <see cref="T:OptimaJet.Workflow.Core.Model.AssignmentFilter"/> with sorting and paging 
            </summary>
            <param name="filter"><see cref="T:OptimaJet.Workflow.Core.Model.AssignmentFilter"/></param>
            <param name="orderParameters">List of order parameters</param>
            <param name="paging"><see cref="T:OptimaJet.Workflow.Core.Persistence.Paging"/></param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IAssignmentProvider.GetAssignmentCountAsync(OptimaJet.Workflow.Core.Model.AssignmentFilter)">
            <summary>
            Get count of assignments by <see cref="T:OptimaJet.Workflow.Core.Model.AssignmentFilter"/>
            </summary>
            <param name="filter"><see cref="T:OptimaJet.Workflow.Core.Model.AssignmentFilter"/></param>
            <returns>count of assignments</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IAssignmentProvider.CreateAssignmentAsync(System.Guid,OptimaJet.Workflow.Core.Model.AssignmentCreationForm)">
            <summary>
            Creating a new assignment from <see cref="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm"/> for specific process
            </summary>
            <param name="processId">Process id</param>
            <param name="form"><see cref="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm"/></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IAssignmentProvider.GetAssignmentAsync(System.Guid)">
            <summary>
            Get assignment by assignmentId
            </summary>
            <param name="assignmentId">Assignment id</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IAssignmentProvider.UpdateAssignmentAsync(OptimaJet.Workflow.Core.Model.Assignment)">
            <summary>
            Updating assignment
            </summary>
            <param name="assignment"><see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/> for updating</param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.IWorkflowProvider">
            <summary>
            An interface of a workflow provider wich combines <see cref="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider"/>, 
            <see cref="T:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1"/>, and <see cref="T:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1"/>
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence">
            <summary>
            Scheme persistence in file system.
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.#ctor(System.String,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Constructor
            </summary>
            <param name="storePath">path to the dirictory where schemes are stored</param>
            <param name="runtime">workflow runtime</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.AddSchemeTags(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add tags to scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.GetInlinedSchemeCodes">
            <summary>
            Returns the list of scheme codes that can be inlined into other schemes
            </summary>
            <returns>The list of scheme codes</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.GetRelatedByInliningSchemeCodes(System.String)">
            <summary>
            Returns the list of scheme codes into which the scheme with the given code has been inlined
            </summary>
            <param name="schemeCode">Inlined scheme code</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.GetScheme(System.String)">
            <summary>
            Gets not parsed scheme by scheme name  
            </summary>
            <param name="code">Name of the scheme</param>
            <returns>Not parsed scheme of the process</returns>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.SchemeNotFoundException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.RemoveSchemeTags(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove tags from scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.SaveScheme(System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Saves scheme to a store
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="inlinedSchemes">Scheme codes to be inlined into this scheme</param>
            <param name="scheme">Not parsed scheme</param>
            <param name="canBeInlined">if true - this scheme can be inlined into another schemes</param>
            <param name="tags">Tags attached to this scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.SearchSchemesByTags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the list of scheme codes into which the scheme with the given tags
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.SetSchemeTags(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set tags to scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.GetSchemeCodes">
            <summary>
            Returns the list of all scheme codes
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.SchemeFilePersistence.DeleteScheme(System.String)">
            <summary>
            Deletes scheme from the store
            </summary>
            <param name="schemeCode">Scheme code</param>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.SortDirection.Asc">
            <summary>
            Sort from smallest to largest
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.SortDirection.Desc">
            <summary>
            Sort from largest to smallest
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.IRuntimePersistence">
            <summary>
            Provides save and load of workflow runtime parameters. as timers etc
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus">
            <summary>
            Represent a stage of a life cycle of a process
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.NotFound">
            <summary>
            Status of a processes which are not exists in persistence store
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Unknown">
            <summary>
            Status of a processes which are exists in persistence store but theirs status is not defined
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Initialized">
            <summary>
            Status of a processes which was created just now 
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running">
            <summary>
            Status of a processes which are executing at current moment
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Idled">
            <summary>
            Status of a processes which are not executing at current moment and awaiting an external interaction
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Finalized">
            <summary>
            Status of a processes which was finalized
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Terminated">
            <summary>
            Status of a processes which was terminated with an error
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Error">
            <summary>
            Status of a processes which had an error but not terminated
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider">
            <summary>
            Interface of a persistence provider, which provide storing of process's instance specific parameters and global parameters
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.Init(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Init the provider
            </summary>
            <param name="runtime">Workflow runtime instance which owned the provider</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.InitializeProcessAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Initialize a process instance in persistence store
            </summary>
            <param name="processInstance">Instance of the process</param>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.ProcessAlreadyExistsException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.FillProcessParametersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Fills system <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.System"/>  and persisted <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence"/> parameters of the process
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.FillPersistedProcessParametersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Fills persisted <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence"/> parameters of the process
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.FillPersistedProcessParameterAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Fills persisted <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence"/> parameter of the process
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.FillSystemProcessParametersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Fills system <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.System"/> parameters of the process
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SavePersistenceParametersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Saves persisted <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence"/> parameters of the process to store
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SavePersistenceParameterAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Save persisted <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence"/> parameter of the process to store
            </summary>
            <param name="processInstance">Instance of the process</param>
            <param name="parameterName">Name of parameter for save</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.RemoveParameterAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Remove persisted <see cref="F:OptimaJet.Workflow.Core.Model.ParameterPurpose.Persistence"/> parameter of the process from store
            </summary>
            <param name="processInstance">Instance of the process</param>
            <param name="parameterName">Name of parameter for save</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowInitializedAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Initialized"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.ImpossibleToSetStatusException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowIdledAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Idled"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.ImpossibleToSetStatusException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowRunningAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.ImpossibleToSetStatusException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowFinalizedAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Finalized"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.ImpossibleToSetStatusException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetProcessStatusAsync(System.Guid,OptimaJet.Workflow.Core.Persistence.ProcessStatus)">
            <summary>
            Set process instance status to newStatus
            </summary>
            <param name="processId">Process id</param>
            <param name="newStatus">New process status</param>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.ImpossibleToSetStatusException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SetWorkflowTerminatedAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Set process instance status to <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Terminated"/>
            </summary>
            <param name="processInstance">Instance of the process</param>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.ImpossibleToSetStatusException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.WriteInitialRecordToHistoryAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Write to table WorkflowProcessTransitionHistory initial record with first activity if can.
            </summary>
            <param name="processInstance">Instance of the process</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.UpdatePersistenceStateAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.TransitionDefinition)">
            <summary>
            Updates system parameters of the process in the store
            </summary>
            <param name="processInstance">Instance of the process</param>
            <param name="transition">Last executed transition</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.IsProcessExistsAsync(System.Guid)">
            <summary>
            Checks existence of the process
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.GetInstanceStatusAsync(System.Guid)">
            <summary>
            Returns status of the process <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/>
            </summary>
            <param name="processId">Id of the process</param>
            <returns>Status of the process</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.BindProcessToNewSchemeAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Saves information about changed scheme to the store
            </summary>
            <param name="processInstance">Instance of the process whith changed scheme <see cref="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessScheme"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.BindProcessToNewSchemeAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Boolean)">
            <summary>
            Saves information about changed scheme to the store
            </summary>
            <param name="processInstance">Instance of the process whith changed scheme <see cref="P:OptimaJet.Workflow.Core.Model.ProcessInstance.ProcessScheme"/></param>
            <param name="resetIsDeterminingParametersChanged">True if required to reset IsDeterminingParametersChanged flag <see cref="P:OptimaJet.Workflow.Core.Model.ProcessInstance.IsDeterminingParametersChanged"/></param>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.ProcessNotFoundException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.RegisterTimerAsync(System.Guid,System.Guid,System.String,System.DateTime,System.Boolean)">
            <summary>
            Register a new timer
            </summary>
            <param name="processId">Id of the process</param>
            <param name="rootProcessId">Id of the root process</param>
            <param name="name">Timer name <see cref="!:TimerDefinition.Name"/></param>
            <param name="nextExecutionDateTime">Next date and time of timer's execution</param>
            <param name="notOverrideIfExists">If true specifies that the existing timer with same name will not be overriden <see cref="P:OptimaJet.Workflow.Core.Model.TimerDefinition.NotOverrideIfExists"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.ClearTimersAsync(System.Guid,System.Collections.Generic.List{System.String})">
            <summary>
            Removes all timers from the store, exlude listed in ignore list
            </summary>
            <param name="processId">Id of the process</param>
            <param name="timersIgnoreList">Ignore list</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.GetTimersForProcessAsync(System.Guid)">
            <summary>
            Get all timers of a process
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.DeleteProcessAsync(System.Guid)">
            <summary>
            Remove all information about the process from the store
            </summary>
            <param name="processId">Id of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.DeleteProcessAsync(System.Guid[])">
            <summary>
            Remove all information about the process from the store
            </summary>
            <param name="processIds">List of ids of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.SaveGlobalParameterAsync``1(System.String,System.String,``0)">
            <summary>
            Saves a global parameter value
            </summary>
            <typeparam name="T">System type of the parameter</typeparam>
            <param name="type">Logical type of the parameter</param>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.LoadGlobalParameterAsync``1(System.String,System.String)">
            <summary>
            Returns a global parameter value
            </summary>
            <typeparam name="T">System type of the parameter</typeparam>
            <param name="type">Logical type of the parameter</param>
            <param name="name">Name of the parameter</param>
            <returns>Value of the parameter</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.LoadGlobalParametersWithNamesAsync``1(System.String)">
            <summary>
            Returns a values and names of global parameters
            </summary>
            <typeparam name="T">System type of the parameter</typeparam>
            <param name="type">Logical type of the parameter</param>
            <returns>Dictionary of parameter names and values</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.LoadGlobalParametersAsync``1(System.String)">
            <summary>
            Returns a global parameter values
            </summary>
            <typeparam name="T">System type of the parameter</typeparam>
            <param name="type">Logical type of the parameter</param>
            <returns>List of parameter values</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.DeleteGlobalParametersAsync(System.String,System.String)">
            <summary>
            Deletes a global parameter
            </summary>
            <param name="type">Logical type of the parameter</param>
            <param name="name">Name of the parameter</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider.GetProcessHistoryAsync(System.Guid,OptimaJet.Workflow.Core.Persistence.Paging)">
            <summary>
            Returns the history of process
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1">
            <summary>
            Interface of a persistence provider, which provide storing of schemes
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme</typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetProcessSchemeByProcessIdAsync(System.Guid)">
            <summary>
            Gets not parsed scheme of the process by process id
            </summary>
            <param name="processId">Id of the process</param>
            <returns>Not parsed scheme of the process</returns>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.ProcessNotFoundException"></exception>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.SchemeNotFoundException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetProcessSchemeBySchemeIdAsync(System.Guid)">
            <summary>
            Gets not parsed scheme by id
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <returns>Not parsed scheme of the process</returns>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.SchemeNotFoundException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetProcessSchemeWithParametersAsync(System.String,System.String,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Gets not parsed scheme by scheme name and parameters    
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">Parameters for creating the scheme</param>
            <param name="rootSchemeId">Id of the root scheme in case of subprocess</param>
            <param name="ignoreObsolete">True if you need to ignore obsolete schemes</param>
            <returns>Not parsed scheme of the process</returns>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.SchemeNotFoundException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetSchemeAsync(System.String)">
            <summary>
            Gets not parsed scheme by scheme name  
            </summary>
            <param name="code">Name of the scheme</param>
            <returns>Not parsed scheme of the process</returns>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.SchemeNotFoundException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SaveSchemeAsync(OptimaJet.Workflow.Core.Model.SchemeDefinition{`0})">
            <summary>
            Saves scheme to a store
            </summary>
            <param name="scheme">Not parsed scheme of the process</param>
            <exception cref="T:OptimaJet.Workflow.Core.Fault.SchemeAlreadyExistsException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.UpsertSchemeAsync(OptimaJet.Workflow.Core.Model.SchemeDefinition{`0})">
            <summary>
            Updates or Inserts scheme to a store
            </summary>
            <param name="scheme">Not parsed scheme of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SetSchemeIsObsoleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets sign IsObsolete to the scheme
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="parameters">Parameters for creating the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SetSchemeIsObsoleteAsync(System.String)">
            <summary>
            Sets sign IsObsolete to the scheme
            </summary>
            <param name="schemeCode">Name of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SaveSchemeAsync(System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Saves scheme to a store
            </summary>
            <param name="schemeCode">Name of the scheme</param>
            <param name="inlinedSchemes">Scheme codes to be inlined into this scheme</param>
            <param name="scheme">Not parsed scheme</param>
            <param name="canBeInlined">if true - this scheme can be inlined into another schemes</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetInlinedSchemeCodesAsync">
            <summary>
            Returns the list of scheme codes that can be inlined into other schemes
            </summary>
            <returns>The list of scheme codes</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.GetRelatedByInliningSchemeCodesAsync(System.String)">
            <summary>
            Returns the list of scheme codes into which the scheme with the given code has been inlined
            </summary>
            <param name="schemeCode">Inlined scheme code</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SearchSchemesByTagsAsync(System.String[])">
            <summary>
            Returns the list of scheme codes into which the scheme with the given tags
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SearchSchemesByTagsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the list of scheme codes into which the scheme with the given tags
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.AddSchemeTagsAsync(System.String,System.String[])">
            <summary>
            Add tags to scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.AddSchemeTagsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add tags to scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.RemoveSchemeTagsAsync(System.String,System.String[])">
            <summary>
            Remove tags from scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.RemoveSchemeTagsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove tags from scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SetSchemeTagsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set tags to scheme with the given schemeCode
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1.SetSchemeTagsAsync(System.String,System.String[])">
            <summary>
            Set tags to scheme with the given schemeCode
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.PredefinedActions.PredefinedActions">
            <summary>
            Contains all predefined actions
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.PredefinedActions.PredefinedActions.CheckAllSubprocessesCompletedAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Check that all subprocesses was completed
            </summary>
            <param name="processInstance"></param>
            <param name="runtime"></param>
            <returns>true - if there are no active suprocesses</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.PredefinedActions.PredefinedActions.CheckAllSubprocessesCompleted(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Check that all subprocesses was completed
            </summary>
            <param name="processInstance"></param>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.PredefinedActions.PredefinedActions.CheckAllSubprocessesAndParentProcessCompleted(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Check that all subprocesses and the parent process reach the same point (completed)
            </summary>
            <param name="processInstance"></param>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.PredefinedActions.PredefinedActions.CheckAllSubprocessesAndParentProcessCompletedAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Check that all subprocesses and the parent process reach the same point (completed)
            </summary>
            <param name="processInstance"></param>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.PredefinedActions.PredefinedActions.DeleteAllSubprocessesAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Delete all subprocesses for process
            </summary>
            <param name="processInstance"></param>
            <param name="runtime"></param>
            <returns>Count of deleted subprocesses</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.PredefinedActions.PredefinedActions.DeleteAllSubprocesses(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Delete all subprocesses for process
            </summary>
            <param name="processInstance"></param>
            <param name="runtime"></param>
            <returns>Count of deleted subprocesses</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs">
            <summary>
            Represent information about an activity which was set as a current acivity of process, contains ProcessInstance object
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.ProcessId">
            <summary>
            Id of the process whose current activity was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.IsSubprocess">
            <summary>
            If true means that the current activity was changed for subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.SchemeCode">
            <summary>
            Code of the scheme of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.ProcessInstance">
            <summary>
            Instance of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.PreviousActivityName">
            <summary>
            Returns the name of previous activity.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.PreviousActivity">
            <summary>
            Returns the previous activity.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.CurrentActivity">
            <summary>
            Returns the current activity. Activity which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.CurrentActivityName">
            <summary>
            Returns the name of current activity. Activity which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.StateWasChanged">
            <summary>
            Returns true if a state of process was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.TransitionalProcessWasCompleted">
            <summary>
            Indicates that a transitional process was completed and a process will stop in current activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.CurrentState">
            <summary>
            Returns the name of the current state. State which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.PreviousState">
            <summary>
            Returns the name of the state  which was initial for last executed direct transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.ExecutedTransition">
            <summary>
            Returns the executed transition.
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ProcessActivityChangedEventArgs.#ctor(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="processInstance">Instance of the process</param>
            <param name="transitionalProcessWasCompleted">Indicates that a transitional process was completed and a process will stop in current activity</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.BaseAggregatingProvider`1">
            <summary>
            Base class for all aggregating providers
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteItem">
            <summary>
            Autocomplete code suggestion item
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteItem.Kind">
            <summary>
            namespace or class or ...
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteItem.FullName">
            <summary>
            name with namespace (like "System.Console")
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteItem.Name">
            <summary>
            name without namespace (like "Console")
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteItem.Type">
            <summary>
            Return type. Can be null (for namespace or class or other)
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteItem.Childs">
            <summary>
            Childs. Classes and children namespaces for namespace, members for classes, etc
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteItem.Parameters">
            <summary>
            overrides of method parameters (not null or empty only for methods.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteItem.TypeArguments">
            <summary>
            Generic type arguments for variables
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteItem.TypeParamenters">
            <summary>
            Generic type paramenters for classes, structs etc
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteRequest.Pattern">
            <summary>
            text for search (like "System.Thr")
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteRequest.Usings">
            <summary>
            list of usings (like "System", "System.Threading")
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteRequest.Variables">
            <summary>
            list of allow variables to autocomplete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteRequest.Id">
            <summary>
            id that will be returned in response (to working with signalR)
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider">
            <summary>
            Aggregator, storage, entry point to <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleter"></see> implementations
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider.#ctor(System.Func{OptimaJet.Workflow.Core.Logging.ILogger},System.Boolean,System.Boolean,OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleter[])">
            <summary>
            Prepare providers but not init; automatically add <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> if not supress
            </summary>
            <param name="allowParallel">parallel get and init methods for platforms that >= .net standard 2.0</param>
            <param name="autocompleters">custom autocompleters (not <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see>!)</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider.#ctor(System.Func{OptimaJet.Workflow.Core.Logging.ILogger})">
            <summary>
            Prepare <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> but not init
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider.#ctor(System.Func{OptimaJet.Workflow.Core.Logging.ILogger},OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleter[])">
            <summary>
            Prepare <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> and custom providers but not init
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider.RunInitTask">
            <summary>
            Run task with <see cref="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider.InitCodeAutocomletersThatNoInitialized"></see>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider.RegisterCodeAutocompleters(OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleter[])">
            <summary>
            add code autocompleters but not init
            </summary>
            <param name="completers"></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider.AddVariablesToDefaultCompleterIfEnable(System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteVariable})">
            <summary>
            add variables to <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see>. 
            If <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> is suppressed, nothing will happen. 
            If <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> is not initialized, init method will be called. 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider.AddVariablesToDefaultCompleterIfEnable(System.String,System.Type)">
            <summary>
            add variables to <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see>. 
            If <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> is suppressed, nothing will happen. 
            If <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> is not initialized, init method will be called. 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.CodeAutocompleteProvider.Get(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteVariable})">
            <summary>
            Get autocomplete from all autocompleters that are already initialized
            </summary>
            <param name="pattern">text for search (like "System.Thr")</param>
            <param name="usings">list of usings (like "System", "System.Threading")</param>
            <param name="variables">list of allow variables to autocomplete</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleteProvider.AddVariablesToDefaultCompleterIfEnable(System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteVariable})">
            <summary>
            add variables to <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see>. 
            If <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> is suppressed, nothing will happen. 
            If <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> is not initialized, init method will be called. 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleteProvider.AddVariablesToDefaultCompleterIfEnable(System.String,System.Type)">
            <summary>
            add variables to <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see>. 
            If <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> is suppressed, nothing will happen. 
            If <see cref="T:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.DefaultAutocompleter"></see> is not initialized, init method will be called. 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleteProvider.Get(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteVariable})">
            <summary>
            Get autocomplete from all autocompleters that are already initialized
            </summary>
            <param name="pattern">text for search (like "System.Thr")</param>
            <param name="usings">list of usings (like "System", "System.Threading")</param>
            <param name="variables">list of allow variables to autocomplete</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleteProvider.RegisterCodeAutocompleters(OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleter[])">
            <summary>
            add code autocompleters but not init
            </summary>
            <param name="completers"></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleteProvider.RunInitTask">
            <summary>
            Run task with <see cref="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleteProvider.InitCodeAutocomletersThatNoInitialized"></see>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleter.Get(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.AutocompleteVariable})">
            <summary>
            Get autocomplete from all autocompleters that yet initialized
            </summary>
            <param name="pattern">text for search (like "System.Thr")</param>
            <param name="usings">list of usings (like "System", "System.Threading")</param>
            <param name="variables">list of allow variables to autocomplete</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CodeAutocomplete.ICodeAutocompleter.AutocompleterName">
            <summary>
            Unique name
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams">
            <summary>
            Object that represents information which is required for mass creation of processes
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.SchemeCode">
            <summary>
            Code of the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.SchemeCreationParameters">
            <summary>
            The parameters for creating scheme of process (defining parameters)
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.ProcessIds">
            <summary>
            List of process IDs to create
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.InitialProcessParameters">
            <summary>
            Parameters to be passed to the process as the initial. Common for all creted processes.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.ProcessSpecificProcessPrarameters">
            <summary>
            Process specific process parameters
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.#ctor(System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Constructor
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processIds">List of process IDs to create</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.IdentityId">
            <summary>
            The user id which execute initial command if command is available.  Common for all creted processes.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.ImpersonatedIdentityId">
            <summary>
            The user id for whom executes initial command if command is available.  Common for all creted processes.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.ProcessSpecificIdentityIds">
            <summary>
            The user id which execute initial command if command is available.  Process specific values
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams.ProcessSpecificImpersonatedIdentityIds">
            <summary>
            The user id for whom executes initial command if command is available. Process specific values
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:OptimaJet.Workflow.Core.Runtime.CancellationTokenHandling" -->
        <!-- Badly formed XML comment ignored for member "F:OptimaJet.Workflow.Core.Runtime.CancellationTokenHandling.Ignore" -->
        <!-- Badly formed XML comment ignored for member "F:OptimaJet.Workflow.Core.Runtime.CancellationTokenHandling.Throw" -->
        <member name="T:OptimaJet.Workflow.Core.Runtime.CommandExecutionResult">
            <summary>
            The result of command execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandExecutionResult.CommandName">
            <summary> Name of command which was executed </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandExecutionResult.WasExecuted">
            <summary> If true, the command was executed </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandExecutionResult.ProcessInstance">
            <summary> The process, after executing the command </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams">
            <summary>
             Represents parameters for creaition of an instance of a process
             </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.#ctor(System.String,System.Guid)">
            <summary>
            Constructor of CreateInstanceParams class
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.SchemeCode">
            <summary>
            Code of the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.ProcessId">
            <summary>
            Process id
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.IdentityId">
            <summary>
            The user id which execute initial command if command is available
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.ImpersonatedIdentityId">
            <summary>
            The user id for whom executes initial command if command is available
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.SchemeCreationParameters">
            <summary>
            The parameters for creating scheme of process (defining parameters)
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.InitialProcessParameters">
            <summary>
            Parameters to be passed to the process as the initial
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.TenantId">
            <summary>
            Tenant's identifier (if exist)
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.Persist">
            <summary>
            Names of persist parameters in <see cref="P:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.InitialProcessParameters"></see>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.AddPersistentParameter(System.String,System.Object)">
            <summary>
            Add new persistent initial process parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.CreateInstanceParams.AddTemporaryParameter(System.String,System.Object)">
            <summary>
            Add new temporary initial process parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs">
            <summary>
            Represent information about an activity which was planned to execute, contains ProcessInstance object
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.ProcessId">
            <summary>
            Id of the process whose current activity was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.IsSubprocess">
            <summary>
            If true means that the current activity was changed for subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.SchemeCode">
            <summary>
            Code of the scheme of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.ProcessInstance">
            <summary>
            Instance of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.ExecutedActivityName">
            <summary>
            Returns the name of executed activity.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.ExecutedActivityState">
            <summary>
            Returns the state name of executed activity.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.ExecutedActivity">
            <summary>
            Returns the executed activity.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.ExecutedTransition">
            <summary>
            Returns the executed transition.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.CurrentActivity">
            <summary>
            Returns the current activity. Activity which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.CurrentActivityName">
            <summary>
            Returns the name of current activity. Activity which was final for last executed transition <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.From"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.CurrentState">
            <summary>
            Returns the current state.
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.BeforeActivityExecutionEventArgs.#ctor(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Constructor
            </summary>
            <param name="processInstance">Instance of the process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ICustomActivityProvider.GetCustomActivities">
            <summary>
            Returns custom activities
            </summary>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.ResumeParams">
            <summary>
             Represents parameters for resume the process
             </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ResumeParams.#ctor(System.Guid,System.String)">
            <summary>
            Constructor of CreateInstanceParams class
            </summary>
            <param name="stateName">The name of the activity from which the process should be resumed</param>
            <param name="processId">Process id</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ResumeParams.ProcessId">
            <summary>
            Process id
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ResumeParams.IdentityId">
            <summary>
            The user id which execute operation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ResumeParams.ImpersonatedIdentityId">
            <summary>
            The user id for whom executes operation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ResumeParams.ActivityName">
            <summary>
            The name of the activity from which the process should be resumed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ResumeParams.ProcessParameters">
            <summary>
            Parameters to be passed to the process as the initial
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ResumeParams.Persist">
            <summary>
            Names of persist parameters in <see cref="P:OptimaJet.Workflow.Core.Runtime.ResumeParams.ProcessParameters"></see>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ResumeParams.AddPersistentParameter(System.String,System.Object)">
            <summary>
            Add new persistent initial process parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ResumeParams.AddTemporaryParameter(System.String,System.Object)">
            <summary>
            Add new temporary initial process parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.ResumeResult">
            <summary>
            The result of resume execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ResumeResult.WasResumed">
            <summary>
            If true, the resume was successful and the process changed it's state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ResumeResult.ProcessInstance">
            <summary>
            The process, after executing the resume
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.IDesignerParameterFormatProvider">
            <summary>
            Interface for parameter format provider (only for the Designer)
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IDesignerParameterFormatProvider.GetFormat(OptimaJet.Workflow.Core.Model.CodeActionType,System.String,System.String)">
            <summary>
            Returns parameter definitions for a specified code action
            </summary>
            <param name="type">Code action type <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionType"/></param>
            <param name="name">Name of the code action</param>
            <returns>A list of <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionParameterDefinition"/></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.EmptyWorkflowExternalParametersProvider">
            <summary>
            Empty external parameters provider
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.NeedTimerValueEventArgs">
            <summary>
            Event args for request timer value
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedTimerValueEventArgs.TimerValueRequest.Name">
            <summary>
            The Timer name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedTimerValueEventArgs.TimerValueRequest.Definition">
            <summary>
            The timer definition object
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedTimerValueEventArgs.TimerValueRequest.OriginalValue">
            <summary>
            The timer value that was specified in the scheme
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedTimerValueEventArgs.TimerValueRequest.NewValue">
            <summary>
            New value of the timer
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedTimerValueEventArgs.ProcessInstance">
            <summary>
            Instance of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedTimerValueEventArgs.ProcessId">
            <summary>
            Id of the process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.NeedTimerValueEventArgs.#ctor(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionDefinition})">
            <summary>
            Constructor
            </summary>
            <param name="processInstance">Instance of the process</param>
            <param name="timerTransitions">Timer triggered transitions</param>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Runtime.ParametersSerializer.Settings">
            <summary>
            Serializer setting for JSON serializer
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ParametersSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Provides access to Workflow Engine .NET Persistence Process Parameters serialization mechanism
            </summary>
            <param name="serializedValue">Serialized value</param>
            <param name="parameterType">Parameter type</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ParametersSerializer.Deserialize``1(System.String)">
            <summary>
            Provides access to Workflow Engine .NET Persistence Process Parameters serialization mechanism
            </summary>
            <param name="serializedValue">Serialized value</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ParametersSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Provides access to Workflow Engine .NET Persistence Process Parameters deserialization mechanism
            </summary>
            <param name="value">Parameter value</param>
            <param name="parameterType">Parameter type</param>
            <returns>Serialized string</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ParametersSerializer.Serialize(System.Object)">
            <summary>
            Provides access to Workflow Engine .NET Persistence Process Parameters deserialization mechanism
            </summary>
            <param name="value">Parameter value</param>
            <returns>Serialized string</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem">
            <summary>
            Represents a record of transition of process from one Activity to another
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.ProcessId">
            <summary>
            Id of a process instance
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.ActorIdentityId">
            <summary>
            An user id for whom a command was executed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.ExecutorName">
            <summary>
            An user id who executed a command
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.ActorName">
            <summary>
            An user name for whom a command was executed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.ExecutorIdentityId">
            <summary>
            An user name who executed a command
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.FromActivityName">
            <summary>
            Source activity name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.FromStateName">
            <summary>
            Source state name if the state name was specified in source activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.IsFinalised">
            <summary>
            If true specifies that process was finalized by this transition.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.ToActivityName">
            <summary>
            Destination activity name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.ToStateName">
            <summary>
            Source state name if the state name was specified in destination activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.TransitionClassifier">
            <summary>
            Classifier of a transition direction
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.TransitionTime">
            <summary>
            Time of an execution of transition
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.TriggerName">
            <summary>
            Name of a command or timer an execution of which led to an execution of transition
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.StartTransitionTime">
            <summary>
            Time of an start execution of transition
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessHistoryItem.TransitionDuration">
            <summary>
            Duration of an execution of transition in ms
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessRestoring.RestoreDecision.ProcessParameters">
            <summary>
            Parameters to be passed to the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessRestoring.RestoreDecision.Persist">
            <summary>
            Names of persist parameters in <see cref="P:OptimaJet.Workflow.Core.Runtime.ProcessRestoring.RestoreDecision.ProcessParameters"></see>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ProcessRestoring.RestoreDecision.AddPersistentParameter(System.String,System.Object)">
            <summary>
            Add new persistent process parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ProcessRestoring.RestoreDecision.AddTemporaryParameter(System.String,System.Object)">
            <summary>
            Add new temporary process parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.ProcessTimer">
            <summary>
            Timer of a process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessTimer.Name">
            <summary>
            Timer name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessTimer.NextExecutionDateTime">
            <summary>
            Next execution time of this timer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.SetStateParams">
            <summary>
             Represents parameters for creaition of an instance of a process
             </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.SetStateParams.#ctor(System.Guid,System.String)">
            <summary>
            Constructor of CreateInstanceParams class
            </summary>
            <param name="stateName">State name to set forcibly</param>
            <param name="processId">Process id</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SetStateParams.ProcessId">
            <summary>
            Process id
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SetStateParams.IdentityId">
            <summary>
            The user id which execute operation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SetStateParams.ImpersonatedIdentityId">
            <summary>
            The user id for whom executes operation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SetStateParams.StateName">
            <summary>
            State name to set forcibly
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SetStateParams.PreventExecution">
            <summary>
            Actions due to transition process do not executed if true
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SetStateParams.ProcessParameters">
            <summary>
            Parameters to be passed to the process as the initial
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SetStateParams.Persist">
            <summary>
            Names of persist parameters in <see cref="P:OptimaJet.Workflow.Core.Runtime.SetStateParams.ProcessParameters"></see>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.SetStateParams.AddPersistentParameter(System.String,System.Object)">
            <summary>
            Add new persistent initial process parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.SetStateParams.AddTemporaryParameter(System.String,System.Object)">
            <summary>
            Add new temporary initial process parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs">
            <summary>
            Represent information about case when we try to update a subprocess's scheme but there are no starting transition in a new sccheme of a root process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.ProcessId">
            <summary>
            Id of the process which scheme is impossible to update
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.RootProcessId">
            <summary>
            Id of the root process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.OldRootScheme">
            <summary>
            The old scheme of the root process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.NewRootScheme">
            <summary>
            The new scheme of the root process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.DropProcess">
            <summary>
            User decide to drop the subprocess
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.Ignore">
            <summary>
            User decide to ignore update of the scheme of the subprocess
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.StartWithNewTransition(System.String)">
            <summary>
            User decide to create the new scheme of the process starting from new transition
            </summary>
            <param name="transitionName"></param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.NewTransitionName">
            <summary>
            New starting transition name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.StartingTransitionNotFoundEventArgs.OldTransitionName">
            <summary>
            Old staring transition name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.ImmediateTimerValue">
            <summary>
            Value of Unspecified Timer which indicates that the timer transition will be executed immediately
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.InfinityTimerValue">
            <summary>
            Value of Unspecified Timer which indicates that the timer transition will be never executed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.DefaultWaitTimeout">
            <summary>
            Wait timeout for start/stop operations in milliseconds. Default value is 1000.
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.#ctor">
            <summary>
            Timer manager constructor
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.OnNeedTimerValue">
            <summary>
            Raises when the timer value must be obtained 
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.OnNeedTimerValueAsync">
            <summary>
            Raises when the timer value must be obtained 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.RequestTimerValueAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.ActivityDefinition)">
            <summary>
            Sends request for timer value for all timer transitions that are outgoing from the CurrentActivity if timer value is equal 0 or -1
            </summary>
            <param name="processInstance">Process instance</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.GetTransitionsForImmediateExecution(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.ActivityDefinition)">
            <summary>
            Returns transitions triggered by a timer which value is equal to 0
            </summary>
            <param name="processInstance">Process instance</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.SetTimerValue(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.DateTime)">
            <summary>
            Sets new value of named timer
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="timerName">Timer name in Scheme</param>
            <param name="newValue">New value of the timer</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.SetTimerValue(System.Guid,System.String,System.DateTime)">
            <summary>
            Sets new value of named timer
            </summary>
            <param name="processId">Process id</param>
            <param name="timerName">Timer name in Scheme</param>
            <param name="newValue">New value of the timer</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.ResetTimerValue(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Resets value of named timer
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="timerName">Timer name in Scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.ResetTimerValue(System.Guid,System.String)">
            <summary>
            Resets value of named timer
            </summary>
            <param name="processId">Process id</param>
            <param name="timerName">Timer name in Scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.RegisterTimersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Register all timers for all outgouing timer transitions for current actvity of the specified process.
            All timers registered before which are present in transitions will be rewrited except timers marked as NotOverrideIfExists <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be registered</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.ClearAndRegisterTimersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Clear timers <see cref="!:ClearTimers"/> and then register new timers <see cref="!:RegisterTimers"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be cleared an registered</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.ClearTimersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Clear all registered timers except present in outgoing timer transitions for current activity of the specified process and marked as NotOverrideIfExists <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be cleared</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.Timers.TimerManagerBase.Refresh">
            <summary>
            Refresh interval of the timer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.BulkOperationOptions">
            <summary>
            Auxiliary parameters that configure bulk operations.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.BulkOperationOptions.MaxDegreeOfParallelism">
            <summary>
            Maximum parallelization of subprocess execution.
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeBulkApi">
            <summary>
            Runtime API for bulk operations
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeBulkApi.BulkCreateInstance(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams,OptimaJet.Workflow.Core.Runtime.BulkOperationOptions)">
            <summary>
            Creates and initializes multiple process instances
            </summary>
            <param name="runtime">Instance of workflow runtime</param>
            <param name="createInstanceParameters">BulkCreateInstancePrams objects</param>
            <param name="options">Auxiliary parameters that configure bulk operations</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeBulkApi.BulkCreateInstance(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Collections.Generic.List{OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams},OptimaJet.Workflow.Core.Runtime.BulkOperationOptions)">
            <summary>
            Creates and initializes multiple process instances
            </summary>
            <param name="runtime">Instance of workflow runtime</param>
            <param name="createInstanceParameters">List of BulkCreateInstancePrams objects</param>
            <param name="options">Auxiliary parameters that configure bulk operations</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeBulkApi.BulkCreateInstanceAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams,OptimaJet.Workflow.Core.Runtime.BulkOperationOptions)">
            <summary>
            Creates and initializes multiple process instances (Async version)
            </summary>
            <param name="runtime">Instance of workflow runtime</param>
            <param name="createInstanceParameters">BulkCreateInstancePrams objects</param>
            <param name="options">Auxiliary parameters that configure bulk operations</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeBulkApi.BulkCreateInstanceAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Collections.Generic.List{OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams},OptimaJet.Workflow.Core.Runtime.BulkOperationOptions)">
            <summary>
            Creates and initializes multiple process instances (Async version)
            </summary>
            <param name="runtime">Instance of workflow runtime</param>
            <param name="createInstanceParameters">List of BulkCreateInstancePrams objects</param>
            <param name="options">Auxiliary parameters that configure bulk operations</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeBulkApi.BulkCreateInstanceAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams,System.Threading.CancellationToken,OptimaJet.Workflow.Core.Runtime.BulkOperationOptions)">
            <summary>
            Creates and initializes multiple process instances (Async version)
            </summary>
            <param name="runtime">Instance of workflow runtime</param>
            <param name="createInstanceParameters">BulkCreateInstancePrams objects</param>
            <param name="options">Auxiliary parameters that configure bulk operations</param>
            <param name="token">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeBulkApi.BulkCreateInstanceAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Collections.Generic.List{OptimaJet.Workflow.Core.Runtime.BulkCreateInstancePrams},System.Threading.CancellationToken,OptimaJet.Workflow.Core.Runtime.BulkOperationOptions)">
            <summary>
            Creates and initializes multiple process instances (Async version)
            </summary>
            <param name="runtime">Instance of workflow runtime</param>
            <param name="createInstanceParameters">List of BulkCreateInstancePrams objects</param>
            <param name="token">Cancellation token</param>
            <param name="options">Auxiliary parameters that configure bulk operations</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi">
            <summary>
            Workflow Runtime API extension for GetActors methods
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForAllCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command for specified process activity (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForDirectCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound with direct transitions (by transition classifier) for specified process activity (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForDirectAndUndefinedCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct or undefined transitions (by transition classifier) for specified process activity (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param> 
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForReverseCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith reverse transitions (by transition classifier) for specified process activity (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter (by transition classifier) for specified process activity Async
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="token">Cancellation token</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter (by transition classifier)
            for executed activity (inside of a transitional process) or for current activity (when a process is idled). (async version)
            Using of this method is preferable for notification of users which can execute next commands.
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processInstance">Process instance</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter. This method is prefearable to use when you are using subprocesses (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="filter">Sets the current process and the method of searching in the Process Instances tree</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForAllCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForDirectCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct transitions (by transition classifier) for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForDirectAndUndefinedCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct or undefined transitions (by transition classifier) for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param> 
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForReverseCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith reverse transitions (by transition classifier) for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter (by transition classifier) for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier})">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter (by transition classifier)
            for executed activity (inside of a transitional process) or for current activity (when a process is idled).
            Using of this method is preferable for notification of users which can execute next commands.
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processInstance">Process instance</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsApi.GetAllActorsForCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier})">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter. This method is prefearable to use when you are using subprocesses
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="filter">Sets the current process and the method of searching in the Process Instances tree</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <returns>List of user ids</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi">
            <summary>
            Workflow Runtime API extension for GetActors methods
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForAllCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command for specified process activity (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForDirectCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound with direct transitions (by transition classifier) for specified process activity (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForDirectAndUndefinedCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct or undefined transitions (by transition classifier) for specified process activity (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param> 
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForReverseCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith reverse transitions (by transition classifier) for specified process activity (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter (by transition classifier) for specified process activity Async
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="token">Cancellation token</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter (by transition classifier)
            for executed activity (inside of a transitional process) or for current activity (when a process is idled). (async version)
            Using of this method is preferable for notification of users which can execute next commands.
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processInstance">Process instance</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForCommandTransitionsAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Threading.CancellationToken)">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter. This method is prefearable to use when you are using subprocesses (async version)
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="filter">Sets the current process and the method of searching in the Process Instances tree</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForAllCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForDirectCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct transitions (by transition classifier) for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForDirectAndUndefinedCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith direct or undefined transitions (by transition classifier) for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param> 
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForReverseCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith reverse transitions (by transition classifier) for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Guid,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Boolean,System.String)">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter (by transition classifier) for specified process activity
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processId">Process id</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="beginningWithRoot">If true the list of actors will be obtained from the root process, even if you passed Id of the subprocess</param>
            <param name="activityName">Activity name in which transitions are checked. Current activity if null.</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier})">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter (by transition classifier)
            for executed activity (inside of a transitional process) or for current activity (when a process is idled).
            Using of this method is preferable for notification of users which can execute next commands.
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processInstance">Process instance</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeGetActorsWithCommandsApi.GetAllActorsWithCommandsForCommandTransitions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier})">
            <summary>
            Get the list of user ids which can execute any command bound whith a transitions selected by filter. This method is prefearable to use when you are using subprocesses
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="filter">Sets the current process and the method of searching in the Process Instances tree</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <returns>List of user ids</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.ExecutionSearchOrder">
            <summary>
            The order of the Action, Condition, or Rule search by name
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.IsAutoUpdateSchemeBeforeGetAvailableCommands">
            <summary>
            Allow automatic schema of a process update before getting the commands list if its allowed in current activity
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.SchemeParsingCulture">
            <summary>
            Culture for parsing some text parameters from scheme. Default is InvariantCulture
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.UseUtcDateTimeAsRuntimeTime">
            <summary>
            Runtime use Utc date and time if true and Local date and time if false
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.CancellationTokenHandling">
            <summary>
            The way of handling <see cref="T:System.Threading.CancellationToken"/> after activity execution
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.IgnoreMissingExecutionItems">
            <summary>
            If you are sure that your schemes do not mention nonexistent Actions, Conditions or Rules, do not use this setting. This setting is only for resolving possible compatibility issues and can be removed.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.PersistenceProviderQueryRetries">
            <summary>
            The number of retries of query that allow retry
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.PersistenceProviderQueryRetryDelay">
            <summary>
            The delay between retries
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.MaxNumberOfPerformedActivities">
            <summary>
            Max number of activities that can be executed. Use this to protect your application from infinite loops. Any value less than 1 means unlimited. Unlimited by default.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.LicenseSemaphoreTimeout">
            <summary>
            This settings work only for licenses with thread limit
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.ParentProcessIdledWaitTimeout">
            <summary>
            Timeout of waiting for unblocking (status = not Running) of the root process.
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings.#ctor">
            <summary>
            Default runtime settings
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ActorsApi.GetActorsWithCommandsAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Threading.CancellationToken)">
            <summary>
            Get the information about actors which can execute any command bound with a transitions selected by filter (by transition classifier)
            for executed activity (inside of a transitional process) or for current activity (when a process is idled).
            Using of this method is preferable for notification of users which can execute next commands.
            </summary>
            <param name="runtime">Workflow runtime instance</param>
            <param name="processInstance">Process instance</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ActorsApi.GetActorsWithCommandsAsync(OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TransitionClassifier},System.Threading.CancellationToken)">
            <summary>
            Get the information about actors which can execute any command bound with a transitions selected by filter.
            This method is preferable to use when you are using subprocesses.
            </summary>
            <param name="filter">Sets the current process and the method of searching in the Process Instances tree</param>
            <param name="classifiers">Filter for transitions by transition classifier</param>
            <param name="token">Cancellation token</param>
            <returns>List of user ids</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.AssignmentApi.GetAssignmentsAsync(OptimaJet.Workflow.Core.Model.AssignmentFilter,OptimaJet.Workflow.Core.Persistence.Paging,System.Collections.Generic.List{System.ValueTuple{System.String,OptimaJet.Workflow.Core.Persistence.SortDirection}})">
            <summary>
            Get a list of assignments by <see cref="T:OptimaJet.Workflow.Core.Model.AssignmentFilter"/> with sorting and paging 
            </summary>
            <param name="filter"><see cref="T:OptimaJet.Workflow.Core.Model.AssignmentFilter"/></param>
            <param name="paging"><see cref="T:OptimaJet.Workflow.Core.Persistence.Paging"/></param>
            <param name="orderParameters">List of order parameters</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.AssignmentApi.GetAssignmentStatuses">
            <summary>
            Get a list of assignment statuses
            </summary>
            <returns>List of assignment statuses</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.AssignmentApi.UpdateAssignmentAsync(OptimaJet.Workflow.Core.Model.Assignment)">
            <summary>
            Updating assignment with process resuming
            </summary>
            <param name="assignment"> <see cref="T:OptimaJet.Workflow.Core.Model.Assignment"/> for updating </param>
            <returns>Was resumed</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.AssignmentApi.CreateAssignmentAsync(System.Guid,OptimaJet.Workflow.Core.Model.AssignmentCreationForm)">
            <summary>
            Creating assignment from <see cref="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm"/> with process resuming
            </summary>
            <param name="processId">Process id</param>
            <param name="assignmentCreationForm"><see cref="T:OptimaJet.Workflow.Core.Model.AssignmentCreationForm"/></param>
            <returns>Was resumed</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.AssignmentApi.DeleteAssignmentAsync(System.Guid)">
            <summary>
            Deleting without saving in the database by assignmentId with process resuming
            </summary>
            <param name="assignmentId">Assignment id</param>
            <returns>Was resumed</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.AssignmentApi.DeleteAssignmentAsync(System.Guid,System.Guid)">
            <summary>
            Deleting without saving in the database with process resuming
            </summary>
            <param name="processId">Process id</param>
            <param name="assignmentId">Assignment id</param>
            <returns>Was resumed</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.OfflineApi.GetApprovalMapAsync(OptimaJet.Workflow.Core.Model.ProcessDefinition,System.Func{OptimaJet.Workflow.Core.Model.TransitionDefinition,System.Threading.Tasks.Task{System.Boolean}},System.Boolean)">
            <summary> Get map of possible approval by process scheme </summary>
            <param name="scheme"></param>
            <param name="predicate"> Additional validation for each transition </param>
            <param name="ignoreSubprocesses"> Ignore or not subprocesses on mapping </param>
            <returns> Collection of activity (<see cref="T:OptimaJet.Workflow.Core.Model.ApprovalMap.ActivityDto"/>) and his transition (<see cref="T:OptimaJet.Workflow.Core.Model.ApprovalMap.TransitionDto"/>) in another activity </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.OfflineApi.GetApprovalMapAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary> Get map of possible approval by ProcessInstance for identity Id </summary>
            <param name="pi"> Process Instance </param>
            <param name="identityId"> User id </param>
            <returns> Collection of activity (<see cref="T:OptimaJet.Workflow.Core.Model.ApprovalMap.ActivityDto"/>) and his transition (<see cref="T:OptimaJet.Workflow.Core.Model.ApprovalMap.TransitionDto"/>) in another activity for <paramref name="identityId"/> </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.OfflineApi.ExecuteSomeCommandsAsync(System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Model.ApprovalMap.Command})">
            <summary> Try to execute several commands grouped by processId and sorted by DateTime </summary>
            <param name="commands"> Collection command for execute. In parameter ProcessId of <see cref="T:OptimaJet.Workflow.Core.Model.ApprovalMap.Command"/> is required for success execution </param>
            <returns> Result of execution for each command in some order like input commands </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.OfflineApi.ExecuteSomeCommandsAsync(System.Guid,System.Collections.Generic.IEnumerable{OptimaJet.Workflow.Core.Model.ApprovalMap.Command})">
            <summary> Try to execute several commands of one process sorted by DateTime </summary>
            <param name="processId"> Id of <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/> for which the commands are executed </param>
            <param name="commands"> Collection command for execute. In this method parameter ProcessId of <see cref="T:OptimaJet.Workflow.Core.Model.ApprovalMap.Command"/> is ignored </param>
            <returns> Result of execution for each command in some order like input commands </returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime">
            <summary>
            Provides main API to operations with workflow processes
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.#ctor(System.Guid)">
            <summary>
            Creates the WFE runtime object
            </summary>
            <param name="runtimeId">Id of the runtime (reserved for further extension)</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.#ctor(System.String)">
            <summary>
            Creates the WFE runtime object
            </summary>
            <param name="runtimeId">Id of the runtime (reserved for further extension)</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.#ctor">
            <summary>
            Creates the WFE runtime object
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Plugins">
            <summary>
            All registered plugins
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CustomActivities">
            <summary>
            All custom activities
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Id">
            <summary>
            Runtime identifier
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DesignerAutocompleteProvider">
            <summary>
            Instance of the autocomplete provider (only for the Designer) <see cref="T:OptimaJet.Workflow.Core.Runtime.IDesignerAutocompleteProvider"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CodeAutocompleteProvider">
            <summary>
            Auto initialize by <see cref="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CodeAutocompleteProvider"></see>. Use setter to use custom implementation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DesignerParameterFormatProvider">
            <summary>
            Instance of the parameter format provider (only for the Designer) <see cref="T:OptimaJet.Workflow.Core.Runtime.IDesignerParameterFormatProvider"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.RuleProvider">
            <summary>
            Instance of the Workflow rule provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Builder">
            <summary>
            Instance of the Workflow builder <see cref="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.TimerManager">
            <summary>
            Instance of the Timer manager <see cref="T:OptimaJet.Workflow.Core.Runtime.ITimerManager"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PersistenceProvider">
            <summary>
            Instance of the Persistence provider <see cref="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ActionProvider">
            <summary>
            Instance of the Action provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExternalParametersProvider">
            <summary>
            Instance of the External parameters provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowExternalParametersProvider"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.RuntimeDateTimeNow">
            <summary>
            Get date and time which used by runtime
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsCold">
            <summary>
            Runtime in cold start state if true
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CancellationTokenHandling" -->
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.StartInternalAsync(System.Boolean)">
            <summary>
            Start all workflow runtime services аnd compile global code actions
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ColdStartInternalAsync(System.Boolean)">
            <summary>
            Start all workflow runtime services except timers
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CodeActionsCompillationEnable">
            <summary>
            Default value is true. Enable compillation for Code Actions <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/> 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CodeActionsDebugMode">
            <summary>
            Default value is false. Enable debug in code action. You can put a brekpoint  by <see cref="M:System.Diagnostics.Debugger.Break"/> or /*break*/ in a code action's code
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CodeActionsRegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Register assembly in <see cref="T:OptimaJet.Workflow.Core.CodeActions.CodeActionsCompiller"/> as referenced assembly
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GlobalActionsInvoker">
            <summary>
            Invoker which calls the global Code Actions 
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GlobalCodeActionsCompiled">
            <summary>
            Raises after global Code Actions compilation
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.LastGlobalActionsCompilationTime">
            <summary>
            Time of the last global Code Actions compilation
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CompileGlobalCodeActionsAsync(System.Boolean)">
            <summary>
            Compiles global Code Actions
            </summary>
            <param name="ignoreNotCompiled">if true all compillation errors in the global codeactions will be ignored</param>
            <param name="compilerErrors">compiler errors</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CompileGlobalCodeActionsAsync(System.Boolean,System.Boolean)">
            <summary>
            Compiles global Code Actions
            </summary>
            <param name="ignoreNotCompiled">if true all compillation errors in the global codeactions will be ignored</param>
            <param name="compilerErrors">compiler errors</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.RegisterLicense(System.String)">
            <summary>
            Register the license to remove license restrictions
            </summary>
            <param name="licenseText">License text</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CheckAllSubprocessesCompletedAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Checks that all subprocesses was completed
            </summary>
            <param name="processInstance">ProcessInstance for check</param>
            <returns>true - if there are no active suprocesses</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CheckAllSubprocessesAndParentProcessCompletedAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Check that all subprocesses and the parent process reach the same point (completed)
            </summary>
            <param name="processInstance"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeleteAllSubprocessesAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Delete all subprocesses for process
            </summary>
            <param name="processInstance"></param>
            <returns>Count of deleted subprocesses</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetPersistentProcessParameterAsync(System.Guid,System.String,System.Object)">
            <summary>
            Set single persistent parameter in the process(async)
            </summary>
            <param name="processId">>Process id</param>
            <param name="parameterName">Parameter name</param>
            <param name="parameterValue">Parameter value</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessTimersAsync(System.Guid)">
            <summary>
            Returns list of timers for a process
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetTimerValueAsync(System.Guid,System.String,System.DateTime)">
            <summary>
            Sets new value of named timer (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="timerName">Timer name in Scheme</param>
            <param name="newValue">New value of the timer</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ResetTimerValueAsync(System.Guid,System.String)">
            <summary>
            Resets value of named timer (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="timerName">Timer name in Scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessStatusAsync(System.Guid)">
            <summary>
            Get status of specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ShutdownAsync(System.Int32)">
            <summary>
            Switches off the runtime. Switches off API, waits for API calls to be completed. Switches off all timers.
            IMPORTANT! Call this method from the ASYNCHRONOUS method only.
            </summary>
            <param name="timeout">Shutdown timeout</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Globalization.CultureInfo,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user (async version)
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="commandNameFilter">Selects only the specified command if not null</param>
            <param name="mainIdentityId">User id for priority check of rules</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <param name="conditionCheck">If true then commands with failed condition checkes will be excluded</param>
            <param name="token">Cancellation token</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>s>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user (async version)
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Globalization.CultureInfo,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="commandNameFilter">Selects only the specified command if not null</param>
            <param name="mainIdentityId">User id for priority check of rules</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <param name="conditionCheck">If true then commands with failed condition checkes will be excluded</param>
            <param name="token">Cancellation token</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsAsync(System.Guid,System.String)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsAsync(System.Guid,System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExecuteCommandAsync(OptimaJet.Workflow.Core.Runtime.WorkflowCommand,System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Execute specified command for specified users (async version)
            </summary>
            <param name="command">Command to execute</param>
            <param name="identityId">The user id which execute command</param>
            <param name="impersonatedIdentityId">The user id for whom executes command (impersonation)</param>
            <param name="token">Cancellation token</param>
            <param name="checkRestrictions">If true then actor restriction check will be performed for every transition</param>
            <returns>Result of the execution</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExecuteCommandWithRestrictionCheckAsync(OptimaJet.Workflow.Core.Runtime.WorkflowCommand,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Execute specified command for specified users (async version) with actor restrictions check 
            </summary>
            <param name="command">Command to execute</param>
            <param name="identityId">The user id which execute command</param>
            <param name="impersonatedIdentityId">The user id for whom executes command (impersonation)</param>
            <param name="token">Cancellation token</param>
            <returns>Result of the execution</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExecuteCommandAsync(System.Guid,System.String,System.String,OptimaJet.Workflow.Core.Runtime.WorkflowCommand)">
            <summary>
            Execute specified command for specified users (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute command</param>
            <param name="impersonatedIdentityId">The user id for whom executes command (impersonation)</param>
            <param name="command">Command to execute</param>
            <returns>Result of the execution</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommandsAsync(System.String,System.String)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified user (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommandsAsync(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified user (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommandsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified users (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="processParameters">Parameters for creating scheme of process</param>
            <param name="commandNameFilter">Selects only the specified command if not null </param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedCommandNameAsync(System.Guid,System.String)">
            <summary>
            Get localized command name for specified process in current culture (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="commandName">Command name to localize</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedCommandNameBySchemeIdAsync(System.Guid,System.String)">
            <summary>
            Get localized command name for specified scheme in current culture (async version)
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="commandName">Command name to localize</param>
            <returns>Localized command name</returns>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnNeedDeterminingParameters">
            <summary>
            Raises when runtime need to obtain parameters for creating the scheme of the process
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnSchemaWasChanged">
            <summary>
            Raises when the scheme of the process was changed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnWorkflowError">
            <summary>
            Raises when workflow error occurred
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnStartingTransitionNotFound">
            <summary>
            Raises when runtime can not find starting transition of a subprocess in a new root scheme
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ProcessActivityChanged">
            <summary>
            Raises when current activity of a process was changed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnProcessActivityChanged">
            <summary>
            Raises when current activity of a process was changed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.BeforeActivityExecution">
            <summary>
            Raises before execution of choosen activity
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnBeforeActivityExecution">
            <summary>
            Raises before execution of choosen activity
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.NeedTimerValue">
            <summary>
            Raises when the timer value must be obtained 
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnNeedTimerValue">
            <summary>
            Raises when the timer value must be obtained 
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ProcessStatusChanged">
            <summary>
            Raises when the status of the procees <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/> was changed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnProcessStatusChanged">
            <summary>
            Raises when the status of the procees <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/> was changed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnNeedDeterminingParametersAsync">
            <summary>
            Raises when runtime need to obtain parameters for creating the scheme of the process
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnSchemaWasChangedAsync">
            <summary>
            Raises when the scheme of the process was changed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnWorkflowErrorAsync">
            <summary>
            Raises when workflow error occurred
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnStartingTransitionNotFoundAsync">
            <summary>
            Raises when runtime can not find starting transition of a subprocess in a new root scheme
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnProcessActivityChangedAsync">
            <summary>
            Raises when current activity of a process was changed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnBeforeActivityExecutionAsync">
            <summary>
            Raises before execution of choosen activity
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnProcessStatusChangedAsync">
            <summary>
            Raises when the status of the procees <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/> was changed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnNeedTimerValueAsync">
            <summary>
            Raises when the timer value must be obtained 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstanceAsync(System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Create instance of process (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="token">Cancellation token</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstanceAsync(System.String,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create instance of process (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute initial command if command is available</param>
            <param name="impersonatedIdentityId">The user id for whom executes initial command if command is available</param>
            <param name="token">Cancellation token</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstanceAsync(System.String,System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Create instance of process (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="schemeCreationParameters">The parameters for creating scheme of process</param>
            <param name="token">Cancellation token</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstanceAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Create instance of process (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute initial command if command is available</param>
            <param name="impersonatedIdentityId">The user id for whom executes initial command if command is available</param>
            <param name="schemeCreationParameters">The parameters for creating scheme of process</param>
            <param name="token">Cancellation token</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstanceAsync(OptimaJet.Workflow.Core.Runtime.CreateInstanceParams,System.Threading.CancellationToken)">
            <summary>
            Create instance of the process (async version)
            </summary>
            <param name="createInstanceParams">Parameters for creation of an instance of a process</param>
            <param name="token">Cancellation token</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeleteInstanceAsync(System.Guid)">
            <summary>
            Delete instance of the process and all child subprocesses.  (async version)
            </summary>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsProcessExistsAsync(System.Guid)">
            <summary>
            Check existence of the specified process 
            </summary>
            <param name="processId">Process id</param>
            <returns>True if process with specified identifier is exists</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeleteInstanceAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Delete instance of the process and all child subprocesses. (Async version)
            </summary>
            <param name="processInstance">Instance to delete</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeleteInstanceDuringRestoreAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Delete instance of the process and all child subprocesses. (Async version)
            </summary>
            <param name="processInstance">Instance to delete</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstancesTreeAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Returns process instance tree (root process and subprocesses) (Async version)
            </summary>
            <param name="rootProcessId">Root process id</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>ProcessInstancesTree object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstancesTreeAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Threading.CancellationToken)">
            <summary>
            Returns process instance tree (root process and subprocesses)  (Async version)
            </summary>
            <param name="processInstance">ProcessInstance for which tree is builds</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>ProcessInstancesTree object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstanceAndFillProcessParametersAsync(System.Guid)">
            <summary>
            Get process instance with all parameters for specified process id (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessHistoryAsync(System.Guid,OptimaJet.Workflow.Core.Persistence.Paging)">
            <summary>
            Returns the history of process (async version)
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessHistoryCountAsync(System.Guid)">
            <summary>
            Returns count of process history (async version)
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Logger">
            <summary> Instance of the logger <see cref="T:OptimaJet.Workflow.Core.Logging.ILogger"/> </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.LogInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Writes a message to the log with Info level </summary>
            <param name="message">message to write</param>
            <param name="parameters">dictionary of properties to serialize within the log entry</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.LogInfoIfLoggerExists(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Writes a message to the log with Info level if <see cref="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Logger"/> is defined </summary>
            <param name="message">message to write</param>
            <param name="parameters">dictionary of properties to serialize within the log entry</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.LogDebug(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Writes a message to the log with Debug level </summary>
            <param name="message">message to write</param>
            <param name="parameters">dictionary of properties to serialize within the log entry</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.LogDebugIfLoggerExists(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Writes a message to the log with Debug level if <see cref="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Logger"/> is defined </summary>
            <param name="message">message to write</param>
            <param name="parameters">dictionary of properties to serialize within the log entry</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.LogError(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Writes a message to the log with Error level </summary>
            <param name="message">message to write</param>
            <param name="parameters">dictionary of properties to serialize within the log entry</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.LogErrorIfLoggerExists(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Writes a message to the log with Error level if <see cref="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Logger"/> is defined </summary>
            <param name="message">message to write</param>
            <param name="parameters">dictionary of properties to serialize within the log entry</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteFromInitialActivityAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Pre-execution from initial activity of the process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
            <param name="token">Cancellation token</param>
            <returns>List of activities which will presumably be executed </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteFromCurrentActivityAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Pre-execution from current activity of the process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
            <param name="token">Cancellation token</param>
            <returns>List of activities which will presumably be executed </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteAsync(System.Guid,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Pre-execution from specified activity of the process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="fromActivityName">Activity name which begins pre-execution</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
            <param name="token">Cancellation token</param>
            <returns>List of activities which will presumably be executed </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetSchemeCodesAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Returns the list of scheme codes into which the scheme with the given tags. If tags are null returns all scheme codes.
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetSchemeIsObsoleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set flag IsObsolete for all schemas of process with specific code and parameters (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetSchemeIsObsoleteAsync(System.String)">
            <summary>
            Set flag IsObsolete for all schemas of process with specific code (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.UpdateSchemeIfObsoleteAsync(System.Guid)">
            <summary>
            Updating scheme of specific process 
            </summary>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.UpdateSchemeIfObsoleteAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Updating scheme of specific process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="parameters">Parameters for creating scheme of process</param>
            <param name="ignoreAutoSchemeUpdate">If true the attribute of Activity - IsAutoScheme update will be ignored.</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessSchemeAsync(System.Guid)">
            <summary>
            Get procees definition (parsed scheme) for specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(System.Guid)">
            <summary>
            Get the list of all states which available for set of specified process localized in current culture (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(System.Guid,System.Globalization.CultureInfo)">
            <summary>
            Get the list of all states which available for set of specified process localized in specified culture (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="culture">Culture to localize state names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Get the list of all states which available for set of specified process localized in current culture (async version)
            </summary>
            <param name="processInstance">Process instance</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Globalization.CultureInfo)">
            <summary>
            Get the list of all states which available for set of specified process localized in specified culture (async version)
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="culture">Culture to localize state names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the list of all states which available for set of specified scheme in current culture (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns >List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSetAsync(System.String,System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the list of all states which available for set of specified scheme in specified culture (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="culture">Culture to localize state names</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetStateAsync(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Set specified state for specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which set the state</param>
            <param name="impersonatedIdentityId">The user id for whom sets the state (impersonation)</param>
            <param name="stateName">State name to set</param>
            <param name="parameters">Dictionary of ProcessInstance parameters which transferred to executed actions</param>
            <param name="preventExecution">Actions due to transition process do not executed if true</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetStateAsync(OptimaJet.Workflow.Core.Runtime.SetStateParams)">
            <summary>
            Set specified state for specified process (async version)
            </summary>
            <param name="setStateParams">Parameters of setting state<see cref="T:OptimaJet.Workflow.Core.Runtime.SetStateParams"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetActivityWithoutExecutionAsync(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Boolean)">
            <summary>
            Set specified activity as current without execution of the implementation of the activity (Async version)
            </summary>
            <param name="activityToSet">Activity to set</param>
            <param name="processInstance">Process instance for set activity as current</param>
            <param name="doNotSetRunningStatus">The status of the process - <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running"/> will not be set if true</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetActivityWithExecutionAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set specified activity as current and executing the implementation of the activity (Async version)
            </summary>
            <param name="identityId">The user id which set the activity</param>
            <param name="impersonatedIdentityId">The user id for whom sets the activity (impersonation)</param>
            <param name="parameters">Dictionary of ProcessInstance parameters which transferred to executed actions</param>
            <param name="activityToSet">Activity to set</param>
            <param name="processInstance">Process instance for set activity as current</param>
            <param name="doNotSetRunningStatus">The status of the process - <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running"/> will not be set if true</param>
            <param name="token">Cancellation token</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ResumeAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Resumes the process from the current activity. In this case, the activity itself is not executed, and the process goes on if it can.
            </summary>
            <param name="processId"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ResumeAsync(OptimaJet.Workflow.Core.Runtime.ResumeParams,System.Threading.CancellationToken)">
            <summary>
            Resumes the process from the current or specific activity. In this case, the activity itself is not executed, and the process goes on if it can.
            </summary>
            <param name="resumeParams"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameBySchemeIdAsync(System.Guid,System.String)">
            <summary>
            Get localized state name for specified scheme in current culture (async version)
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="stateName">State name to localize</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameAsync(System.Guid,System.String)">
            <summary>
            Get localized state name for specified process in current culture (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="stateName">State name to localize</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameBySchemeCodeAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get localized state name for specified scheme in current culture (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="stateName">State name to localize</param>
            <param name="parameters">The parameters for creating </param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentStateNameAsync(System.Guid)">
            <summary>
            Return the current state name of specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns>Name of current state</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentActivityNameAsync(System.Guid)">
            <summary>
            Return the current activity name of specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <returns>Current activity name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentStateAsync(System.Guid,System.Globalization.CultureInfo)">
            <summary>
            Return the current state of specified process (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="culture">Culture to localize state name</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialStateAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Globalization.CultureInfo)">
            <summary>
            Return the initial state for process scheme (async version)
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processParameters">Parameters for creating scheme of process</param>
            <param name="culture">Culture to localize state name</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.IsProcessExists(System.Guid)">
            <summary>
            Check existence of the specified process 
            </summary>
            <param name="processId">Process id</param>
            <returns>True if process with specified identifier is exists</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstance(System.String,System.Guid)">
            <summary>
            Create instance of process.
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstance(System.String,System.Guid,System.String,System.String)">
            <summary>
            Create instance of process.
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute initial command if command is available</param>
            <param name="impersonatedIdentityId">The user id for whom executes initial command if command is available</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstance(System.String,System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create instance of process.
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="schemeCreationParameters">Parameters for creating the scheme of the process (defining parameters)</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstance(System.String,System.Guid,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create instance of the process.
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute initial command if command is available</param>
            <param name="impersonatedIdentityId">The user id for whom executes initial command if command is available</param>
            <param name="schemeCreationParameters">The parameters for creating scheme of process (defining parameters)</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CreateInstance(OptimaJet.Workflow.Core.Runtime.CreateInstanceParams)">
            <summary>
            Create instance of the process.
            </summary>
            <param name="createInstanceParams">Parameters for creaition of an instance of a process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeleteInstance(System.Guid)">
            <summary>
            Delete instance of the process and all child subprocesses.
            </summary>
            <param name="processId">Process id</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeleteInstance(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Delete instance of the process and all child subprocesses.
            </summary>
            <param name="processInstance">Instance to delete</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstancesTree(System.Guid)">
            <summary>
            Returns process instance tree (root process and subprocesses)
            </summary>
            <param name="rootProcessId">Root process id</param>
            <returns>ProcessInstancesTree object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstancesTree(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Returns process instance tree (root process and subprocesses)
            </summary>
            <param name="processInstance">ProcessInstance for which tree is builds</param>
            <returns>ProcessInstancesTree object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CheckAllSubprocessesCompleted(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Checks that all subprocesses was completed
            </summary>
            <param name="processInstance">ProcessInstance for check</param>
            <returns>true - if there are no active suprocesses</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.CheckAllSubprocessesAndParentProcessCompleted(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Check that all subprocesses and the parent process reach the same point (completed)
            </summary>
            <param name="processInstance"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.DeleteAllSubprocesses(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Delete all subprocesses for process
            </summary>
            <param name="processInstance"></param>
            <returns>Count of deleted subprocesses</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetSchemeIsObsolete(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set flag IsObsolete for all schemas of process with specific code and parameters
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetSchemeIsObsolete(System.String)">
            <summary>
            Set flag IsObsolete for all schemas of process with specific code
            </summary>
            <param name="schemeCode">Code of the scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetTimerValue(System.Guid,System.String,System.DateTime)">
            <summary>
            Sets new value of named timer. Use this method outside of your process. 
            </summary>
            <param name="processId">Process id</param>
            <param name="timerName">Timer name in Scheme</param>
            <param name="newValue">New value of the timer</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetTimerValue(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.DateTime)">
            <summary>
            Sets new value of named timer.  Use this method inside of your process (in actions). 
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="timerName">Timer name in Scheme</param>
            <param name="newValue">New value of the timer</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ResetTimerValue(System.Guid,System.String)">
            <summary>
            Resets value of named timer.  Use this method outside of your process. 
            </summary>
            <param name="processId">Process id</param>
            <param name="timerName">Timer name in Scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ResetTimerValue(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Resets value of named timer. Use this method inside of your process (in actions). 
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="timerName">Timer name in Scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.UpdateSchemeIfObsolete(System.Guid,System.Boolean)">
            <summary>
            Updating scheme of specific process 
            </summary>
            <param name="processId">Process id</param>
            <param name="ignoreAutoSchemeUpdate">If true the attribute of Activity - IsAutoScheme update will be ignored.</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.UpdateSchemeIfObsolete(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Updating scheme of specific process 
            </summary>
            <param name="processId">The process id</param>
            <param name="parameters">Parameters for creating scheme of process</param>
            <param name="ignoreAutoSchemeUpdate">If true the attribute of Activity - IsAutoScheme update will be ignored.</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteFromInitialActivity(System.Guid,System.Boolean)">
            <summary>
            Pre-execution from initial activity of the process
            </summary>
            <param name="processId">The process id</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
            <returns>List of activities which will presumably be executed </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecuteFromCurrentActivity(System.Guid,System.Boolean)">
            <summary>
            Pre-execution from current activity of the process
            </summary>
            <param name="processId">The process id</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
            <returns>List of activities which will presumably be executed </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.PreExecute(System.Guid,System.String,System.Boolean)">
            <summary>
            Pre-execution from specified activity of the process
            </summary>
            <param name="processId">Process id</param>
            <param name="fromActivityName">Activity name which begins pre-execution</param>
            <param name="ignoreCurrentStateCheck">If false and Current State Name and State Name of Current Activity is different (in case of scheme upgrade) do not run pre-execution</param>
            <returns>List of activities which will presumably be executed </returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommands(System.String,System.String)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified user
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommands(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified user
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialCommands(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the list of commands which is availiable from initial activity for specified users
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="processParameters">Parameters for creating scheme of process</param>
            <param name="commandNameFilter">Selects only the specified command if not null </param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommands(System.Guid,System.String)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommands(System.Guid,System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user Async
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommands(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user (async version)
            </summary>
            <param name="processId">Process id</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="commandNameFilter">Selects only the specified command if not null</param>
            <param name="mainIdentityId">User id for priority check of rules</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <param name="conditionCheck">If true then commands with failed condition checkes will be excluded</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommands(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommands(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user Async
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommands(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user (async version)
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="commandNameFilter">Selects only the specified command if not null</param>
            <param name="mainIdentityId">User id for priority check of rules</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <param name="conditionCheck">If true then commands with failed condition checkes will be excluded</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsWithConditionCheck(System.Guid,System.String)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user with conditions check
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsWithConditionCheck(System.Guid,System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user with conditions check
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">User id for whom formed initial commands list</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableCommandsWithConditionCheck(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Return the list of commands which is availiable from current activity for specified user with conditions check
            </summary>
            <param name="processId">Process id</param>
            <param name="identityIds">List of User ids for which formed initial commands list</param>
            <param name="commandNameFilter">Selects only the specified command if not null</param>
            <param name="mainIdentityId">User id for priority check of rules</param>
            <param name="culture">Culture to localize command and command parameter names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> commands</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExecuteCommand(OptimaJet.Workflow.Core.Runtime.WorkflowCommand,System.String,System.String)">
            <summary>
            Execute specified command for specified users 
            </summary>
            <param name="command">Command to execute</param>
            <param name="identityId">The user id which execute command</param>
            <param name="impersonatedIdentityId">The user id for whom executes command (impersonation)</param>
            <returns>Result of the execution</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExecuteCommand(System.Guid,System.String,System.String,OptimaJet.Workflow.Core.Runtime.WorkflowCommand)">
            <summary>
            Execute specified command for specified users 
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which execute command</param>
            <param name="impersonatedIdentityId">The user id for whom executes command (impersonation)</param>
            <param name="command">Command to execute</param>
            <returns>Result of the execution</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetInitialState(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Globalization.CultureInfo)">
            <summary>
            Return the initial state for process scheme
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="processParameters">Parameters for creating scheme of process</param>
            <param name="culture">Culture to localize state name</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentState(System.Guid,System.Globalization.CultureInfo)">
            <summary>
            Return the current state of specified process
            </summary>
            <param name="processId">Process id</param>
            <param name="culture">Culture to localize state name</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentStateName(System.Guid)">
            <summary>
            Return the current state name of specified process
            </summary>
            <param name="processId">Process id</param>
            <returns>Name of current state</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetCurrentActivityName(System.Guid)">
            <summary>
            Return the current activity name of specified process
            </summary>
            <param name="processId">Process id</param>
            <returns>Current activity name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(System.Guid)">
            <summary>
            Get the list of all states which available for set of specified process localized in current culture
            </summary>
            <param name="processId">Process id</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(OptimaJet.Workflow.Core.Model.ProcessInstance,System.Globalization.CultureInfo)">
            <summary>
            Get the list of all states which available for set of specified process localized in specified culture
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="culture">Culture to localize state names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Get the list of all states which available for set of specified process  in current culture
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="culture">Culture to localize state names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(System.Guid,System.Globalization.CultureInfo)">
            <summary>
            Get the list of all states which available for set of specified process localized in specified culture
            </summary>
            <param name="processId">Process id</param>
            <param name="culture">Culture to localize state names</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the list of all states which available for set of specified scheme in current culture
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns >List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetAvailableStateToSet(System.String,System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get the list of all states which available for set of specified scheme in specified culture
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="culture">Culture to localize state names</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowState"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Set specified state for specified process 
            </summary>
            <param name="processId">Process id</param>
            <param name="identityId">The user id which set the state</param>
            <param name="impersonatedIdentityId">The user id for whom sets the state (impersonation)</param>
            <param name="stateName">State name to set</param>
            <param name="parameters">Dictionary of ProcessInstance parameters which transferred to executed actions</param>
            <param name="preventExecution">Actions due to transition process do not executed if true</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetState(OptimaJet.Workflow.Core.Runtime.SetStateParams)">
            <summary>
            Set specified state for specified process (async version)
            </summary>
            <param name="setStateParams">Parameters of setting state<see cref="T:OptimaJet.Workflow.Core.Runtime.SetStateParams"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetActivityWithoutExecution(OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Boolean)">
            <summary>
            Set specified activity as current without execution of the implementation of the activity
            </summary>
            <param name="activityToSet">Activity to set</param>
            <param name="processInstance">Process instance for set activity as current</param>
            <param name="doNotSetRunningStatus">The status of the process - <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running"/> will not be set if true</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetActivityWithExecution(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},OptimaJet.Workflow.Core.Model.ActivityDefinition,OptimaJet.Workflow.Core.Model.ProcessInstance,System.Boolean)">
            <summary>
            Set specified activity as current and executing the implementation of the activity
            </summary>
            <param name="identityId">The user id which set the activity</param>
            <param name="impersonatedIdentityId">The user id for whom sets the activity (impersonation)</param>
            <param name="parameters">Dictionary of ProcessInstance parameters which transferred to executed actions</param>
            <param name="activityToSet">Activity to set</param>
            <param name="processInstance">Process instance for set activity as current</param>
            <param name="doNotSetRunningStatus">The status of the process - <see cref="F:OptimaJet.Workflow.Core.Persistence.ProcessStatus.Running"/> will not be set if true</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessScheme(System.Guid)">
            <summary>
            Get procees definition (parsed scheme) for specified process
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameBySchemeCode(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Get localized state name for specified scheme in current culture
            </summary>
            <param name="schemeCode">Code of the scheme</param>
            <param name="stateName">State name to localize</param>
            <param name="parameters">The parameters for creating scheme of process</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessStatus(System.Guid)">
            <summary>
            Get status of specified process
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateNameBySchemeId(System.Guid,System.String)">
            <summary>
            Get localized state name for specified scheme in current culture
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="stateName">State name to localize</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedStateName(System.Guid,System.String)">
            <summary>
            Get localized state name for specified process in current culture
            </summary>
            <param name="processId">Process id</param>
            <param name="stateName">State name to localize</param>
            <returns>Localized state name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedCommandName(System.Guid,System.String)">
            <summary>
            Get localized command name for specified process in current culture
            </summary>
            <param name="processId">Process id</param>
            <param name="commandName">Command name to localize</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetLocalizedCommandNameBySchemeId(System.Guid,System.String)">
            <summary>
            Get localized command name for specified scheme in current culture
            </summary>
            <param name="schemeId">Id of the scheme</param>
            <param name="commandName">Command name to localize</param>
            <returns>Localized command name</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessInstanceAndFillProcessParameters(System.Guid)">
            <summary>
            Get process instance with all parameters for specified process id
            </summary>
            <param name="processId">Process id</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.SetPersistentProcessParameter(System.Guid,System.String,System.Object)">
            <summary>
            Set single persistent parameter in the process
            </summary>
            <param name="processId">Process id</param>
            <param name="parameterName">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessHistory(System.Guid,OptimaJet.Workflow.Core.Persistence.Paging)">
            <summary>
            Returns the history of process
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessHistoryCount(System.Guid)">
            <summary>
            Returns count of process history (async version)
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetProcessTimers(System.Guid)">
            <summary>
            Returns list of timers for a process
            </summary>
            <param name="processId">Id of the process</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Shutdown(System.Int32)">
            <summary>
            Switches off the runtime. Switches off API, waits for API calls to be completed. Switches off all timers.
            IMPORTANT! Call this method from the SYNCHRONOUS method only.
            </summary>
            <param name="timeout">Shutdown timeout</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.GetSchemeCodes(System.Collections.Generic.List{System.String})">
            <summary>
            Returns the list of scheme codes into which the scheme with the given tags. If tags are null returns all scheme codes.
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.ExecuteCommandWithRestrictionCheck(OptimaJet.Workflow.Core.Runtime.WorkflowCommand,System.String,System.String)">
            <summary>
            Execute specified command for specified users with actor restrictions check
            </summary>
            <param name="command">Command to execute</param>
            <param name="identityId">The user id which execute command</param>
            <param name="impersonatedIdentityId">The user id for whom executes command (impersonation)</param>
            <returns>Result of the execution</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Resume(System.Guid)">
            <summary>
            Resumes the process from the current activity. In this case, the activity itself is not executed, and the process goes on if it can.
            </summary>
            <param name="processId"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.Resume(OptimaJet.Workflow.Core.Runtime.ResumeParams)">
            <summary>
            Resumes the process from the current or specific activity. In this case, the activity itself is not executed, and the process goes on if it can.
            </summary>
            <param name="resumeParams"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs">
            <summary>
            Represents information about an error occurred due to execution of a workflow process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.#ctor(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Persistence.ProcessStatus,OptimaJet.Workflow.Core.Model.TransitionDefinition,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="processInstance">Instance of the process the execution of which caused the error</param>
            <param name="processStatus">Status of the process</param>
            <param name="executedTransition">Transition the execution of which caused the error</param>
            <param name="exception">Exception which was thrown</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.Exception">
            <summary>
            Returns the exception which was thrown
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.ProcessInstance">
            <summary>
            Returns the instance of the process the execution of which caused the error
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.ProcessStatus">
            <summary>
            Status of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.ExecutedTransition">
            <summary>
            Returns the transition the execution of which caused the error
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.SuppressThrow">
            <summary>
            If true the thrown exception won't be propagated.
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowErrorEventArgs.ActivityToSet">
            <summary>
            If not <see langword="null" /> then the specified activity will be set as current for the process which execution caused 
            the error
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.EmptyWorkflowActionProvider">
            <summary>
            Empty action provider for system purpose
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.EmptyWorkflowRuleProvider">
            <summary>
            Empty rule provider for system purpose
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.ITimerManager">
            <summary>
            Interface of a timer manager, which control timers functioning inside a workflow runtime
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ITimerManager.ImmediateTimerValue">
            <summary>
            Value of Unspecified Timer which indicates that the timer transition will be executed immediately
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ITimerManager.InfinityTimerValue">
            <summary>
            Value of Unspecified Timer which indicates that the timer transition will be never executed
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.ITimerManager.OnNeedTimerValue">
            <summary>
            Raises when the timer value must be obtained 
            </summary>
        </member>
        <member name="E:OptimaJet.Workflow.Core.Runtime.ITimerManager.OnNeedTimerValueAsync">
            <summary>
            Raises when the timer value must be obtained 
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.RequestTimerValueAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.ActivityDefinition)">
            <summary>
            Sends request for timer value for all timer transitions that are outgoing from the CurrentActivity if timer value is equal 0 or -1
            </summary>
            <param name="activity">Activity to get outbound transition, if null the CurrentActivity will be used</param>
            <param name="processInstance">Process instance</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.GetTransitionsForImmediateExecution(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Model.ActivityDefinition)">
            <summary>
            Returns transitions triggered by a timer which value is equal to 0
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="activity">Activity to get outbound transition, if null the CurrentActivity will be used</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.SetTimerValue(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String,System.DateTime)">
            <summary>
            Sets new value of named timer
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="timerName">Timer name in Scheme</param>
            <param name="newValue">New value of the timer</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.SetTimerValue(System.Guid,System.String,System.DateTime)">
            <summary>
            Sets new value of named timer
            </summary>
            <param name="processId">Process id</param>
            <param name="timerName">Timer name in Scheme</param>
            <param name="newValue">New value of the timer</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.ResetTimerValue(OptimaJet.Workflow.Core.Model.ProcessInstance,System.String)">
            <summary>
            Resets value of named timer
            </summary>
            <param name="processInstance">Process instance</param>
            <param name="timerName">Timer name in Scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.ResetTimerValue(System.Guid,System.String)">
            <summary>
            Resets value of named timer
            </summary>
            <param name="processId">Process id</param>
            <param name="timerName">Timer name in Scheme</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.RegisterTimersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Register all timers for all outgouing timer transitions for current actvity of the specified process.
            All timers registered before which are present in transitions will be rewrited except timers marked as NotOverrideIfExists <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be registered</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.ClearAndRegisterTimersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Clear timers <see cref="!:ClearTimers"/> and then register new timers <see cref="!:RegisterTimers"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be cleared an registered</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.ClearTimersAsync(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Clear all registerd timers except present in outgouing timer transitions for current actvity of the specified process and marked as NotOverrideIfExists <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/>
            </summary>
            <param name="processInstance">Process instance whose timers need to be cleared</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.StartAsync(System.Nullable{System.Int32})">
             <summary>
             Starts the timer
             </summary>
            <param name="timeout">Wait timeout in milliseconds</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.Stop(System.Nullable{System.Int32})">
             <summary>
             Stops the timer
             </summary>
            <param name="timeout">Wait timeout in milliseconds</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ITimerManager.Refresh">
            <summary>
            Refresh interval of the timer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider">
            <summary>
            Interface of a action provider, which provide execution of actions specified in activities <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.Implementation"/> and <see cref="P:OptimaJet.Workflow.Core.Model.ActivityDefinition.PreExecutionImplementation"/>
            and execution of conditions <see cref="P:OptimaJet.Workflow.Core.Model.ConditionDefinition.Action"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteAction(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Execute action
            </summary>
            <param name="name">Name of the action to execute</param>
            <param name="processInstance">Reference to ProcessInstance from which action is executed <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="actionParameter">Additional action parameter <see cref="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionParameter"/></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteActionAsync(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,System.Threading.CancellationToken)">
            <summary>
            Execute action asynchronously
            </summary>
            <param name="name">Name of the action to execute</param>
            <param name="processInstance">Reference to ProcessInstance from which action is executed <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="actionParameter">Additional action parameter <see cref="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionParameter"/></param>
            <param name="token">Cancellation token</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteCondition(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String)">
            <summary>
            Check condition
            </summary>
            <param name="name">Name of the condition to check</param>
            <param name="processInstance">Reference to ProcessInstance from which condition is checked <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="actionParameter">Additional action parameter <see cref="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionParameter"/></param>
            <returns>Condition result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.ExecuteConditionAsync(System.String,OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,System.Threading.CancellationToken)">
            <summary>
            Check condition asynchronously
            </summary>
            <param name="name">Name of the condition to check</param>
            <param name="processInstance">Reference to ProcessInstance from which condition is checked <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="actionParameter">Additional action parameter <see cref="P:OptimaJet.Workflow.Core.Model.ActionDefinitionReference.ActionParameter"/></param>
            <param name="token">Cancellation token</param>
            <returns>Condition result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.IsActionAsync(System.String,System.String)">
            <summary>
            Checks whether the action should be called asynchronously
            </summary>
            <param name="name">Name of the action</param>
            <param name="schemeCode">Scheme code</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.IsConditionAsync(System.String,System.String)">
            <summary>
            Checks whether the condition should be called asynchronously
            </summary>
            <param name="name">Name of the condition</param>
            <param name="schemeCode">Scheme code</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.GetActions(System.String,OptimaJet.Workflow.Core.Runtime.NamesSearchType)">
            <summary>
            Return all user actions names
            </summary>
            <param name="schemeCode">Scheme code</param>
            <param name="namesSearchType"></param>
            <returns>List of actions names</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider.GetConditions(System.String,OptimaJet.Workflow.Core.Runtime.NamesSearchType)">
            <summary>
            Return all user conditions names
            </summary>
            <param name="schemeCode">Scheme code</param>
            <param name="namesSearchType"></param>
            <returns>List of conditions names</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider">
            <summary>
            Interface of a rule provider, which provide rule checking and getting of a list of users which satisfies a rule <see cref="P:OptimaJet.Workflow.Core.Model.TransitionDefinition.Restrictions"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.GetRules(System.String,OptimaJet.Workflow.Core.Runtime.NamesSearchType)">
            <summary>
            Return all rule names
            </summary>
            <returns>List of rule names</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.Check(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,System.String,System.String)">
            <summary>
            Check the rule
            </summary>
            <param name="processInstance">Reference to ProcessInstance for which rule is checked <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="identityId">User id for which rule is checking </param>
            <param name="ruleName">Name of the rule to check</param>
            <param name="parameter">Additional rule parameter <see cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Actor"/> <see cref="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Value"/></param>
            <returns>Rule check result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.CheckAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check the rule asynchronously
            </summary>
            <param name="processInstance">Reference to ProcessInstance for which rule is checked <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="identityId">User id for which rule is checking </param>
            <param name="ruleName">Name of the rule to check</param>
            <param name="parameter">Additional rule parameter <see cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Actor"/> <see cref="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Value"/></param>
            <returns>Rule check result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.GetIdentities(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,System.String)">
            <summary>
            Get the list of users which satisfies the rule
            </summary>
            <param name="processInstance">Reference to ProcessInstance for which rule is checked <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="ruleName">Name of the rule to get users list</param>
            <param name="parameter">Additional rule parameter <see cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Actor"/> <see cref="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Value"/></param>
            <returns>List of users which satisfies the rule</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.GetIdentitiesAsync(OptimaJet.Workflow.Core.Model.ProcessInstance,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the list of users which satisfies the rule asynchronously
            </summary>
            <param name="processInstance">Reference to ProcessInstance for which rule is checked <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/></param>
            <param name="runtime">Reference to WorkflowRuntime object which managed specified process instance <see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime"/></param>
            <param name="ruleName">Name of the rule to get users list</param>
            <param name="parameter">Additional rule parameter <see cref="P:OptimaJet.Workflow.Core.Model.RestrictionDefinition.Actor"/> <see cref="P:OptimaJet.Workflow.Core.Model.ActorDefinition.Value"/></param>
            <returns>List of users which satisfies the rule</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.IsCheckAsync(System.String,System.String)">
            <summary>
            Checks whether Check the rule should be called asynchronously
            </summary>
            <param name="ruleName">Name of the action</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider.IsGetIdentitiesAsync(System.String,System.String)">
            <summary>
            Checks whether Get the list of users which satisfies the rule should be called asynchronously
            </summary>
            <param name="ruleName">Name of the condition</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs">
            <summary>
            Event args for request parameters for creating a process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs.ProcessId">
            <summary>
            Process id 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs.DeterminingParameters">
            <summary>
            List of parameters for creating the process
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs">
            <summary>
            Represent information about changed status of a process 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.ProcessId">
            <summary>
            Id of the process whose status was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.IsSubprocess">
            <summary>
            If true means that the status was changed for subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.OldStatus">
            <summary>
            Previous status of the process <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.NewStatus">
            <summary>
            Actual status of the process <see cref="T:OptimaJet.Workflow.Core.Persistence.ProcessStatus"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.SchemeCode">
            <summary>
            Code of the scheme of the process
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.ProcessInstance">
            <summary>
            Instance of the process
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.ProcessStatusChangedEventArgs.#ctor(System.Guid,System.Boolean,OptimaJet.Workflow.Core.Persistence.ProcessStatus,OptimaJet.Workflow.Core.Persistence.ProcessStatus)">
            <summary>
            Constructor
            </summary>
            <param name="processId">Id of the process whose status was changed</param>
            <param name="oldStatus">Previous status of the process</param>
            <param name="newStatus">Actual status of the process</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs">
            <summary>
            Represent information about changed scheme of a process 
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs.ProcessId">
            <summary>
            Id of the process whose scheme was changed
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs.SchemeId">
            <summary>
            Actual scheme id
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs.SchemaWasObsolete">
            <summary>
            True if the scheme of the process was change due to scheme was obsolete
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.SchemaWasChangedEventArgs.DeterminingParametersWasChanged">
            <summary>
            True if the scheme of the procee was changed due to process creating parameters was changed
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.TimerToRegister">
            <summary>
            Represent a timer to register in persistence store
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToRegister.Name">
            <summary>
            Timer name <see cref="!:TimerDefinition.Name"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToRegister.ProcessId">
            <summary>
            Id of the process which owned the timer
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToRegister.ExecutionDateTime">
            <summary>
            Execution DateTime of timer
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.TimerToExecute">
            <summary>
            Represent a timer information
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToExecute.TimerId">
            <summary>
            Timer id
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToExecute.Name">
            <summary>
            Timer name <see cref="!:TimerDefinition.Name"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToExecute.ProcessId">
            <summary>
            Id of the process which owned the timer
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.TimerToExecute.RootProcessId">
            <summary>
            Id of the root process
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.CommandParameter">
            <summary>
            Represent a command parameter for use in an application
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.ParameterName">
            <summary>
            System name of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.LocalizedName">
            <summary>
            Localized name of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.IsRequired">
            <summary>
            Indicates that the parameter is required
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.DefaultValue">
            <summary>
            Default value of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.Type">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.TypeName">
            <summary>
            Full name of the type of the parameter
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.CommandParameter.IsPersistent">
            <summary>
            Set true if you need to forcibly persist this parameter or it is the implicit persistent parameter
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand">
            <summary>
            Represents a workflow command for use in an application
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.ProcessId">
            <summary>
            Process id for which command is valid
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.ValidForActivityName">
            <summary>
            Activity name for which command is valid
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.ValidForStateName">
            <summary>
            Activity name for which command is valid
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.Classifier">
            <summary>
            Transition classifier for command  <see cref="T:OptimaJet.Workflow.Core.Model.TransitionClassifier"/>
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.IsForSubprocess">
            <summary>
            If true means that the command was recieved from a subprocess
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.Identities">
            <summary>
            List of user ids which can execute the command
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.CommandName">
            <summary>
            System name of the command
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.LocalizedName">
            <summary>
            Localized name of the command
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.Parameters">
            <summary>
            Parameters list of the command <see cref="T:OptimaJet.Workflow.Core.Runtime.CommandParameter"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.GetParameter(System.String)">
            <summary>
            Get the parameter value
            </summary>
            <param name="name">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.SetParameter(System.String,System.Object,System.Boolean)">
            <summary>
            Set parameter value
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="persist">Parameter persistence</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.Create(System.Guid,OptimaJet.Workflow.Core.Model.TransitionDefinition,OptimaJet.Workflow.Core.Model.ProcessDefinition,System.Func{System.String,System.Type,System.Object},System.Globalization.CultureInfo)">
            <summary>
            Create a workflow command object
            </summary>
            <param name="processId">Procees id</param>
            <param name="transitionDefinition">Command transition <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/></param>
            <param name="processDefinition"><see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/> object which represent parsed workflow scheme</param>
            <param name="deserializer">Function for deserialize InitialValue of Parameter from JSON</param>
            <param name="culture"> Culture to localize command and command parameter names</param>
            <returns><see cref="T:OptimaJet.Workflow.Core.Runtime.WorkflowCommand"/> object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.AddIdentity(System.String)">
            <summary>
            Add an identity in Identities collection
            </summary>
            <param name="identityId"></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.Validate(System.String@)">
            <summary>
            Validates a command
            </summary>
            <param name="errorMessage">Errors summary</param>
            <returns>true if the command is valid</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.SetAllParametersToDefault">
            <summary>
            Sets all value of parameters to their default values
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowCommand.SetParameterToDefault(System.String)">
            <summary>
            Sets value of parameter with specific name to default value
            </summary>
            <param name="name">Name of parameter</param>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeStartResult.CompileErrors">
            <summary>
            Global code actions compile errors
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeStartResult.HasCompileErrors">
            <summary>
            Returns true if the result has any global code actions compile error
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SetCancellationTokenHandling(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.CancellationTokenHandling)">
            <summary>
            Sets cancellation token handling type
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="value">Cancellation token handling type</param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithDefaultBuildSteps(OptimaJet.Workflow.Core.Builder.IWorkflowBuilder,OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Configures the builder with default build steps 
            </summary>
            <param name="builder">The instance of the builder</param>
            <returns>Configured instance of builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithBuilder(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Builder.IWorkflowBuilder)">
            <summary>
            Configures the runtime with specified builder <see cref="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="builder">The instance of the builder <see cref="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithDefaultBuilder``1(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Configures the runtime with default (scheme in xml) builder <see cref="T:OptimaJet.Workflow.Core.Builder.IWorkflowBuilder"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithPersistenceProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Persistence.IPersistenceProvider)">
            <summary>
            Configures the runtime with specified persistence provider <see cref="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="persistenceProvider">The instance of the persistence provider <see cref="T:OptimaJet.Workflow.Core.Persistence.IPersistenceProvider"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.AttachDeterminingParametersGetter(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.EventHandler{OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs})">
            <summary>
            Subscribe a event handler on OnNeedDeterminingParameters event to obtain parameters for creating a scheme of a process where a scheme was changed <see cref="T:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="determiningParametersGetter">Event handler <see cref="T:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SwitchAutoUpdateSchemeBeforeGetAvailableCommandsOn(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Set  <see cref="!:WorkflowRuntime.IsAutoUpdateSchemeBeforeGetAvailableCommands"/> to true
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SwitchAutoUpdateSchemeBeforeGetAvailableCommandsOn(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.EventHandler{OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs})">
            <summary>
            Set  <see cref="!:WorkflowRuntime.IsAutoUpdateSchemeBeforeGetAvailableCommands"/> to true and add event handler to OnNeedDeterminingParameters event <see cref="E:OptimaJet.Workflow.Core.Runtime.WorkflowRuntime.OnNeedDeterminingParameters"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
              /// <param name="determiningParametersGetter">Event handler <see cref="T:OptimaJet.Workflow.Core.Runtime.NeedDeterminingParametersEventArgs"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SwitchAutoUpdateSchemeBeforeGetAvailableCommandsOff(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Set  <see cref="!:WorkflowRuntime.IsAutoUpdateSchemeBeforeGetAvailableCommands"/> to false
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.StartAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Start all workflow runtime services аnd compile global code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.Start(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Start all workflow runtime services аnd compile global code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.StartAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Boolean)">
            <summary>
            System use only. The signature of this method can be changed without any notification. Start all workflow runtime services аnd compile global code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="ignoreNotCompiledGlobalActions">if true all compillation errors in the global codeactions will be ignored</param>
            <param name="compilerErrors">compiler errors</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.Start(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            System use only. The signature of this method can be changed without any notification. Start all workflow runtime services аnd compile global code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="ignoreNotCompiledGlobalActions">if true all compillation errors in the global codeactions will be ignored</param>
            <param name="compilerErrors">compiler errors</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ColdStartAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            System use only. The signature of this method can be changed without any notification. Start all workflow runtime services except timers.
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ColdStart(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            System use only. The signature of this method can be changed without any notification. Start all workflow runtime services except timers.
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ColdStartAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Boolean)">
            <summary>
            System use only. The signature of this method can be changed without any notification. Start all workflow runtime services except timers.
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="ignoreNotCompilledGlobalActions">if true all compillation errors in the global codeactions will be ignored</param>
            <param name="compillerErrors">compiller errors</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ColdStart(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            System use only. The signature of this method can be changed without any notification. Start all workflow runtime services except timers.
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="ignoreNotCompilledGlobalActions">if true all compillation errors in the global codeactions will be ignored</param>
            <param name="compillerErrors">compiller errors</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithCache(OptimaJet.Workflow.Core.Builder.IWorkflowBuilder,OptimaJet.Workflow.Core.Cache.IParsedProcessCache)">
            <summary>
            Сonfigures the workflow builder with specified cache for parced processes <see cref="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache"/>
            </summary>
            <param name="bulder">The instance of the workflow builder</param>
            <param name="cache">The instance of the cache for parced processes <see cref="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache"/></param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithDefaultCache(OptimaJet.Workflow.Core.Builder.IWorkflowBuilder)">
            <summary>
            Сonfigures the workflow builder with default in memory cache for parced processes <see cref="T:OptimaJet.Workflow.Core.Cache.IParsedProcessCache"/>
            </summary>
            <param name="bulder">The instance of the workflow builder</param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithGenerator``1(OptimaJet.Workflow.Core.Builder.WorkflowBuilder{``0},OptimaJet.Workflow.Core.Generator.IWorkflowGenerator{``0})">
            <summary>
            Сonfigures the workflow builder with specified workflow scheme generator<see cref="T:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1"/>
            </summary>
            <param name="bulder">The instance of the workflow builder</param>
            <param name="generator">The instance of the workflow scheme generator <see cref="T:OptimaJet.Workflow.Core.Generator.IWorkflowGenerator`1"/></param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithParser``1(OptimaJet.Workflow.Core.Builder.WorkflowBuilder{``0},OptimaJet.Workflow.Core.Parser.IWorkflowParser{``0})">
            <summary>
            Сonfigures the workflow builder with specified workflow scheme parser<see cref="T:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1"/>
            </summary>
            <param name="bulder">The instance of the workflow builder</param>
            <param name="parser">The instance of the workflow scheme parser <see cref="T:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1"/></param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithShemePersistenceProvider``1(OptimaJet.Workflow.Core.Builder.WorkflowBuilder{``0},OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider{``0})">
            <summary>
            Сonfigures the workflow builder with specified scheme persistence provider<see cref="T:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1"/>
            </summary>
            <param name="builder">The instance of the workflow builder</param>
            <param name="schemePersistenceProvider">The instance of the scheme persistence provider <see cref="T:OptimaJet.Workflow.Core.Persistence.ISchemePersistenceProvider`1"/></param>
            <returns>Configured instance of the workflow builder</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithTimerManager(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.ITimerManager)">
            <summary>
            Сonfigures the runtime with specified timer manager <see cref="T:OptimaJet.Workflow.Core.Runtime.ITimerManager"/>
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="timerManager">The instance of the timer manager <see cref="T:OptimaJet.Workflow.Core.Runtime.ITimerManager"/></param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.EnableCodeActions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Enable code action and expression compilation in runtime
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.CodeActionsDebugOn(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Switch on compillation debug mode for code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.DisableCodeActions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Disable code action compillation in runtime
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.RegisterAssemblyForCodeActions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Reflection.Assembly,System.Boolean,System.Func{System.Type,System.Boolean})">
            <summary>
            Register reference on assembly for compilation of code actions
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="assembly">Assembly for register</param>
            <param name="ignoreForDesigner">If true then types from the assembly will not be registered in the designer</param>
            <param name="designerTypeFilter">Function which filters a types for designer</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SetParameterSerializerSettings(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Changes a JsonSerializerSettings which are using to serialise parameters in runtime
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="settings">JsonSerializerSettings object</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.DeserializeParameter(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,System.Type)">
            <summary>
            Provides access to Workflow Engine .NET Persistence Process Parameters serialization mechanism
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="serializedValue">Serialized value</param>
            <param name="parameterType">Parameter type</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SerializeParameter(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Object,System.Type)">
            <summary>
            Provides access to Workflow Engine .NET Persistence Process Parameters serialization mechanism
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="value">Parameter value</param>
            <param name="parameterType">Parameter type</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.SetExecutionSearchOrder(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.ExecutionSearchOrder)">
            <summary>
            Sets the order of the Action, Condition, or Rule search by name
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithRuleProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.IWorkflowRuleProvider,System.Collections.Generic.List{System.String})" -->
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ClearRuleProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Resets Rule provider to default value (EmptyWorkflowRuleProvider)
            </summary>
            <param name="runtime">Configured instance of the workflow runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithActionProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider,System.Collections.Generic.List{System.String})">
            <summary>
            Adds specified action provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/> in the runtime
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="workflowActionProvider">The instance of the action provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowActionProvider"/></param>
            <param name="schemes">The list of schemes for which the provider is added</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ClearActionProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Resets Action provider to default value (EmptyWorkflowActionProvider)
            </summary>
            <param name="runtime">Configured instance of the workflow runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithExternalParametersProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.IWorkflowExternalParametersProvider,System.Collections.Generic.List{System.String})">
            <summary>
            Adds specified external parameters provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowExternalParametersProvider"/> in the runtime
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="externalParametersProvider">The instance of the external parameters provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IWorkflowExternalParametersProvider"/></param>
            <param name="schemes">The list of schemes for which the provider is added</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ClearExternalParametersProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Resets external parameters provider to default value (EmptyWorkflowExternalParametersProvider)
            </summary>
            <param name="runtime">Configured instance of the workflow runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithDesignerAutocompleteProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.IDesignerAutocompleteProvider,System.Collections.Generic.List{System.String})">
            <summary>
            Adds specified autocomplete provider (only for the Designer) <see cref="T:OptimaJet.Workflow.Core.Runtime.IDesignerAutocompleteProvider"/> in the runtime
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="autocompleteProvider">The instance of the autocomplete provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IDesignerAutocompleteProvider"/></param>
            <param name="schemes">The list of schemes for which the provider is added</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ClearDesignerAutocompleteProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Resets Designer Autocomplete Provider to default value (null)
            </summary>
            <param name="runtime">Configured instance of the workflow runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithDesignerParameterFormatProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.IDesignerParameterFormatProvider,System.Collections.Generic.List{System.String})">
            <summary>
            Adds specified parameter format provider (only for the Designer) <see cref="T:OptimaJet.Workflow.Core.Runtime.IDesignerParameterFormatProvider"/> in the runtime
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="designerParameterFormatProvider">The instance of the parameter format provider <see cref="T:OptimaJet.Workflow.Core.Runtime.IDesignerParameterFormatProvider"/></param>
            <param name="schemes">The list of schemes for which the provider is added</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ClearDesignerParameterFormatProvider(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Resets Designer Parameter Format Provider to default value (null)
            </summary>
            <param name="runtime">Configured instance of the workflow runtime</param>
            <returns>Configured instance of the workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithPlugins(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Collections.Generic.List{System.String},OptimaJet.Workflow.Plugins.IWorkflowPlugin[])">
            <summary>
            Registers plugins in the workflow runtime
            </summary>
            <param name="runtime">Configured workflow runtime</param>
            <param name="schemes">The list of schemes for which the plugins is added</param>
            <param name="plugins">>Plugins instances</param>
            <returns>Configured workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithPlugin(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Plugins.IWorkflowPlugin,System.Collections.Generic.List{System.String})">
            <summary>
            Registers plugin in the workflow runtimeS
            </summary>
            <param name="runtime">Configured workflow runtime</param>
            <param name="plugin">Plugin instance</param>
            <param name="schemes">The list of schemes for which the plugin is added</param>
            <returns>Configured workflow runtime</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.AsSingleServer(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Use this method when the runtime is running in a single-server environment.
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.AsSingleServer(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.Settings.SingleServerSettings)">
            <summary>
            Use this method when the runtime is running in a single-server environment.
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.AsSingleServer(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.Settings.ISingleServerSettingsSource)">
            <summary>
            Use this method when the runtime is running in a single-server environment.
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithProcessRestorer(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.ProcessRestoring.IProcessRestorer)">
            <summary>
            Add the process restore that will run the procees after server failure.
            </summary>
            <param name="runtime"></param>
            <param name="restorer"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.ClearProcessRestorers(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Clear process restorers
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.AsMultiServer(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.Settings.IMultiServerSettingsSource)">
            <summary>
            Use this method when the runtime is running in a multi-server environment.
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.AsMultiServer(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime)">
            <summary>
            Use this method when the runtime is running in a multi-server environment.
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithRuntimeSettings(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeSettings)">
            <summary>
            Change runtime settings
            </summary>
            <param name="runtime"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithCustomActivities(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Collections.Generic.List{OptimaJet.Workflow.Core.ActivityBase})">
            <summary>
            Registers custom activities in the workflow runtime
            </summary>
            <param name="runtime"></param>
            <param name="activities"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithCustomConditions(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Collections.Generic.List{OptimaJet.Workflow.Core.FormBase})">
            <summary>
            Registers custom conditions in the workflow runtime
            </summary>
            <param name="runtime"></param>
            <param name="activities"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Runtime.WorkflowRuntimeConfigurationExtension.WithCustomActivity(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,OptimaJet.Workflow.Core.ActivityBase)">
            <summary>
            Registers custom activity in the workflow runtime
            </summary>
            <param name="runtime"></param>
            <param name="activity"></param>
            <returns></returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Runtime.WorkflowState">
            <summary>
            Represent a state of a process for use in an application
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowState.Name">
            <summary>
            System name of the state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowState.VisibleName">
            <summary>
            Localized name of the state
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Runtime.WorkflowState.SchemeCode">
            <summary>
            Code of the scheme of the process
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Subprocess.TreeSearchStart">
            <summary>
            Specifies starting point of search something in the Process Instance Tree
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Subprocess.TreeSearchStart.FromMe">
            <summary>
            From specified node
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Subprocess.TreeSearchStart.FromRoot">
            <summary>
            From tree root
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Subprocess.TreeSearchStart.FromParent">
            <summary>
            From parent of specified node
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Subprocess.TreeSearchInclude">
            <summary>
            Specifies which kind of nodes will be included in search
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Subprocess.TreeSearchInclude.AllDownIncludeStartPoint">
            <summary>
            All children nodes and start point
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Subprocess.TreeSearchInclude.AllUpIncludeStartPoint">
            <summary>
            All parent nodes and start point
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Subprocess.TreeSearchInclude.OnlyStartPoint">
            <summary>
            Only start point
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Subprocess.TreeSearchInclude.AllDownExcludeStartPoint">
            <summary>
            All children nodes
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Core.Subprocess.TreeSearchInclude.AllUpExcludeStartPoint">
            <summary>
            All parent nodes
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter">
            <summary>
            Specifies the current process and the method of searching in the Process Instances tree
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter.ProcessId">
            <summary>
            Process id, which will be specified to search
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter.StartFrom">
            <summary>
            Specifies starting point of search something in the Process Instance Tree
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter.ProcessInstance">
            <summary>
            ProcessInstance, which will be specified to search
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter.Include">
            <summary>
            Specifies which kind of nodes will be included in search
            </summary>
        </member>
        <member name="P:OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter.ActivityName">
            <summary>
            Searches commands outgoing for specific activity, if null the search will be performed for current activity
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter.#ctor(System.Guid)">
            <summary>
            Use this constructor when you know ProcessId only
            </summary>
            <param name="processId">Process id, which will be specified to search</param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Subprocess.TreeSearchFilter.#ctor(OptimaJet.Workflow.Core.Model.ProcessInstance)">
            <summary>
            Use this constructor when you have an access to a  ProcessInstance
            </summary>
            <param name="processInstance">ProcessInstance , wich will be specified to search</param>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Subprocess.SubprocessUtils">
            <summary>
            Algorithms for subprocesses branches
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Subprocess.SubprocessUtils.MarkupSubprocesses(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Markups scheme, sets nesting level for each Activity
            </summary>
            <param name="processDefinition"></param>
            <returns>Process definition with marked nesting levels an subprocesses ids</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1">
            <summary>
            Interface of a workflow parser, which parses not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme</typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1.Parse(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,`0,OptimaJet.Workflow.Core.Builder.SchemeParsingType)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="schemeParsingType">Type of parsing strict or soft. Uses only for upload operations where we need softer scheme check</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1.Parse(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,OptimaJet.Workflow.Core.Builder.SchemeParsingType)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="scheme">String representation of not parsed scheme</param>
             /// <param name="schemeParsingType">Type of parsing strict or soft. Uses only for upload operations where we need softer scheme check</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1.SerializeToSchemeMedium(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serializes object model of the scheme to not parsed scheme
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <returns>Not parsed scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.IWorkflowParser`1.SerializeToString(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serializes object model of the scheme to string
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <returns>String representation of not parsed scheme</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Parser.WorkflowParser`1">
            <summary>
            Base workflow parser, which parses not parsed process scheme <see cref="T:OptimaJet.Workflow.Core.Model.SchemeDefinition`1"/> to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
            <typeparam name="TSchemeMedium">Type of not parsed scheme</typeparam>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseTimers(`0)">
            <summary>
            Parses timers from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseActors(`0)">
            <summary>
            Parses actors from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseLocalization(`0)">
            <summary>
            Parses localization items from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseParameters(`0,OptimaJet.Workflow.Core.Builder.SchemeParsingType)">
            <summary>
            Parses parameters from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="schemeParsingType">Type of parsing strict or soft. Uses only for upload operations where we need softer scheme check</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseCommands(`0,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ParameterDefinition})">
            <summary>
            Parses commands from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="parameterDefinitions">List of parsed parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/></param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseActivities(`0)">
            <summary>
            Parses activities from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseCodeActions(`0)">
            <summary>
            Parses code actions from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.ParseTransitions(`0,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActivityDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition})">
            <summary>
            Parses transitions from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="actorDefinitions">List of parsed actors <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/></param>
            <param name="commandDefinitions">List of parsed commands <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/></param>
            <param name="activityDefinitions">List of parsed activities <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/></param>
            <param name="timerDefinitions">List of parsed timers <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/></param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetSchemeCode(`0)">
            <summary>
            Gets the code of the scheme from not parsed scheme 
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Code of the scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetCanBeInlined(`0)">
            <summary>
            Gets the sign that the scheme can be inlined in other schemes
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Can be inlined sign</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetLogEnabled(`0)">
            <summary>
            Get the sign that the <see cref="T:OptimaJet.Workflow.Core.Model.ProcessInstance"/> will be logging after create
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Enable process logging</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetSchemeTags(`0)">
            <summary>
            Get list of scheme tags
            </summary>
            <param name="schemeMedium"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetCommonUsings(`0)">
            <summary>
            Get list of common usings separated by ;
            </summary>
            <param name="schemeMedium"></param>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetDesignerSettings(`0)">
            <summary>
            Gets designer settings from not parsed scheme 
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Designer settings <see cref="T:OptimaJet.Workflow.Core.Model.DesignerSettings"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetExecutionTimeout(`0)">
            <summary>
            Gets execution timeout for activity
            </summary>
            <param name="schemeMedium"></param>
            <returns>Execution timeout <see cref="T:OptimaJet.Workflow.Core.Model.ActivityTimeout"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetIdleTimeout(`0)">
            <summary>
            Gets idle timeout for activity
            </summary>
            <param name="schemeMedium"></param>
            <returns>Idle timeout <see cref="T:OptimaJet.Workflow.Core.Model.ActivityTimeout"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.GetExceptionsHandlers(`0)">
            <summary>
            Gets exceptions handler  for activity
            </summary>
            <param name="schemeMedium"></param>
            <returns>Exceptions handler</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.Parse(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,OptimaJet.Workflow.Core.Builder.SchemeParsingType)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="scheme">String representation of not parsed sheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.SerializeToSchemeMedium(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serializes object model of the scheme to not parsed scheme
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <returns>Not parsed scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.SerializeToString(OptimaJet.Workflow.Core.Model.ProcessDefinition)">
            <summary>
            Serializes object model of the scheme to string
            </summary>
            <param name="processDefinition">ProcessDefinition object</param>
            <returns>String representation of not parsed scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.WorkflowParser`1.Parse(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,`0,OptimaJet.Workflow.Core.Builder.SchemeParsingType)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="schemeParsingType">Type of parsing strict or soft. Uses only for upload operations where we need softer scheme check</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="T:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser">
            <summary>
            Base workflow parser, which parses not parsed process scheme serialized to XML to the object model of a scheme of a process <see cref="T:OptimaJet.Workflow.Core.Model.ProcessDefinition"/>
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseTimers(System.Xml.Linq.XElement)">
            <summary>
            Parses timers from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseActors(System.Xml.Linq.XElement)">
            <summary>
            Parses actors from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseLocalization(System.Xml.Linq.XElement)">
            <summary>
            Parses localization items from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.LocalizeDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseParameters(System.Xml.Linq.XElement,OptimaJet.Workflow.Core.Builder.SchemeParsingType)">
            <summary>
            Parses parameters from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="schemeParsingType">Type of parsing strict or soft. Uses only for upload operations where we need softer scheme check</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseCommands(System.Xml.Linq.XElement,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ParameterDefinition})">
            <summary>
            Parses commands from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="parameterDefinitions">List of parsed parameters <see cref="T:OptimaJet.Workflow.Core.Model.ParameterDefinition"/></param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseActivities(System.Xml.Linq.XElement)">
            <summary>
            Parses activities from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.GetExecutionTimeout(System.Xml.Linq.XElement)">
            <summary>
            Gets execution timeout for activity
            </summary>
            <param name="schemeMedium"></param>
            <returns>Execution timeout <see cref="T:OptimaJet.Workflow.Core.Model.ActivityTimeout"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.GetIdleTimeout(System.Xml.Linq.XElement)">
            <summary>
            Gets idle timeout for activity
            </summary>
            <param name="schemeMedium"></param>
            <returns>Idle timeout <see cref="T:OptimaJet.Workflow.Core.Model.ActivityTimeout"/></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.GetExceptionsHandlers(System.Xml.Linq.XElement)">
            <summary>
            Gets exceptions handler  for activity
            </summary> 
            <param name="schemeMedium"></param>
            <returns>Exceptions handler</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseCodeActions(System.Xml.Linq.XElement)">
            <summary>
            Parses code actions from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.CodeActionDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.ParseTransitions(System.Xml.Linq.XElement,System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActorDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.CommandDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.ActivityDefinition},System.Collections.Generic.List{OptimaJet.Workflow.Core.Model.TimerDefinition})">
            <summary>
            Parses transitions from not parsed scheme in theirs object model
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <param name="actorDefinitions">List of parsed actors <see cref="T:OptimaJet.Workflow.Core.Model.ActorDefinition"/></param>
            <param name="commandDefinitions">List of parsed commands <see cref="T:OptimaJet.Workflow.Core.Model.CommandDefinition"/></param>
            <param name="activityDefinitions">List of parsed activities <see cref="T:OptimaJet.Workflow.Core.Model.ActivityDefinition"/></param>
            <param name="timerDefinitions">List of parsed timers <see cref="T:OptimaJet.Workflow.Core.Model.TimerDefinition"/></param>
            <returns>List of <see cref="T:OptimaJet.Workflow.Core.Model.TransitionDefinition"/> objects</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.GetSchemeCode(System.Xml.Linq.XElement)">
            <summary>
            Gets the code of the scheme from not parsed scheme 
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Code of the scheme</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.GetDesignerSettings(System.Xml.Linq.XElement)">
            <summary>
            Gets designer settings from not parsed scheme 
            </summary>
            <param name="schemeMedium">Not parsed scheme</param>
            <returns>Designer settings</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Parser.XmlWorkflowParser.Parse(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.String,OptimaJet.Workflow.Core.Builder.SchemeParsingType)">
            <summary>
            Returns object model of the scheme of a process
            </summary>
            <param name="scheme">String representation of not parsed sheme</param>
            <returns>ProcessDefinition object</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.TaskExtensions.WithTimeout(System.Threading.Tasks.Task,System.Int32,System.Threading.CancellationTokenSource)">
            <summary>
            Returns true if task completed, false when timeout
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Utils.AsyncEventHandlerExtensions.InvokeSerialAsync``1(OptimaJet.Workflow.Core.Utils.AsyncEventHandler{``0},System.Object,``0,System.Threading.CancellationToken)">
            <summary>
            Invoke async event handler serial way
            </summary>
            <param name="handler"></param>
            <param name="sender"></param>
            <param name="args"></param>
            <param name="token"></param>
            <typeparam name="TEventArgs"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Utils.AsyncEventHandlerExtensions.InvokeParallelAsync``1(OptimaJet.Workflow.Core.Utils.AsyncEventHandler{``0},System.Object,``0,System.Threading.CancellationToken)">
            <summary>
            Invoke async event handler parallel way
            </summary>
            <param name="handler"></param>
            <param name="sender"></param>
            <param name="args"></param>
            <param name="token"></param>
            <typeparam name="TEventArgs"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Utils.DisposableStopwatch.AddAction(System.Action{OptimaJet.Workflow.Core.Utils.DisposableStopwatchArgs})">
            <summary> Add action which invoke on dispose. Removes others if they were. </summary>
            <param name="action"></param>
        </member>
        <member name="M:OptimaJet.Workflow.Core.Utils.DisposableStopwatch.SetAction(System.Action{OptimaJet.Workflow.Core.Utils.DisposableStopwatchArgs})">
            <summary> Set action which invoke on dispose. Removes others if they were. </summary>
            <param name="action"></param>
        </member>
        <member name="T:OptimaJet.Workflow.Designer">
            <summary>
            Extension which provides API for HTML5 Workflow Designer
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Designer.DesignerAPI(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Collections.Specialized.NameValueCollection,System.Boolean@,System.IO.Stream,System.Boolean)">
            <summary>
            API for HTML5 Workflow Designer. Contains following operations:
            - bool exists(schemecode, schemeid, processid) Checks existence of the scheme of the process with specific code, id or id of the process 
            - JSON load(schemecode, schemeid, processid) Returns the scheme of the process in JSON format by specific code, id or id of the process 
            - JSON save(schemecode, data) Saves the scheme with specified code. Ruturns updated scheme.
            - JSON uploadscheme(filestream) Converts scheme uploaded as XML file to JSON.
            - XML downloadscheme(data) Converts scheme from JSON object to XML.
            - object compile(data) Method for test compile of code actions
            - JSON getemptytype(typename) returns serialized empty type
            - array getautocompletesuggestions (category, value) returns a list of autocomplete suggestions
            - JSON uploadschemebpmn(filestream) Converts BPMN scheme uploaded as XML file to JSON.
            - XML downloadschemebpmn(data) Converts BPMN scheme from JSON object to XML.
            Type of the operation determined by "operation" parameter from request parameters 
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="form">Parameters from request. Allowed parameters is: "operation", "schemecode", "schemeid", "processid", "data"</param>
            <param name="hasError">If true the result contains info about an exception</param>
            <param name="fileStream">Stream which represent uploaded file</param>
            <param name="setIsObsoleteForOperationSave">If true and operation is "save" IsObsolete property will be set to all shemes of processes with specified code</param>
            <returns>Operation execution result</returns>
        </member>
        <member name="M:OptimaJet.Workflow.Designer.DesignerAPIAsync(OptimaJet.Workflow.Core.Runtime.WorkflowRuntime,System.Collections.Specialized.NameValueCollection,System.IO.Stream,System.Boolean)">
            <summary>
            API for HTML5 Workflow Designer. Contains following operations:
            - bool exists(schemecode, schemeid, processid) Checks existence of the scheme of the process with specific code, id or id of the process 
            - JSON load(schemecode, schemeid, processid) Returns the scheme of the process in JSON format by specific code, id or id of the process 
            - JSON save(schemecode, data) Saves the scheme with specified code. Ruturns updated scheme.
            - JSON uploadscheme(filestream) Converts scheme uploaded as XML file to JSON.
            - XML downloadscheme(data) Converts scheme from JSON object to XML.
            - object compile(data) Method for test compile of code actions
            - JSON getemptytype(typename) returns serialized empty type
            - array getautocompletesuggestions (category, value) returns a list of autocomplete suggestions
            - JSON uploadschemebpmn(filestream) Converts BPMN scheme uploaded as XML file to JSON.
            - XML downloadschemebpmn(data) Converts BPMN scheme from JSON object to XML.
            Type of the operation determined by "operation" parameter from request parameters 
            </summary>
            <param name="runtime">The instance of the runtime</param>
            <param name="form">Parameters from request. Allowed parameters is: "operation", "schemecode", "schemeid", "processid", "data". Look at <see cref="T:OptimaJet.Workflow.Core.Designer.RequestElements"/></param>
            <param name="hasError">If true the result contains info about an exception</param>
            <param name="fileStream">Stream which represent uploaded file</param>
            <param name="setIsObsoleteForOperationSave">If true and operation is "save" IsObsolete property will be set to all shemes of processes with specified code</param>
            <returns>Operation execution result</returns>
        </member>
        <member name="P:OptimaJet.Workflow.Plugins.AssignmentPlugin.DefaultStatus">
            <summary>
            Default status for assignment
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Plugins.AssignmentPlugin.DefaultStartStatus">
            <summary>
            Default start status for assignment if custom statuses are not used
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Plugins.AssignmentPlugin.DefaultCompletedStatus">
            <summary>
            Default completed status for assignment if custom statuses are not used
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Plugins.AssignmentPlugin.DefaultDeclinedStatus">
            <summary>
            Default completed status for assignment if custom statuses are not used
            </summary>
        </member>
        <member name="M:OptimaJet.Workflow.Plugins.AssignmentPlugin.GetStatuses">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OptimaJet.Workflow.Plugins.BasicPlugin.Setting_DontCompileExpressions">
            <summary>
            Use this setting for compatibility only
            </summary>
        </member>
        <member name="T:OptimaJet.Workflow.Plugins.ApproversProvider.Approvers">
            <summary>
            Represent a structure to store sightings as workflow parameter
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Plugins.LoopsPlugin.ConditionsAsyncLoopPlugin.LoopIsDefault">
            <summary>
            Use for continue iteration
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Plugins.LoopsPlugin.ConditionsAsyncLoopPlugin.LoopIsNotDefault">
            <summary>
            User for stop iteration (break or continue)
            </summary>
        </member>
        <member name="F:OptimaJet.Workflow.Plugins.LoopsPlugin.ConditionsAsyncLoopPlugin.LoopIsNotCompletedAndBroken">
            <summary>
            Use before start iteration
            </summary>
        </member>
    </members>
</doc>
