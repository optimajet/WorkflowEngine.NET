var WorkflowDesignerConstants = {
    ActivityColor: "#ECF0F1",
    ActivityTextColor: "#2D3436",
    ActivityInitialColor: "#27AE60",
    ActivityInitialTextColor: "#FFFFFF",
    ActivityFinalColor: "#2980B9",
    ActivityFinalTextColor: "#FFFFFF",
    ActivityShape: "#CECECE",
    SelectColor: "#F39C12",
    SelectTextColor: "#FFFFFF",
    SelectSubProcessColor: "#e3b015",
    SelectSubProcessTextColor: "#FFFFFF",
    ButtonActive: "#D4D8D9",
    BarColor: "#EDF1F2",
    BarSeparatorColor: "#D9DEE0",
    DeleteConfirm: "Sei sicuro di voler eliminare gli articoli selezionati?",
    DeleteConfirmCurrent: "Sei sicuro di voler eliminare questo articolo?",
    FieldIsRequired: "Il campo è obbligatiorio!",
    FieldMustBeUnique: "Il campo deve essere unico!",
    ButtonTextDelete: "Elimina",
    ButtonTextCreate: "Creare",
    ButtonTextSave: "Salvare",
    ButtonTextYes: "Sì",
    ButtonTextNo: "No",
    ButtonTextCancel: "Annulla",
    ButtonTextClose: "Vicino",
    ButtonTextUndo: "Disfare",
    ButtonTextRedo: "Rifare",
    SaveConfirm: "Salva I Cambiamenti?",
    CloseWithoutSaving: "Chiudi senza salvare?",
    TransitionAuto: 'Auto',
    DialogConfirmText: "Domanda",
    None: "Nessuna",
    Warning: "Avvertimento",
    InfoBlockLabel: {
        Activity: "Attività:",
        Transition: "Transizioni:",
        Command: "Comandi:"
    },
    ActivityNamePrefix: "Attività_",
    ActivityFormLabel: {
        Title: "Attività",
        TitleForInline: 'Activity Inline',
        Name: "Nome",
        State: "Stato",
        IsInitial: "Iniziale",
        IsFinal: "Finale",
        IsForSetState: "Per stato impostato",
        IsAutoSchemeUpdate: "Aggiornamento automatico dello schema",
        Implementation: "Implementazione",
        PreExecutionImplementation: "Implementazione pre-esecuzione",
        ImpOrder: "Ordine",
        ImpAction: "Azione",
        ImpActionParameter: "Parametro di azione",
        AlwaysConditionShouldBeSingle: "Le condizioni sempre dovrebbero essere singole",
        OtherwiseConditionShouldBeSingle: "Altrimenti la condizione dovrebbe essere singola",
        Annotations: 'Annotations',
        AnnotationName: 'Name',
        AnnotationValue: 'Value',
        Scheme: "Inline scheme"
    },
    TransitionFormLabel: {
        Title: "Transizione",
        Name: "Nome",
        From: "Dall'attività",
        To: "All'attività",
        Classifier: "Classificatore",
        Restrictions: "Restrizioni",
        RestrictionsType: "Genere",
        RestrictionsActor: "Attore",
        Condition: "Condizione",
        ConditionType: "Genere",
        ConditionAction: "Azione",
        ResultOnPreExecution: "Risultato su PreExecution",
        Trigger: "Grilletto",
        TriggerType: "Genere",
        TriggerCommand: "Comando",
        TriggerTimer: "Timer",
        ConditionActionParameter: "Parametro di azione",
        ConditionInversion: "Inverti il ​​risultato dell'azione",
        ConditionExpression: 'Expression',
        ConditionsConcatenationType: "Tipo di concatenazione delle condizioni",
        AllowConcatenationType: "Concat consentire come",
        RestrictConcatenationType: "Concat limitare come",
        ConditionsListShouldNotBeEmpty: "L'elenco delle condizioni non dovrebbe essere vuoto",
        IsFork: "È una forchetta",
        MergeViaSetState: "Unisci sottoprocesso tramite lo stato impostato",
        DisableParentStateControl: "Disabilitare il controllo del processo genitore",
        ShowConcatParameters: "Mostra concatenazione",
        HideConcatParameters: "Nascondi concatenazione",
        Annotations: 'Annotations',
        AnnotationName: 'Name',
        AnnotationValue: 'Value',
        InlinedFinalActivityName: "Inlined Final Activity Name"
    },
    LocalizationFormLabel: {
        Title: "Localizzazione",
        ObjectName: "ObjectName",
        Type: "Genere",
        IsDefault: "IsDefault",
        Culture: "Cultura",
        Value: "Valore",
        Types: [
            "Command",
            "State",
            "Parameter"
        ]
    },
    TimerFormLabel: {
        Title: "Timer",
        Name: "Nome",
        Type: "genere",
        Value: "Valore",
        Types: [
            "Command",
            "State",
            "Parameter"
        ],
        NotOverrideIfExists: "Non sovrascrivere il timer se esiste"
    },
    ParameterFormLabel: {
        Title: "parametri",
        Name: "Nome",
        Type: "Genere",
        Purpose: "Scopo",
        Value: "Valore",
        InitialValue: "Valore iniziale",
        ShowSystemParameters: "Mostra i parametri di sistema"
    },
    ActorFormLabel: {
        Title: "Attori",
        Name: "Nome",
        Rule: "Regola",
        Value: "Valore"
    },
    CommandFormLabel: {
        Title: "Comando",
        Name: "Nome",
        InputParameters: "Parametri di input",
        InputParametersName: "Nome",
        InputParametersIsRequired: "necessario",
        InputParametersParameter: "Parametro",
        InputParametersDefaultValue: "Predefinito"
    },
    ProcessInfoFormLabel: {
        Title: 'Additional Parameters',
        IsObsolete: "IsObsolete",
        DefiningParameters: 'Defining parameters',
        ProcessParameters: 'Process parameters',
        SystemParametersTabName: 'System Parameters',
        ProcessParametersTabName: 'Process Parameters',
        HistoryTabName: 'History',
        TimersTabName: 'Timers',
        TagsTabName: "Tags",
        HistoryTabFromLabel: 'From',
        HistoryTabFromStateLabel: 'From State',
        HistoryTabToLabel: 'To',
        HistoryTabToStateLabel: 'To State',
        HistoryTabExecutorIdLabel: 'Executor Id',
        HistoryTabActorIdLabel: 'Actor Id',
        HistoryTabTimeLabel: 'Time',
        HistoryTabTriggerNameLabel: 'Trigger Name',
        HistoryTabTransitionClassifierNameLabel: '',
        ParametersNameLabel: 'Name',
        ParametersValueLabel: 'Value',
        TimersTabNameLabel: 'Name',
        TimersTabValueLabel: 'Value',
        RootProcess: "Root Process",
        TagsLabel:'Tags (separated by commas)'
    },
    CodeActionsFormLabel: {
        Title: "Azioni di codice",
        Name: "Nome",
        ActionCode: "Codice di azione",
        IsGlobal: "È globale",
        IsAsync: "Async",
        Type: "Genere",
        GlobalDeleteMessage: "Hai eliminato Global CodeAction. <br/> <b> Altri schemi non saranno in grado di chiamare questo CodeAction! </b>",
        UnGlobalMessage: "Hai cambiato lo stato del flag globale. <br/> Dopo aver salvato questo schema, verrà creata un'Azione Code locale basata su questa Global CodeAction.",
        EditParameters: "Edit parameters",
        Parameters: "Parameters",
        Text: "Text",
        TextArea: "TextArea",
        Number: "Number",
        Checkbox: "Checkbox",
        Dropdown: "Dropdown",
        MultiSelect: "MultiSelect",
        DateTime: "Date/Time",
        Values: 'Values',
        DropdownName: 'Name',
        DropdownValue: 'Value',
        DropdownShouldContainValues: 'Dropdown should contain values',
        IsRequired: 'Required',
        DefaultValue: 'Default value',
        Json: 'Json'
    },
    EditParametersFormlabel: {
        Title: "Edit parameter values",
        NumberRequired: "Should be a numeric value",
        DateShouldBeInISOFormat: "Date/Time parameter should be in ISO8601 format",
        SwitchToJson: "Switch to JSON editor",
        SwitchToConstructor: "Switch to parameter values editor",
        InvalidJson: "JSON object is invalid or does not match the model"
    },
    ToolbarLabel: {
        CreateActivity: "Crea attività",
        CreateInline: 'Create inline (template)',
        CopySelected: "Copia selezionata",
        Undo: "Disfare",
        Redo: "Rifare",
        Move: "Mossa",
        ZoomIn: "Ingrandire",
        ZoomOut: "Zoom indietro",
        ZoomPositionDefault: "Zoom predefinito",
        FullScreen: "A schermo intero",
        Refresh: "Ricaricare",
        AutoArrangement: "Sistemazione automatica",
        Actors: "Attori",
        Commands: "Comandi",
        Parameters: "Parametri",
        Localization: "Localizzazione",
        Timers: "Timer",
        AdditionalParameters: "Parametri aggiuntivi",
        CodeActions: "Azioni di codice",
        Info: "Informazioni estese",
        Delete: "Elimina",
        Clone: "Clone",
        Settings: "Impostazioni",
        CreateTransition: "Crea una transizione",
        CreateActivityTransition: "Crea un'attività e una transizione",
        Legend: "Leggenda",
        ProcessInfo: "Process Info",
        Inline: "The scheme can be inlined"
    },
    ErrorActivityIsInitialCountText: "Un elemento deve essere contrassegnato come flag Iniziale",
    ErrorActivityIsFinalCountText: "This scheme is Inlined. One or more elements must be marked flag Final",
    ErrorReadOnlySaveText: "Designer in modalità ReadOnly, non puoi salvarlo.",
    ErrorInvalidObjectsSaveText: function (objects) {
        return "Can't save the schema. Those objects are in invalid state: " + objects;
    },
    BrokenReferencesDialogText: "This schema contains references to Actions, Conditions or Rules that aren't defined by this schema or current action providers. Do you want to keep them?",
    EditCodeSettings: {
        Height: 600,
        Width: 1000,
        CodeHeight: 390,
        MessageBoxHeight: 400,
        MessageBoxWidth: 600,
        SuccessBoxHeight: 150,
        SuccessBoxWidth: 300
    },
    EditCodeLabel: {
        Title: "Modifica il codice",
        EditCodeButton: "Modifica il codice",
        Usings: "Usings",
        Compile: "Compilare",
        CompileSucceeded: "La compilazione è riuscita.",
        Success: "Successo",
        Error: "Errore",
        OK: "OK",
        ShowUsings: "Mostra gli usi",
        HideUsings: "Nascondi gli usi"
    },
    EditJSONSettings: {
        Height: 600,
        Width: 1000,
        CodeHeight: 480
    },
    EditJSONLabel: {
        Title: "Modifica il valore in JSON",
        CreateEmptyType: "Creare",
        Format: "Formato"
    },
    EditExpressionSettings:
        {
            Height: 600,
            Width: 1000,
            CodeHeight: 390,
            MessageBoxHeight: 400,
            MessageBoxWidth: 600,
            SuccessBoxHeight: 150,
            SuccessBoxWidth: 300
        },
    EditExpressionLabel: {
        Title: "Edit expression",
        Validate: "Validate",
        Succeeded: "Expression is valid.",
        Success: "Success",
        Error: "Error",
        OK: "OK"
    },
    OverviewMap: {
        show: true,
        width: 300,
        height: 150
    },
    UndoDepth: 200,
    DefaultCulture: "it-IT",
    ErrorInBrowserConsole: "See more info in the browser console."
};
